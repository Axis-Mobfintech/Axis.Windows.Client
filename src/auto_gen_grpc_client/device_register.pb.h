// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5fregister_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_5fregister_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_5fregister_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5fregister_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_5fregister_2eproto;
namespace axis {
namespace transactions {
class DeviceRegister;
class DeviceRegisterDefaultTypeInternal;
extern DeviceRegisterDefaultTypeInternal _DeviceRegister_default_instance_;
class DeviceRegisterResponse;
class DeviceRegisterResponseDefaultTypeInternal;
extern DeviceRegisterResponseDefaultTypeInternal _DeviceRegisterResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> ::axis::transactions::DeviceRegister* Arena::CreateMaybeMessage<::axis::transactions::DeviceRegister>(Arena*);
template<> ::axis::transactions::DeviceRegisterResponse* Arena::CreateMaybeMessage<::axis::transactions::DeviceRegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace axis {
namespace transactions {

// ===================================================================

class DeviceRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.DeviceRegister) */ {
 public:
  inline DeviceRegister() : DeviceRegister(nullptr) {}
  virtual ~DeviceRegister();

  DeviceRegister(const DeviceRegister& from);
  DeviceRegister(DeviceRegister&& from) noexcept
    : DeviceRegister() {
    *this = ::std::move(from);
  }

  inline DeviceRegister& operator=(const DeviceRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRegister& operator=(DeviceRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRegister* internal_default_instance() {
    return reinterpret_cast<const DeviceRegister*>(
               &_DeviceRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceRegister& a, DeviceRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRegister* New() const final {
    return CreateMaybeMessage<DeviceRegister>(nullptr);
  }

  DeviceRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRegister& from);
  void MergeFrom(const DeviceRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.DeviceRegister";
  }
  protected:
  explicit DeviceRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_5fregister_2eproto);
    return ::descriptor_table_device_5fregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorIdFieldNumber = 1,
    kReaderSerialNumberFieldNumber = 2,
    kDeviceSerialNumberFieldNumber = 3,
    kKsnDataFieldNumber = 4,
    kLineIdFieldNumber = 5,
    kVehicleIdFieldNumber = 6,
    kRegisterDateFieldNumber = 7,
  };
  // string operator_id = 1;
  void clear_operator_id();
  const std::string& operator_id() const;
  void set_operator_id(const std::string& value);
  void set_operator_id(std::string&& value);
  void set_operator_id(const char* value);
  void set_operator_id(const char* value, size_t size);
  std::string* mutable_operator_id();
  std::string* release_operator_id();
  void set_allocated_operator_id(std::string* operator_id);
  private:
  const std::string& _internal_operator_id() const;
  void _internal_set_operator_id(const std::string& value);
  std::string* _internal_mutable_operator_id();
  public:

  // string reader_serial_number = 2;
  void clear_reader_serial_number();
  const std::string& reader_serial_number() const;
  void set_reader_serial_number(const std::string& value);
  void set_reader_serial_number(std::string&& value);
  void set_reader_serial_number(const char* value);
  void set_reader_serial_number(const char* value, size_t size);
  std::string* mutable_reader_serial_number();
  std::string* release_reader_serial_number();
  void set_allocated_reader_serial_number(std::string* reader_serial_number);
  private:
  const std::string& _internal_reader_serial_number() const;
  void _internal_set_reader_serial_number(const std::string& value);
  std::string* _internal_mutable_reader_serial_number();
  public:

  // string device_serial_number = 3;
  void clear_device_serial_number();
  const std::string& device_serial_number() const;
  void set_device_serial_number(const std::string& value);
  void set_device_serial_number(std::string&& value);
  void set_device_serial_number(const char* value);
  void set_device_serial_number(const char* value, size_t size);
  std::string* mutable_device_serial_number();
  std::string* release_device_serial_number();
  void set_allocated_device_serial_number(std::string* device_serial_number);
  private:
  const std::string& _internal_device_serial_number() const;
  void _internal_set_device_serial_number(const std::string& value);
  std::string* _internal_mutable_device_serial_number();
  public:

  // bytes ksn_data = 4;
  void clear_ksn_data();
  const std::string& ksn_data() const;
  void set_ksn_data(const std::string& value);
  void set_ksn_data(std::string&& value);
  void set_ksn_data(const char* value);
  void set_ksn_data(const void* value, size_t size);
  std::string* mutable_ksn_data();
  std::string* release_ksn_data();
  void set_allocated_ksn_data(std::string* ksn_data);
  private:
  const std::string& _internal_ksn_data() const;
  void _internal_set_ksn_data(const std::string& value);
  std::string* _internal_mutable_ksn_data();
  public:

  // string line_id = 5;
  void clear_line_id();
  const std::string& line_id() const;
  void set_line_id(const std::string& value);
  void set_line_id(std::string&& value);
  void set_line_id(const char* value);
  void set_line_id(const char* value, size_t size);
  std::string* mutable_line_id();
  std::string* release_line_id();
  void set_allocated_line_id(std::string* line_id);
  private:
  const std::string& _internal_line_id() const;
  void _internal_set_line_id(const std::string& value);
  std::string* _internal_mutable_line_id();
  public:

  // string vehicle_id = 6;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // .google.protobuf.Timestamp register_date = 7;
  bool has_register_date() const;
  private:
  bool _internal_has_register_date() const;
  public:
  void clear_register_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_register_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_register_date();
  void set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_register_date();
  public:
  void unsafe_arena_set_allocated_register_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_register_date();

  // @@protoc_insertion_point(class_scope:axis.transactions.DeviceRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reader_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ksn_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* register_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_5fregister_2eproto;
};
// -------------------------------------------------------------------

class DeviceRegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.DeviceRegisterResponse) */ {
 public:
  inline DeviceRegisterResponse() : DeviceRegisterResponse(nullptr) {}
  virtual ~DeviceRegisterResponse();

  DeviceRegisterResponse(const DeviceRegisterResponse& from);
  DeviceRegisterResponse(DeviceRegisterResponse&& from) noexcept
    : DeviceRegisterResponse() {
    *this = ::std::move(from);
  }

  inline DeviceRegisterResponse& operator=(const DeviceRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRegisterResponse& operator=(DeviceRegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceRegisterResponse*>(
               &_DeviceRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceRegisterResponse& a, DeviceRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRegisterResponse* New() const final {
    return CreateMaybeMessage<DeviceRegisterResponse>(nullptr);
  }

  DeviceRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRegisterResponse& from);
  void MergeFrom(const DeviceRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.DeviceRegisterResponse";
  }
  protected:
  explicit DeviceRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_5fregister_2eproto);
    return ::descriptor_table_device_5fregister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterCodeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kRegisterDateFieldNumber = 4,
    kResponseCodeFieldNumber = 1,
  };
  // string register_code = 2;
  void clear_register_code();
  const std::string& register_code() const;
  void set_register_code(const std::string& value);
  void set_register_code(std::string&& value);
  void set_register_code(const char* value);
  void set_register_code(const char* value, size_t size);
  std::string* mutable_register_code();
  std::string* release_register_code();
  void set_allocated_register_code(std::string* register_code);
  private:
  const std::string& _internal_register_code() const;
  void _internal_set_register_code(const std::string& value);
  std::string* _internal_mutable_register_code();
  public:

  // string device_id = 3;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .google.protobuf.Timestamp register_date = 4;
  bool has_register_date() const;
  private:
  bool _internal_has_register_date() const;
  public:
  void clear_register_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_register_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_register_date();
  void set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_register_date();
  public:
  void unsafe_arena_set_allocated_register_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_register_date();

  // int32 response_code = 1;
  void clear_response_code();
  ::PROTOBUF_NAMESPACE_ID::int32 response_code() const;
  void set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_code() const;
  void _internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.DeviceRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* register_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_5fregister_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceRegister

// string operator_id = 1;
inline void DeviceRegister::clear_operator_id() {
  operator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegister::operator_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.operator_id)
  return _internal_operator_id();
}
inline void DeviceRegister::set_operator_id(const std::string& value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegister.operator_id)
}
inline std::string* DeviceRegister::mutable_operator_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.operator_id)
  return _internal_mutable_operator_id();
}
inline const std::string& DeviceRegister::_internal_operator_id() const {
  return operator_id_.Get();
}
inline void DeviceRegister::_internal_set_operator_id(const std::string& value) {
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegister::set_operator_id(std::string&& value) {
  
  operator_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegister.operator_id)
}
inline void DeviceRegister::set_operator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegister.operator_id)
}
inline void DeviceRegister::set_operator_id(const char* value,
    size_t size) {
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegister.operator_id)
}
inline std::string* DeviceRegister::_internal_mutable_operator_id() {
  
  return operator_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegister::release_operator_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.operator_id)
  return operator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegister::set_allocated_operator_id(std::string* operator_id) {
  if (operator_id != nullptr) {
    
  } else {
    
  }
  operator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.operator_id)
}

// string reader_serial_number = 2;
inline void DeviceRegister::clear_reader_serial_number() {
  reader_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegister::reader_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.reader_serial_number)
  return _internal_reader_serial_number();
}
inline void DeviceRegister::set_reader_serial_number(const std::string& value) {
  _internal_set_reader_serial_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegister.reader_serial_number)
}
inline std::string* DeviceRegister::mutable_reader_serial_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.reader_serial_number)
  return _internal_mutable_reader_serial_number();
}
inline const std::string& DeviceRegister::_internal_reader_serial_number() const {
  return reader_serial_number_.Get();
}
inline void DeviceRegister::_internal_set_reader_serial_number(const std::string& value) {
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegister::set_reader_serial_number(std::string&& value) {
  
  reader_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegister.reader_serial_number)
}
inline void DeviceRegister::set_reader_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegister.reader_serial_number)
}
inline void DeviceRegister::set_reader_serial_number(const char* value,
    size_t size) {
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegister.reader_serial_number)
}
inline std::string* DeviceRegister::_internal_mutable_reader_serial_number() {
  
  return reader_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegister::release_reader_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.reader_serial_number)
  return reader_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegister::set_allocated_reader_serial_number(std::string* reader_serial_number) {
  if (reader_serial_number != nullptr) {
    
  } else {
    
  }
  reader_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reader_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.reader_serial_number)
}

// string device_serial_number = 3;
inline void DeviceRegister::clear_device_serial_number() {
  device_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegister::device_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.device_serial_number)
  return _internal_device_serial_number();
}
inline void DeviceRegister::set_device_serial_number(const std::string& value) {
  _internal_set_device_serial_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegister.device_serial_number)
}
inline std::string* DeviceRegister::mutable_device_serial_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.device_serial_number)
  return _internal_mutable_device_serial_number();
}
inline const std::string& DeviceRegister::_internal_device_serial_number() const {
  return device_serial_number_.Get();
}
inline void DeviceRegister::_internal_set_device_serial_number(const std::string& value) {
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegister::set_device_serial_number(std::string&& value) {
  
  device_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegister.device_serial_number)
}
inline void DeviceRegister::set_device_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegister.device_serial_number)
}
inline void DeviceRegister::set_device_serial_number(const char* value,
    size_t size) {
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegister.device_serial_number)
}
inline std::string* DeviceRegister::_internal_mutable_device_serial_number() {
  
  return device_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegister::release_device_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.device_serial_number)
  return device_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegister::set_allocated_device_serial_number(std::string* device_serial_number) {
  if (device_serial_number != nullptr) {
    
  } else {
    
  }
  device_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.device_serial_number)
}

// bytes ksn_data = 4;
inline void DeviceRegister::clear_ksn_data() {
  ksn_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegister::ksn_data() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.ksn_data)
  return _internal_ksn_data();
}
inline void DeviceRegister::set_ksn_data(const std::string& value) {
  _internal_set_ksn_data(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegister.ksn_data)
}
inline std::string* DeviceRegister::mutable_ksn_data() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.ksn_data)
  return _internal_mutable_ksn_data();
}
inline const std::string& DeviceRegister::_internal_ksn_data() const {
  return ksn_data_.Get();
}
inline void DeviceRegister::_internal_set_ksn_data(const std::string& value) {
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegister::set_ksn_data(std::string&& value) {
  
  ksn_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegister.ksn_data)
}
inline void DeviceRegister::set_ksn_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegister.ksn_data)
}
inline void DeviceRegister::set_ksn_data(const void* value,
    size_t size) {
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegister.ksn_data)
}
inline std::string* DeviceRegister::_internal_mutable_ksn_data() {
  
  return ksn_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegister::release_ksn_data() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.ksn_data)
  return ksn_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegister::set_allocated_ksn_data(std::string* ksn_data) {
  if (ksn_data != nullptr) {
    
  } else {
    
  }
  ksn_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ksn_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.ksn_data)
}

// string line_id = 5;
inline void DeviceRegister::clear_line_id() {
  line_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegister::line_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.line_id)
  return _internal_line_id();
}
inline void DeviceRegister::set_line_id(const std::string& value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegister.line_id)
}
inline std::string* DeviceRegister::mutable_line_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.line_id)
  return _internal_mutable_line_id();
}
inline const std::string& DeviceRegister::_internal_line_id() const {
  return line_id_.Get();
}
inline void DeviceRegister::_internal_set_line_id(const std::string& value) {
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegister::set_line_id(std::string&& value) {
  
  line_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegister.line_id)
}
inline void DeviceRegister::set_line_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegister.line_id)
}
inline void DeviceRegister::set_line_id(const char* value,
    size_t size) {
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegister.line_id)
}
inline std::string* DeviceRegister::_internal_mutable_line_id() {
  
  return line_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegister::release_line_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.line_id)
  return line_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegister::set_allocated_line_id(std::string* line_id) {
  if (line_id != nullptr) {
    
  } else {
    
  }
  line_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.line_id)
}

// string vehicle_id = 6;
inline void DeviceRegister::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegister::vehicle_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.vehicle_id)
  return _internal_vehicle_id();
}
inline void DeviceRegister::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegister.vehicle_id)
}
inline std::string* DeviceRegister::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& DeviceRegister::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void DeviceRegister::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegister::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegister.vehicle_id)
}
inline void DeviceRegister::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegister.vehicle_id)
}
inline void DeviceRegister::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegister.vehicle_id)
}
inline std::string* DeviceRegister::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegister::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegister::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.vehicle_id)
}

// .google.protobuf.Timestamp register_date = 7;
inline bool DeviceRegister::_internal_has_register_date() const {
  return this != internal_default_instance() && register_date_ != nullptr;
}
inline bool DeviceRegister::has_register_date() const {
  return _internal_has_register_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceRegister::_internal_register_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = register_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceRegister::register_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegister.register_date)
  return _internal_register_date();
}
inline void DeviceRegister::unsafe_arena_set_allocated_register_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  register_date_ = register_date;
  if (register_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.DeviceRegister.register_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegister::release_register_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegister::unsafe_arena_release_register_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegister.register_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegister::_internal_mutable_register_date() {
  
  if (register_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    register_date_ = p;
  }
  return register_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegister::mutable_register_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegister.register_date)
  return _internal_mutable_register_date();
}
inline void DeviceRegister::set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  if (register_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date)->GetArena();
    if (message_arena != submessage_arena) {
      register_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_date, submessage_arena);
    }
    
  } else {
    
  }
  register_date_ = register_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegister.register_date)
}

// -------------------------------------------------------------------

// DeviceRegisterResponse

// int32 response_code = 1;
inline void DeviceRegisterResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceRegisterResponse::_internal_response_code() const {
  return response_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceRegisterResponse::response_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegisterResponse.response_code)
  return _internal_response_code();
}
inline void DeviceRegisterResponse::_internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response_code_ = value;
}
inline void DeviceRegisterResponse::set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegisterResponse.response_code)
}

// string register_code = 2;
inline void DeviceRegisterResponse::clear_register_code() {
  register_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegisterResponse::register_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegisterResponse.register_code)
  return _internal_register_code();
}
inline void DeviceRegisterResponse::set_register_code(const std::string& value) {
  _internal_set_register_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegisterResponse.register_code)
}
inline std::string* DeviceRegisterResponse::mutable_register_code() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegisterResponse.register_code)
  return _internal_mutable_register_code();
}
inline const std::string& DeviceRegisterResponse::_internal_register_code() const {
  return register_code_.Get();
}
inline void DeviceRegisterResponse::_internal_set_register_code(const std::string& value) {
  
  register_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegisterResponse::set_register_code(std::string&& value) {
  
  register_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegisterResponse.register_code)
}
inline void DeviceRegisterResponse::set_register_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegisterResponse.register_code)
}
inline void DeviceRegisterResponse::set_register_code(const char* value,
    size_t size) {
  
  register_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegisterResponse.register_code)
}
inline std::string* DeviceRegisterResponse::_internal_mutable_register_code() {
  
  return register_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegisterResponse::release_register_code() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegisterResponse.register_code)
  return register_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegisterResponse::set_allocated_register_code(std::string* register_code) {
  if (register_code != nullptr) {
    
  } else {
    
  }
  register_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegisterResponse.register_code)
}

// string device_id = 3;
inline void DeviceRegisterResponse::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRegisterResponse::device_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegisterResponse.device_id)
  return _internal_device_id();
}
inline void DeviceRegisterResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.DeviceRegisterResponse.device_id)
}
inline std::string* DeviceRegisterResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegisterResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DeviceRegisterResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void DeviceRegisterResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRegisterResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.DeviceRegisterResponse.device_id)
}
inline void DeviceRegisterResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.DeviceRegisterResponse.device_id)
}
inline void DeviceRegisterResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.DeviceRegisterResponse.device_id)
}
inline std::string* DeviceRegisterResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRegisterResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegisterResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRegisterResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegisterResponse.device_id)
}

// .google.protobuf.Timestamp register_date = 4;
inline bool DeviceRegisterResponse::_internal_has_register_date() const {
  return this != internal_default_instance() && register_date_ != nullptr;
}
inline bool DeviceRegisterResponse::has_register_date() const {
  return _internal_has_register_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceRegisterResponse::_internal_register_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = register_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceRegisterResponse::register_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.DeviceRegisterResponse.register_date)
  return _internal_register_date();
}
inline void DeviceRegisterResponse::unsafe_arena_set_allocated_register_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  register_date_ = register_date;
  if (register_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.DeviceRegisterResponse.register_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegisterResponse::release_register_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegisterResponse::unsafe_arena_release_register_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.DeviceRegisterResponse.register_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegisterResponse::_internal_mutable_register_date() {
  
  if (register_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    register_date_ = p;
  }
  return register_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceRegisterResponse::mutable_register_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.DeviceRegisterResponse.register_date)
  return _internal_mutable_register_date();
}
inline void DeviceRegisterResponse::set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  if (register_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date)->GetArena();
    if (message_arena != submessage_arena) {
      register_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_date, submessage_arena);
    }
    
  } else {
    
  }
  register_date_ = register_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.DeviceRegisterResponse.register_date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transactions
}  // namespace axis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_5fregister_2eproto
