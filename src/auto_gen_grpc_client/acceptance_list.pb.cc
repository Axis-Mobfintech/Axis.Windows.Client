// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acceptance_list.proto

#include "acceptance_list.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace axis {
namespace transactions {
constexpr AcceptanceListRequest::AcceptanceListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reader_serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ksn_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vehicle_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_date_(nullptr)
  , register_code_(0)
  , acceptance_list_version_(0){}
struct AcceptanceListRequestDefaultTypeInternal {
  constexpr AcceptanceListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcceptanceListRequestDefaultTypeInternal() {}
  union {
    AcceptanceListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcceptanceListRequestDefaultTypeInternal _AcceptanceListRequest_default_instance_;
constexpr AcceptanceListResponse::AcceptanceListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acceptance_list_()
  , transaction_date_(nullptr)
  , response_code_(0)
  , acceptance_list_version_(0){}
struct AcceptanceListResponseDefaultTypeInternal {
  constexpr AcceptanceListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcceptanceListResponseDefaultTypeInternal() {}
  union {
    AcceptanceListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcceptanceListResponseDefaultTypeInternal _AcceptanceListResponse_default_instance_;
constexpr AcceptanceListCardInformation::AcceptanceListCardInformation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pan_list_(nullptr)
  , par_list_(nullptr)
  , action_(0)
{}
struct AcceptanceListCardInformationDefaultTypeInternal {
  constexpr AcceptanceListCardInformationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcceptanceListCardInformationDefaultTypeInternal() {}
  union {
    AcceptanceListCardInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcceptanceListCardInformationDefaultTypeInternal _AcceptanceListCardInformation_default_instance_;
}  // namespace transactions
}  // namespace axis
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_acceptance_5flist_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_acceptance_5flist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_acceptance_5flist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_acceptance_5flist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, operator_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, reader_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, device_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, ksn_data_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, register_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, line_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, transaction_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, acceptance_list_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, acceptance_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, acceptance_list_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, transaction_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListCardInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListCardInformation, pan_list_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListCardInformation, par_list_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListCardInformation, action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::axis::transactions::AcceptanceListRequest)},
  { 16, -1, -1, sizeof(::axis::transactions::AcceptanceListResponse)},
  { 26, -1, -1, sizeof(::axis::transactions::AcceptanceListCardInformation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_AcceptanceListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_AcceptanceListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_AcceptanceListCardInformation_default_instance_),
};

const char descriptor_table_protodef_acceptance_5flist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025acceptance_list.proto\022\021axis.transactio"
  "ns\032\037google/protobuf/timestamp.proto\032 Pro"
  "tos/pan_acceptance_list.proto\032 Protos/pa"
  "r_acceptance_list.proto\032\030Protos/card_act"
  "ion.proto\"\240\002\n\025AcceptanceListRequest\022\021\n\td"
  "evice_id\030\001 \001(\t\022\023\n\013operator_id\030\002 \001(\t\022\034\n\024r"
  "eader_serial_number\030\003 \001(\t\022\034\n\024device_seri"
  "al_number\030\004 \001(\t\022\020\n\010ksn_data\030\005 \001(\014\022\025\n\rreg"
  "ister_code\030\006 \001(\005\022\017\n\007line_id\030\007 \001(\t\022\022\n\nveh"
  "icle_id\030\010 \001(\t\0224\n\020transaction_date\030\t \001(\0132"
  "\032.google.protobuf.Timestamp\022\037\n\027acceptanc"
  "e_list_version\030\n \001(\005\"\321\001\n\026AcceptanceListR"
  "esponse\022\025\n\rresponse_code\030\001 \001(\005\022\037\n\027accept"
  "ance_list_version\030\002 \001(\005\022I\n\017acceptance_li"
  "st\030\003 \003(\01320.axis.transactions.AcceptanceL"
  "istCardInformation\0224\n\020transaction_date\030\004"
  " \001(\0132\032.google.protobuf.Timestamp\"\331\001\n\035Acc"
  "eptanceListCardInformation\022B\n\010pan_list\030\001"
  " \001(\01320.axis.transactions.PrimaryAccountN"
  "umberWhiteList\022E\n\010par_list\030\002 \001(\01323.axis."
  "transactions.PrimaryAccountReferenceWhit"
  "eList\022-\n\006action\030\003 \001(\0162\035.axis.transaction"
  "s.CardAction2\201\001\n\025AcceptanceListService\022h"
  "\n\021GetAcceptanceList\022(.axis.transactions."
  "AcceptanceListRequest\032).axis.transaction"
  "s.AcceptanceListResponseBQ\n#com.axismobf"
  "intech.gpb.transactionsZ\022axistransaction"
  "spb\252\002\025Axis.GPB.Transactionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_acceptance_5flist_2eproto_deps[4] = {
  &::descriptor_table_Protos_2fcard_5faction_2eproto,
  &::descriptor_table_Protos_2fpan_5facceptance_5flist_2eproto,
  &::descriptor_table_Protos_2fpar_5facceptance_5flist_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_acceptance_5flist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_acceptance_5flist_2eproto = {
  false, false, 1115, descriptor_table_protodef_acceptance_5flist_2eproto, "acceptance_list.proto", 
  &descriptor_table_acceptance_5flist_2eproto_once, descriptor_table_acceptance_5flist_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_acceptance_5flist_2eproto::offsets,
  file_level_metadata_acceptance_5flist_2eproto, file_level_enum_descriptors_acceptance_5flist_2eproto, file_level_service_descriptors_acceptance_5flist_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_acceptance_5flist_2eproto_getter() {
  return &descriptor_table_acceptance_5flist_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_acceptance_5flist_2eproto(&descriptor_table_acceptance_5flist_2eproto);
namespace axis {
namespace transactions {

// ===================================================================

class AcceptanceListRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_date(const AcceptanceListRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcceptanceListRequest::_Internal::transaction_date(const AcceptanceListRequest* msg) {
  return *msg->transaction_date_;
}
void AcceptanceListRequest::clear_transaction_date() {
  if (GetArenaForAllocation() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
}
AcceptanceListRequest::AcceptanceListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:axis.transactions.AcceptanceListRequest)
}
AcceptanceListRequest::AcceptanceListRequest(const AcceptanceListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_id().empty()) {
    operator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_id(), 
      GetArenaForAllocation());
  }
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reader_serial_number().empty()) {
    reader_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reader_serial_number(), 
      GetArenaForAllocation());
  }
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_serial_number().empty()) {
    device_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_serial_number(), 
      GetArenaForAllocation());
  }
  ksn_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ksn_data().empty()) {
    ksn_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ksn_data(), 
      GetArenaForAllocation());
  }
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_id().empty()) {
    line_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line_id(), 
      GetArenaForAllocation());
  }
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vehicle_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction_date()) {
    transaction_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.transaction_date_);
  } else {
    transaction_date_ = nullptr;
  }
  ::memcpy(&register_code_, &from.register_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptance_list_version_) -
    reinterpret_cast<char*>(&register_code_)) + sizeof(acceptance_list_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.AcceptanceListRequest)
}

void AcceptanceListRequest::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ksn_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceptance_list_version_) -
    reinterpret_cast<char*>(&transaction_date_)) + sizeof(acceptance_list_version_));
}

AcceptanceListRequest::~AcceptanceListRequest() {
  // @@protoc_insertion_point(destructor:axis.transactions.AcceptanceListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcceptanceListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ksn_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_date_;
}

void AcceptanceListRequest::ArenaDtor(void* object) {
  AcceptanceListRequest* _this = reinterpret_cast< AcceptanceListRequest* >(object);
  (void)_this;
}
void AcceptanceListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptanceListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcceptanceListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.AcceptanceListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  operator_id_.ClearToEmpty();
  reader_serial_number_.ClearToEmpty();
  device_serial_number_.ClearToEmpty();
  ksn_data_.ClearToEmpty();
  line_id_.ClearToEmpty();
  vehicle_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
  ::memset(&register_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_list_version_) -
      reinterpret_cast<char*>(&register_code_)) + sizeof(acceptance_list_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptanceListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.operator_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reader_serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reader_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.reader_serial_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.device_serial_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ksn_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ksn_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 register_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          register_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string line_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_line_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.line_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vehicle_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.vehicle_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp transaction_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 acceptance_list_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          acceptance_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptanceListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.AcceptanceListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string operator_id = 2;
  if (!this->_internal_operator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_id().data(), static_cast<int>(this->_internal_operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.operator_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_id(), target);
  }

  // string reader_serial_number = 3;
  if (!this->_internal_reader_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reader_serial_number().data(), static_cast<int>(this->_internal_reader_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.reader_serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reader_serial_number(), target);
  }

  // string device_serial_number = 4;
  if (!this->_internal_device_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_serial_number().data(), static_cast<int>(this->_internal_device_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.device_serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_serial_number(), target);
  }

  // bytes ksn_data = 5;
  if (!this->_internal_ksn_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ksn_data(), target);
  }

  // int32 register_code = 6;
  if (this->_internal_register_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_register_code(), target);
  }

  // string line_id = 7;
  if (!this->_internal_line_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_id().data(), static_cast<int>(this->_internal_line_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.line_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_line_id(), target);
  }

  // string vehicle_id = 8;
  if (!this->_internal_vehicle_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vehicle_id(), target);
  }

  // .google.protobuf.Timestamp transaction_date = 9;
  if (this->_internal_has_transaction_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::transaction_date(this), target, stream);
  }

  // int32 acceptance_list_version = 10;
  if (this->_internal_acceptance_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_acceptance_list_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.AcceptanceListRequest)
  return target;
}

size_t AcceptanceListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.AcceptanceListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string operator_id = 2;
  if (!this->_internal_operator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_id());
  }

  // string reader_serial_number = 3;
  if (!this->_internal_reader_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reader_serial_number());
  }

  // string device_serial_number = 4;
  if (!this->_internal_device_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_serial_number());
  }

  // bytes ksn_data = 5;
  if (!this->_internal_ksn_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ksn_data());
  }

  // string line_id = 7;
  if (!this->_internal_line_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_id());
  }

  // string vehicle_id = 8;
  if (!this->_internal_vehicle_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // .google.protobuf.Timestamp transaction_date = 9;
  if (this->_internal_has_transaction_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_date_);
  }

  // int32 register_code = 6;
  if (this->_internal_register_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_register_code());
  }

  // int32 acceptance_list_version = 10;
  if (this->_internal_acceptance_list_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_acceptance_list_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptanceListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcceptanceListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptanceListRequest::GetClassData() const { return &_class_data_; }

void AcceptanceListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcceptanceListRequest *>(to)->MergeFrom(
      static_cast<const AcceptanceListRequest &>(from));
}


void AcceptanceListRequest::MergeFrom(const AcceptanceListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.AcceptanceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_operator_id().empty()) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (!from._internal_reader_serial_number().empty()) {
    _internal_set_reader_serial_number(from._internal_reader_serial_number());
  }
  if (!from._internal_device_serial_number().empty()) {
    _internal_set_device_serial_number(from._internal_device_serial_number());
  }
  if (!from._internal_ksn_data().empty()) {
    _internal_set_ksn_data(from._internal_ksn_data());
  }
  if (!from._internal_line_id().empty()) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (!from._internal_vehicle_id().empty()) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from._internal_has_transaction_date()) {
    _internal_mutable_transaction_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_transaction_date());
  }
  if (from._internal_register_code() != 0) {
    _internal_set_register_code(from._internal_register_code());
  }
  if (from._internal_acceptance_list_version() != 0) {
    _internal_set_acceptance_list_version(from._internal_acceptance_list_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptanceListRequest::CopyFrom(const AcceptanceListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.AcceptanceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceListRequest::IsInitialized() const {
  return true;
}

void AcceptanceListRequest::InternalSwap(AcceptanceListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator_id_, lhs_arena,
      &other->operator_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reader_serial_number_, lhs_arena,
      &other->reader_serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_serial_number_, lhs_arena,
      &other->device_serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ksn_data_, lhs_arena,
      &other->ksn_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &line_id_, lhs_arena,
      &other->line_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vehicle_id_, lhs_arena,
      &other->vehicle_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptanceListRequest, acceptance_list_version_)
      + sizeof(AcceptanceListRequest::acceptance_list_version_)
      - PROTOBUF_FIELD_OFFSET(AcceptanceListRequest, transaction_date_)>(
          reinterpret_cast<char*>(&transaction_date_),
          reinterpret_cast<char*>(&other->transaction_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptanceListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_acceptance_5flist_2eproto_getter, &descriptor_table_acceptance_5flist_2eproto_once,
      file_level_metadata_acceptance_5flist_2eproto[0]);
}

// ===================================================================

class AcceptanceListResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_date(const AcceptanceListResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcceptanceListResponse::_Internal::transaction_date(const AcceptanceListResponse* msg) {
  return *msg->transaction_date_;
}
void AcceptanceListResponse::clear_transaction_date() {
  if (GetArenaForAllocation() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
}
AcceptanceListResponse::AcceptanceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  acceptance_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:axis.transactions.AcceptanceListResponse)
}
AcceptanceListResponse::AcceptanceListResponse(const AcceptanceListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      acceptance_list_(from.acceptance_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction_date()) {
    transaction_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.transaction_date_);
  } else {
    transaction_date_ = nullptr;
  }
  ::memcpy(&response_code_, &from.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptance_list_version_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(acceptance_list_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.AcceptanceListResponse)
}

void AcceptanceListResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceptance_list_version_) -
    reinterpret_cast<char*>(&transaction_date_)) + sizeof(acceptance_list_version_));
}

AcceptanceListResponse::~AcceptanceListResponse() {
  // @@protoc_insertion_point(destructor:axis.transactions.AcceptanceListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcceptanceListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_date_;
}

void AcceptanceListResponse::ArenaDtor(void* object) {
  AcceptanceListResponse* _this = reinterpret_cast< AcceptanceListResponse* >(object);
  (void)_this;
}
void AcceptanceListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptanceListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcceptanceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.AcceptanceListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceptance_list_.Clear();
  if (GetArenaForAllocation() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_list_version_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(acceptance_list_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptanceListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 acceptance_list_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          acceptance_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .axis.transactions.AcceptanceListCardInformation acceptance_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acceptance_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp transaction_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptanceListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.AcceptanceListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 response_code = 1;
  if (this->_internal_response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_response_code(), target);
  }

  // int32 acceptance_list_version = 2;
  if (this->_internal_acceptance_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_acceptance_list_version(), target);
  }

  // repeated .axis.transactions.AcceptanceListCardInformation acceptance_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_acceptance_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_acceptance_list(i), target, stream);
  }

  // .google.protobuf.Timestamp transaction_date = 4;
  if (this->_internal_has_transaction_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transaction_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.AcceptanceListResponse)
  return target;
}

size_t AcceptanceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.AcceptanceListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .axis.transactions.AcceptanceListCardInformation acceptance_list = 3;
  total_size += 1UL * this->_internal_acceptance_list_size();
  for (const auto& msg : this->acceptance_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp transaction_date = 4;
  if (this->_internal_has_transaction_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_date_);
  }

  // int32 response_code = 1;
  if (this->_internal_response_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_response_code());
  }

  // int32 acceptance_list_version = 2;
  if (this->_internal_acceptance_list_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_acceptance_list_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptanceListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcceptanceListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptanceListResponse::GetClassData() const { return &_class_data_; }

void AcceptanceListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcceptanceListResponse *>(to)->MergeFrom(
      static_cast<const AcceptanceListResponse &>(from));
}


void AcceptanceListResponse::MergeFrom(const AcceptanceListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.AcceptanceListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acceptance_list_.MergeFrom(from.acceptance_list_);
  if (from._internal_has_transaction_date()) {
    _internal_mutable_transaction_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_transaction_date());
  }
  if (from._internal_response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
  if (from._internal_acceptance_list_version() != 0) {
    _internal_set_acceptance_list_version(from._internal_acceptance_list_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptanceListResponse::CopyFrom(const AcceptanceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.AcceptanceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceListResponse::IsInitialized() const {
  return true;
}

void AcceptanceListResponse::InternalSwap(AcceptanceListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  acceptance_list_.InternalSwap(&other->acceptance_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptanceListResponse, acceptance_list_version_)
      + sizeof(AcceptanceListResponse::acceptance_list_version_)
      - PROTOBUF_FIELD_OFFSET(AcceptanceListResponse, transaction_date_)>(
          reinterpret_cast<char*>(&transaction_date_),
          reinterpret_cast<char*>(&other->transaction_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptanceListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_acceptance_5flist_2eproto_getter, &descriptor_table_acceptance_5flist_2eproto_once,
      file_level_metadata_acceptance_5flist_2eproto[1]);
}

// ===================================================================

class AcceptanceListCardInformation::_Internal {
 public:
  static const ::axis::transactions::PrimaryAccountNumberWhiteList& pan_list(const AcceptanceListCardInformation* msg);
  static const ::axis::transactions::PrimaryAccountReferenceWhiteList& par_list(const AcceptanceListCardInformation* msg);
};

const ::axis::transactions::PrimaryAccountNumberWhiteList&
AcceptanceListCardInformation::_Internal::pan_list(const AcceptanceListCardInformation* msg) {
  return *msg->pan_list_;
}
const ::axis::transactions::PrimaryAccountReferenceWhiteList&
AcceptanceListCardInformation::_Internal::par_list(const AcceptanceListCardInformation* msg) {
  return *msg->par_list_;
}
void AcceptanceListCardInformation::clear_pan_list() {
  if (GetArenaForAllocation() == nullptr && pan_list_ != nullptr) {
    delete pan_list_;
  }
  pan_list_ = nullptr;
}
void AcceptanceListCardInformation::clear_par_list() {
  if (GetArenaForAllocation() == nullptr && par_list_ != nullptr) {
    delete par_list_;
  }
  par_list_ = nullptr;
}
AcceptanceListCardInformation::AcceptanceListCardInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:axis.transactions.AcceptanceListCardInformation)
}
AcceptanceListCardInformation::AcceptanceListCardInformation(const AcceptanceListCardInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pan_list()) {
    pan_list_ = new ::axis::transactions::PrimaryAccountNumberWhiteList(*from.pan_list_);
  } else {
    pan_list_ = nullptr;
  }
  if (from._internal_has_par_list()) {
    par_list_ = new ::axis::transactions::PrimaryAccountReferenceWhiteList(*from.par_list_);
  } else {
    par_list_ = nullptr;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:axis.transactions.AcceptanceListCardInformation)
}

void AcceptanceListCardInformation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pan_list_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&pan_list_)) + sizeof(action_));
}

AcceptanceListCardInformation::~AcceptanceListCardInformation() {
  // @@protoc_insertion_point(destructor:axis.transactions.AcceptanceListCardInformation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcceptanceListCardInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pan_list_;
  if (this != internal_default_instance()) delete par_list_;
}

void AcceptanceListCardInformation::ArenaDtor(void* object) {
  AcceptanceListCardInformation* _this = reinterpret_cast< AcceptanceListCardInformation* >(object);
  (void)_this;
}
void AcceptanceListCardInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptanceListCardInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcceptanceListCardInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.AcceptanceListCardInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pan_list_ != nullptr) {
    delete pan_list_;
  }
  pan_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && par_list_ != nullptr) {
    delete par_list_;
  }
  par_list_ = nullptr;
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptanceListCardInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .axis.transactions.PrimaryAccountNumberWhiteList pan_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pan_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .axis.transactions.PrimaryAccountReferenceWhiteList par_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_par_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .axis.transactions.CardAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::axis::transactions::CardAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptanceListCardInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.AcceptanceListCardInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .axis.transactions.PrimaryAccountNumberWhiteList pan_list = 1;
  if (this->_internal_has_pan_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pan_list(this), target, stream);
  }

  // .axis.transactions.PrimaryAccountReferenceWhiteList par_list = 2;
  if (this->_internal_has_par_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::par_list(this), target, stream);
  }

  // .axis.transactions.CardAction action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.AcceptanceListCardInformation)
  return target;
}

size_t AcceptanceListCardInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.AcceptanceListCardInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .axis.transactions.PrimaryAccountNumberWhiteList pan_list = 1;
  if (this->_internal_has_pan_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pan_list_);
  }

  // .axis.transactions.PrimaryAccountReferenceWhiteList par_list = 2;
  if (this->_internal_has_par_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *par_list_);
  }

  // .axis.transactions.CardAction action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptanceListCardInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcceptanceListCardInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptanceListCardInformation::GetClassData() const { return &_class_data_; }

void AcceptanceListCardInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcceptanceListCardInformation *>(to)->MergeFrom(
      static_cast<const AcceptanceListCardInformation &>(from));
}


void AcceptanceListCardInformation::MergeFrom(const AcceptanceListCardInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.AcceptanceListCardInformation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pan_list()) {
    _internal_mutable_pan_list()->::axis::transactions::PrimaryAccountNumberWhiteList::MergeFrom(from._internal_pan_list());
  }
  if (from._internal_has_par_list()) {
    _internal_mutable_par_list()->::axis::transactions::PrimaryAccountReferenceWhiteList::MergeFrom(from._internal_par_list());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptanceListCardInformation::CopyFrom(const AcceptanceListCardInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.AcceptanceListCardInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceListCardInformation::IsInitialized() const {
  return true;
}

void AcceptanceListCardInformation::InternalSwap(AcceptanceListCardInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptanceListCardInformation, action_)
      + sizeof(AcceptanceListCardInformation::action_)
      - PROTOBUF_FIELD_OFFSET(AcceptanceListCardInformation, pan_list_)>(
          reinterpret_cast<char*>(&pan_list_),
          reinterpret_cast<char*>(&other->pan_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptanceListCardInformation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_acceptance_5flist_2eproto_getter, &descriptor_table_acceptance_5flist_2eproto_once,
      file_level_metadata_acceptance_5flist_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::AcceptanceListRequest* Arena::CreateMaybeMessage< ::axis::transactions::AcceptanceListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::AcceptanceListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::AcceptanceListResponse* Arena::CreateMaybeMessage< ::axis::transactions::AcceptanceListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::AcceptanceListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::AcceptanceListCardInformation* Arena::CreateMaybeMessage< ::axis::transactions::AcceptanceListCardInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::AcceptanceListCardInformation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
