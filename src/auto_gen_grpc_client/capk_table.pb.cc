// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos/capk_table.proto

#include "Protos/capk_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace axis {
namespace transactions {
class CertificateAuthorityPublicKeyTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CertificateAuthorityPublicKeyTable> _instance;
} _CertificateAuthorityPublicKeyTable_default_instance_;
}  // namespace transactions
}  // namespace axis
static void InitDefaultsscc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_CertificateAuthorityPublicKeyTable_default_instance_;
    new (ptr) ::axis::transactions::CertificateAuthorityPublicKeyTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::CertificateAuthorityPublicKeyTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protos_2fcapk_5ftable_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Protos_2fcapk_5ftable_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protos_2fcapk_5ftable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protos_2fcapk_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::CertificateAuthorityPublicKeyTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::CertificateAuthorityPublicKeyTable, index_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::CertificateAuthorityPublicKeyTable, registered_identifier_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::CertificateAuthorityPublicKeyTable, rsa_key_modulus_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::CertificateAuthorityPublicKeyTable, rsa_key_exponent_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::CertificateAuthorityPublicKeyTable, checksum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::axis::transactions::CertificateAuthorityPublicKeyTable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_CertificateAuthorityPublicKeyTable_default_instance_),
};

const char descriptor_table_protodef_Protos_2fcapk_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027Protos/capk_table.proto\022\021axis.transact"
  "ions\"\227\001\n\"CertificateAuthorityPublicKeyTa"
  "ble\022\r\n\005index\030\001 \001(\005\022\035\n\025registered_identif"
  "ier\030\002 \001(\014\022\027\n\017rsa_key_modulus\030\003 \001(\014\022\030\n\020rs"
  "a_key_exponent\030\004 \001(\014\022\020\n\010checksum\030\005 \001(\014BQ"
  "\n#com.axismobfintech.gpb.transactionsZ\022a"
  "xistransactionspb\252\002\025Axis.GPB.Transaction"
  "sb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protos_2fcapk_5ftable_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Protos_2fcapk_5ftable_2eproto_sccs[1] = {
  &scc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protos_2fcapk_5ftable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protos_2fcapk_5ftable_2eproto = {
  false, false, descriptor_table_protodef_Protos_2fcapk_5ftable_2eproto, "Protos/capk_table.proto", 289,
  &descriptor_table_Protos_2fcapk_5ftable_2eproto_once, descriptor_table_Protos_2fcapk_5ftable_2eproto_sccs, descriptor_table_Protos_2fcapk_5ftable_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Protos_2fcapk_5ftable_2eproto::offsets,
  file_level_metadata_Protos_2fcapk_5ftable_2eproto, 1, file_level_enum_descriptors_Protos_2fcapk_5ftable_2eproto, file_level_service_descriptors_Protos_2fcapk_5ftable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Protos_2fcapk_5ftable_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Protos_2fcapk_5ftable_2eproto)), true);
namespace axis {
namespace transactions {

// ===================================================================

void CertificateAuthorityPublicKeyTable::InitAsDefaultInstance() {
}
class CertificateAuthorityPublicKeyTable::_Internal {
 public:
};

CertificateAuthorityPublicKeyTable::CertificateAuthorityPublicKeyTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.CertificateAuthorityPublicKeyTable)
}
CertificateAuthorityPublicKeyTable::CertificateAuthorityPublicKeyTable(const CertificateAuthorityPublicKeyTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  registered_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registered_identifier().empty()) {
    registered_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_registered_identifier(),
      GetArena());
  }
  rsa_key_modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsa_key_modulus().empty()) {
    rsa_key_modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rsa_key_modulus(),
      GetArena());
  }
  rsa_key_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsa_key_exponent().empty()) {
    rsa_key_exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rsa_key_exponent(),
      GetArena());
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checksum().empty()) {
    checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checksum(),
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:axis.transactions.CertificateAuthorityPublicKeyTable)
}

void CertificateAuthorityPublicKeyTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto.base);
  registered_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsa_key_modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsa_key_exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

CertificateAuthorityPublicKeyTable::~CertificateAuthorityPublicKeyTable() {
  // @@protoc_insertion_point(destructor:axis.transactions.CertificateAuthorityPublicKeyTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CertificateAuthorityPublicKeyTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  registered_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsa_key_modulus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsa_key_exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CertificateAuthorityPublicKeyTable::ArenaDtor(void* object) {
  CertificateAuthorityPublicKeyTable* _this = reinterpret_cast< CertificateAuthorityPublicKeyTable* >(object);
  (void)_this;
}
void CertificateAuthorityPublicKeyTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CertificateAuthorityPublicKeyTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CertificateAuthorityPublicKeyTable& CertificateAuthorityPublicKeyTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto.base);
  return *internal_default_instance();
}


void CertificateAuthorityPublicKeyTable::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registered_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rsa_key_modulus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rsa_key_exponent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertificateAuthorityPublicKeyTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes registered_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_registered_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsa_key_modulus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rsa_key_modulus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsa_key_exponent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rsa_key_exponent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes checksum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CertificateAuthorityPublicKeyTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes registered_identifier = 2;
  if (this->registered_identifier().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_registered_identifier(), target);
  }

  // bytes rsa_key_modulus = 3;
  if (this->rsa_key_modulus().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rsa_key_modulus(), target);
  }

  // bytes rsa_key_exponent = 4;
  if (this->rsa_key_exponent().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_rsa_key_exponent(), target);
  }

  // bytes checksum = 5;
  if (this->checksum().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.CertificateAuthorityPublicKeyTable)
  return target;
}

size_t CertificateAuthorityPublicKeyTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes registered_identifier = 2;
  if (this->registered_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_registered_identifier());
  }

  // bytes rsa_key_modulus = 3;
  if (this->rsa_key_modulus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsa_key_modulus());
  }

  // bytes rsa_key_exponent = 4;
  if (this->rsa_key_exponent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsa_key_exponent());
  }

  // bytes checksum = 5;
  if (this->checksum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_checksum());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CertificateAuthorityPublicKeyTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CertificateAuthorityPublicKeyTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CertificateAuthorityPublicKeyTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.CertificateAuthorityPublicKeyTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.CertificateAuthorityPublicKeyTable)
    MergeFrom(*source);
  }
}

void CertificateAuthorityPublicKeyTable::MergeFrom(const CertificateAuthorityPublicKeyTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.registered_identifier().size() > 0) {
    _internal_set_registered_identifier(from._internal_registered_identifier());
  }
  if (from.rsa_key_modulus().size() > 0) {
    _internal_set_rsa_key_modulus(from._internal_rsa_key_modulus());
  }
  if (from.rsa_key_exponent().size() > 0) {
    _internal_set_rsa_key_exponent(from._internal_rsa_key_exponent());
  }
  if (from.checksum().size() > 0) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void CertificateAuthorityPublicKeyTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateAuthorityPublicKeyTable::CopyFrom(const CertificateAuthorityPublicKeyTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.CertificateAuthorityPublicKeyTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateAuthorityPublicKeyTable::IsInitialized() const {
  return true;
}

void CertificateAuthorityPublicKeyTable::InternalSwap(CertificateAuthorityPublicKeyTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  registered_identifier_.Swap(&other->registered_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rsa_key_modulus_.Swap(&other->rsa_key_modulus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rsa_key_exponent_.Swap(&other->rsa_key_exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.Swap(&other->checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CertificateAuthorityPublicKeyTable::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::CertificateAuthorityPublicKeyTable* Arena::CreateMaybeMessage< ::axis::transactions::CertificateAuthorityPublicKeyTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::CertificateAuthorityPublicKeyTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
