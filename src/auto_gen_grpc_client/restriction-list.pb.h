// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: restriction-list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_restriction_2dlist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_restriction_2dlist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "logs/protos/pan-restriction-list.pb.h"
#include "logs/protos/par-restriction-list.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_restriction_2dlist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_restriction_2dlist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_restriction_2dlist_2eproto;
namespace axis {
namespace transactions {
class RestrictionListRequest;
class RestrictionListRequestDefaultTypeInternal;
extern RestrictionListRequestDefaultTypeInternal _RestrictionListRequest_default_instance_;
class RestrictionListResponse;
class RestrictionListResponseDefaultTypeInternal;
extern RestrictionListResponseDefaultTypeInternal _RestrictionListResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> ::axis::transactions::RestrictionListRequest* Arena::CreateMaybeMessage<::axis::transactions::RestrictionListRequest>(Arena*);
template<> ::axis::transactions::RestrictionListResponse* Arena::CreateMaybeMessage<::axis::transactions::RestrictionListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace axis {
namespace transactions {

// ===================================================================

class RestrictionListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.RestrictionListRequest) */ {
 public:
  inline RestrictionListRequest() : RestrictionListRequest(nullptr) {}
  virtual ~RestrictionListRequest();

  RestrictionListRequest(const RestrictionListRequest& from);
  RestrictionListRequest(RestrictionListRequest&& from) noexcept
    : RestrictionListRequest() {
    *this = ::std::move(from);
  }

  inline RestrictionListRequest& operator=(const RestrictionListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictionListRequest& operator=(RestrictionListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictionListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictionListRequest* internal_default_instance() {
    return reinterpret_cast<const RestrictionListRequest*>(
               &_RestrictionListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RestrictionListRequest& a, RestrictionListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictionListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictionListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictionListRequest* New() const final {
    return CreateMaybeMessage<RestrictionListRequest>(nullptr);
  }

  RestrictionListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictionListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictionListRequest& from);
  void MergeFrom(const RestrictionListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictionListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.RestrictionListRequest";
  }
  protected:
  explicit RestrictionListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_restriction_2dlist_2eproto);
    return ::descriptor_table_restriction_2dlist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kOperatorIdFieldNumber = 2,
    kReaderSerialNumberFieldNumber = 3,
    kDeviceSerialNumberFieldNumber = 4,
    kKsnDataFieldNumber = 5,
    kLineIdFieldNumber = 7,
    kVehicleIdFieldNumber = 8,
    kRegisterDateFieldNumber = 9,
    kRegisterCodeFieldNumber = 6,
    kRestrictionListVersionFieldNumber = 10,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string operator_id = 2;
  void clear_operator_id();
  const std::string& operator_id() const;
  void set_operator_id(const std::string& value);
  void set_operator_id(std::string&& value);
  void set_operator_id(const char* value);
  void set_operator_id(const char* value, size_t size);
  std::string* mutable_operator_id();
  std::string* release_operator_id();
  void set_allocated_operator_id(std::string* operator_id);
  private:
  const std::string& _internal_operator_id() const;
  void _internal_set_operator_id(const std::string& value);
  std::string* _internal_mutable_operator_id();
  public:

  // string reader_serial_number = 3;
  void clear_reader_serial_number();
  const std::string& reader_serial_number() const;
  void set_reader_serial_number(const std::string& value);
  void set_reader_serial_number(std::string&& value);
  void set_reader_serial_number(const char* value);
  void set_reader_serial_number(const char* value, size_t size);
  std::string* mutable_reader_serial_number();
  std::string* release_reader_serial_number();
  void set_allocated_reader_serial_number(std::string* reader_serial_number);
  private:
  const std::string& _internal_reader_serial_number() const;
  void _internal_set_reader_serial_number(const std::string& value);
  std::string* _internal_mutable_reader_serial_number();
  public:

  // string device_serial_number = 4;
  void clear_device_serial_number();
  const std::string& device_serial_number() const;
  void set_device_serial_number(const std::string& value);
  void set_device_serial_number(std::string&& value);
  void set_device_serial_number(const char* value);
  void set_device_serial_number(const char* value, size_t size);
  std::string* mutable_device_serial_number();
  std::string* release_device_serial_number();
  void set_allocated_device_serial_number(std::string* device_serial_number);
  private:
  const std::string& _internal_device_serial_number() const;
  void _internal_set_device_serial_number(const std::string& value);
  std::string* _internal_mutable_device_serial_number();
  public:

  // bytes ksn_data = 5;
  void clear_ksn_data();
  const std::string& ksn_data() const;
  void set_ksn_data(const std::string& value);
  void set_ksn_data(std::string&& value);
  void set_ksn_data(const char* value);
  void set_ksn_data(const void* value, size_t size);
  std::string* mutable_ksn_data();
  std::string* release_ksn_data();
  void set_allocated_ksn_data(std::string* ksn_data);
  private:
  const std::string& _internal_ksn_data() const;
  void _internal_set_ksn_data(const std::string& value);
  std::string* _internal_mutable_ksn_data();
  public:

  // string line_id = 7;
  void clear_line_id();
  const std::string& line_id() const;
  void set_line_id(const std::string& value);
  void set_line_id(std::string&& value);
  void set_line_id(const char* value);
  void set_line_id(const char* value, size_t size);
  std::string* mutable_line_id();
  std::string* release_line_id();
  void set_allocated_line_id(std::string* line_id);
  private:
  const std::string& _internal_line_id() const;
  void _internal_set_line_id(const std::string& value);
  std::string* _internal_mutable_line_id();
  public:

  // string vehicle_id = 8;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // .google.protobuf.Timestamp register_date = 9;
  bool has_register_date() const;
  private:
  bool _internal_has_register_date() const;
  public:
  void clear_register_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_register_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_register_date();
  void set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_register_date();
  public:
  void unsafe_arena_set_allocated_register_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_register_date();

  // int32 register_code = 6;
  void clear_register_code();
  ::PROTOBUF_NAMESPACE_ID::int32 register_code() const;
  void set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_register_code() const;
  void _internal_set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 restriction_list_version = 10;
  void clear_restriction_list_version();
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version() const;
  void set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restriction_list_version() const;
  void _internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.RestrictionListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reader_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ksn_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* register_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 register_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_restriction_2dlist_2eproto;
};
// -------------------------------------------------------------------

class RestrictionListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.RestrictionListResponse) */ {
 public:
  inline RestrictionListResponse() : RestrictionListResponse(nullptr) {}
  virtual ~RestrictionListResponse();

  RestrictionListResponse(const RestrictionListResponse& from);
  RestrictionListResponse(RestrictionListResponse&& from) noexcept
    : RestrictionListResponse() {
    *this = ::std::move(from);
  }

  inline RestrictionListResponse& operator=(const RestrictionListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictionListResponse& operator=(RestrictionListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictionListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictionListResponse* internal_default_instance() {
    return reinterpret_cast<const RestrictionListResponse*>(
               &_RestrictionListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RestrictionListResponse& a, RestrictionListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictionListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictionListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictionListResponse* New() const final {
    return CreateMaybeMessage<RestrictionListResponse>(nullptr);
  }

  RestrictionListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictionListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictionListResponse& from);
  void MergeFrom(const RestrictionListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictionListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.RestrictionListResponse";
  }
  protected:
  explicit RestrictionListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_restriction_2dlist_2eproto);
    return ::descriptor_table_restriction_2dlist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPanListFieldNumber = 3,
    kParListFieldNumber = 4,
    kRegisterDateFieldNumber = 5,
    kResponseCodeFieldNumber = 1,
    kRestrictionListVersionFieldNumber = 2,
  };
  // .axis.transactions.PrimaryAccountNumberBlackList pan_list = 3;
  bool has_pan_list() const;
  private:
  bool _internal_has_pan_list() const;
  public:
  void clear_pan_list();
  const ::axis::transactions::PrimaryAccountNumberBlackList& pan_list() const;
  ::axis::transactions::PrimaryAccountNumberBlackList* release_pan_list();
  ::axis::transactions::PrimaryAccountNumberBlackList* mutable_pan_list();
  void set_allocated_pan_list(::axis::transactions::PrimaryAccountNumberBlackList* pan_list);
  private:
  const ::axis::transactions::PrimaryAccountNumberBlackList& _internal_pan_list() const;
  ::axis::transactions::PrimaryAccountNumberBlackList* _internal_mutable_pan_list();
  public:
  void unsafe_arena_set_allocated_pan_list(
      ::axis::transactions::PrimaryAccountNumberBlackList* pan_list);
  ::axis::transactions::PrimaryAccountNumberBlackList* unsafe_arena_release_pan_list();

  // .axis.transactions.PrimaryAccountReferenceBlackList par_list = 4;
  bool has_par_list() const;
  private:
  bool _internal_has_par_list() const;
  public:
  void clear_par_list();
  const ::axis::transactions::PrimaryAccountReferenceBlackList& par_list() const;
  ::axis::transactions::PrimaryAccountReferenceBlackList* release_par_list();
  ::axis::transactions::PrimaryAccountReferenceBlackList* mutable_par_list();
  void set_allocated_par_list(::axis::transactions::PrimaryAccountReferenceBlackList* par_list);
  private:
  const ::axis::transactions::PrimaryAccountReferenceBlackList& _internal_par_list() const;
  ::axis::transactions::PrimaryAccountReferenceBlackList* _internal_mutable_par_list();
  public:
  void unsafe_arena_set_allocated_par_list(
      ::axis::transactions::PrimaryAccountReferenceBlackList* par_list);
  ::axis::transactions::PrimaryAccountReferenceBlackList* unsafe_arena_release_par_list();

  // .google.protobuf.Timestamp register_date = 5;
  bool has_register_date() const;
  private:
  bool _internal_has_register_date() const;
  public:
  void clear_register_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_register_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_register_date();
  void set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_register_date();
  public:
  void unsafe_arena_set_allocated_register_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_register_date();

  // int32 response_code = 1;
  void clear_response_code();
  ::PROTOBUF_NAMESPACE_ID::int32 response_code() const;
  void set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_code() const;
  void _internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 restriction_list_version = 2;
  void clear_restriction_list_version();
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version() const;
  void set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restriction_list_version() const;
  void _internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.RestrictionListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::axis::transactions::PrimaryAccountNumberBlackList* pan_list_;
  ::axis::transactions::PrimaryAccountReferenceBlackList* par_list_;
  PROTOBUF_NAMESPACE_ID::Timestamp* register_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_restriction_2dlist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RestrictionListRequest

// string device_id = 1;
inline void RestrictionListRequest::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::device_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.device_id)
  return _internal_device_id();
}
inline void RestrictionListRequest::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.device_id)
}
inline std::string* RestrictionListRequest::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& RestrictionListRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void RestrictionListRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.device_id)
}
inline void RestrictionListRequest::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.device_id)
}
inline void RestrictionListRequest::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.device_id)
}
inline std::string* RestrictionListRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.device_id)
}

// string operator_id = 2;
inline void RestrictionListRequest::clear_operator_id() {
  operator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::operator_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.operator_id)
  return _internal_operator_id();
}
inline void RestrictionListRequest::set_operator_id(const std::string& value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.operator_id)
}
inline std::string* RestrictionListRequest::mutable_operator_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.operator_id)
  return _internal_mutable_operator_id();
}
inline const std::string& RestrictionListRequest::_internal_operator_id() const {
  return operator_id_.Get();
}
inline void RestrictionListRequest::_internal_set_operator_id(const std::string& value) {
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_operator_id(std::string&& value) {
  
  operator_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.operator_id)
}
inline void RestrictionListRequest::set_operator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.operator_id)
}
inline void RestrictionListRequest::set_operator_id(const char* value,
    size_t size) {
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.operator_id)
}
inline std::string* RestrictionListRequest::_internal_mutable_operator_id() {
  
  return operator_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_operator_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.operator_id)
  return operator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_operator_id(std::string* operator_id) {
  if (operator_id != nullptr) {
    
  } else {
    
  }
  operator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.operator_id)
}

// string reader_serial_number = 3;
inline void RestrictionListRequest::clear_reader_serial_number() {
  reader_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::reader_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.reader_serial_number)
  return _internal_reader_serial_number();
}
inline void RestrictionListRequest::set_reader_serial_number(const std::string& value) {
  _internal_set_reader_serial_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.reader_serial_number)
}
inline std::string* RestrictionListRequest::mutable_reader_serial_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.reader_serial_number)
  return _internal_mutable_reader_serial_number();
}
inline const std::string& RestrictionListRequest::_internal_reader_serial_number() const {
  return reader_serial_number_.Get();
}
inline void RestrictionListRequest::_internal_set_reader_serial_number(const std::string& value) {
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_reader_serial_number(std::string&& value) {
  
  reader_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.reader_serial_number)
}
inline void RestrictionListRequest::set_reader_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.reader_serial_number)
}
inline void RestrictionListRequest::set_reader_serial_number(const char* value,
    size_t size) {
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.reader_serial_number)
}
inline std::string* RestrictionListRequest::_internal_mutable_reader_serial_number() {
  
  return reader_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_reader_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.reader_serial_number)
  return reader_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_reader_serial_number(std::string* reader_serial_number) {
  if (reader_serial_number != nullptr) {
    
  } else {
    
  }
  reader_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reader_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.reader_serial_number)
}

// string device_serial_number = 4;
inline void RestrictionListRequest::clear_device_serial_number() {
  device_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::device_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.device_serial_number)
  return _internal_device_serial_number();
}
inline void RestrictionListRequest::set_device_serial_number(const std::string& value) {
  _internal_set_device_serial_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.device_serial_number)
}
inline std::string* RestrictionListRequest::mutable_device_serial_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.device_serial_number)
  return _internal_mutable_device_serial_number();
}
inline const std::string& RestrictionListRequest::_internal_device_serial_number() const {
  return device_serial_number_.Get();
}
inline void RestrictionListRequest::_internal_set_device_serial_number(const std::string& value) {
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_device_serial_number(std::string&& value) {
  
  device_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.device_serial_number)
}
inline void RestrictionListRequest::set_device_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.device_serial_number)
}
inline void RestrictionListRequest::set_device_serial_number(const char* value,
    size_t size) {
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.device_serial_number)
}
inline std::string* RestrictionListRequest::_internal_mutable_device_serial_number() {
  
  return device_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_device_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.device_serial_number)
  return device_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_device_serial_number(std::string* device_serial_number) {
  if (device_serial_number != nullptr) {
    
  } else {
    
  }
  device_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.device_serial_number)
}

// bytes ksn_data = 5;
inline void RestrictionListRequest::clear_ksn_data() {
  ksn_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::ksn_data() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.ksn_data)
  return _internal_ksn_data();
}
inline void RestrictionListRequest::set_ksn_data(const std::string& value) {
  _internal_set_ksn_data(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.ksn_data)
}
inline std::string* RestrictionListRequest::mutable_ksn_data() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.ksn_data)
  return _internal_mutable_ksn_data();
}
inline const std::string& RestrictionListRequest::_internal_ksn_data() const {
  return ksn_data_.Get();
}
inline void RestrictionListRequest::_internal_set_ksn_data(const std::string& value) {
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_ksn_data(std::string&& value) {
  
  ksn_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.ksn_data)
}
inline void RestrictionListRequest::set_ksn_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.ksn_data)
}
inline void RestrictionListRequest::set_ksn_data(const void* value,
    size_t size) {
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.ksn_data)
}
inline std::string* RestrictionListRequest::_internal_mutable_ksn_data() {
  
  return ksn_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_ksn_data() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.ksn_data)
  return ksn_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_ksn_data(std::string* ksn_data) {
  if (ksn_data != nullptr) {
    
  } else {
    
  }
  ksn_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ksn_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.ksn_data)
}

// int32 register_code = 6;
inline void RestrictionListRequest::clear_register_code() {
  register_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListRequest::_internal_register_code() const {
  return register_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListRequest::register_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.register_code)
  return _internal_register_code();
}
inline void RestrictionListRequest::_internal_set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  register_code_ = value;
}
inline void RestrictionListRequest::set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_register_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.register_code)
}

// string line_id = 7;
inline void RestrictionListRequest::clear_line_id() {
  line_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::line_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.line_id)
  return _internal_line_id();
}
inline void RestrictionListRequest::set_line_id(const std::string& value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.line_id)
}
inline std::string* RestrictionListRequest::mutable_line_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.line_id)
  return _internal_mutable_line_id();
}
inline const std::string& RestrictionListRequest::_internal_line_id() const {
  return line_id_.Get();
}
inline void RestrictionListRequest::_internal_set_line_id(const std::string& value) {
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_line_id(std::string&& value) {
  
  line_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.line_id)
}
inline void RestrictionListRequest::set_line_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.line_id)
}
inline void RestrictionListRequest::set_line_id(const char* value,
    size_t size) {
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.line_id)
}
inline std::string* RestrictionListRequest::_internal_mutable_line_id() {
  
  return line_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_line_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.line_id)
  return line_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_line_id(std::string* line_id) {
  if (line_id != nullptr) {
    
  } else {
    
  }
  line_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.line_id)
}

// string vehicle_id = 8;
inline void RestrictionListRequest::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestrictionListRequest::vehicle_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.vehicle_id)
  return _internal_vehicle_id();
}
inline void RestrictionListRequest::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.vehicle_id)
}
inline std::string* RestrictionListRequest::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& RestrictionListRequest::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void RestrictionListRequest::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestrictionListRequest::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.RestrictionListRequest.vehicle_id)
}
inline void RestrictionListRequest::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.RestrictionListRequest.vehicle_id)
}
inline void RestrictionListRequest::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.RestrictionListRequest.vehicle_id)
}
inline std::string* RestrictionListRequest::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestrictionListRequest::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestrictionListRequest::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.vehicle_id)
}

// .google.protobuf.Timestamp register_date = 9;
inline bool RestrictionListRequest::_internal_has_register_date() const {
  return this != internal_default_instance() && register_date_ != nullptr;
}
inline bool RestrictionListRequest::has_register_date() const {
  return _internal_has_register_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RestrictionListRequest::_internal_register_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = register_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RestrictionListRequest::register_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.register_date)
  return _internal_register_date();
}
inline void RestrictionListRequest::unsafe_arena_set_allocated_register_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  register_date_ = register_date;
  if (register_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.RestrictionListRequest.register_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListRequest::release_register_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListRequest::unsafe_arena_release_register_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListRequest.register_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListRequest::_internal_mutable_register_date() {
  
  if (register_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    register_date_ = p;
  }
  return register_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListRequest::mutable_register_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListRequest.register_date)
  return _internal_mutable_register_date();
}
inline void RestrictionListRequest::set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  if (register_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date)->GetArena();
    if (message_arena != submessage_arena) {
      register_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_date, submessage_arena);
    }
    
  } else {
    
  }
  register_date_ = register_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListRequest.register_date)
}

// int32 restriction_list_version = 10;
inline void RestrictionListRequest::clear_restriction_list_version() {
  restriction_list_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListRequest::_internal_restriction_list_version() const {
  return restriction_list_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListRequest::restriction_list_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListRequest.restriction_list_version)
  return _internal_restriction_list_version();
}
inline void RestrictionListRequest::_internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  restriction_list_version_ = value;
}
inline void RestrictionListRequest::set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restriction_list_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListRequest.restriction_list_version)
}

// -------------------------------------------------------------------

// RestrictionListResponse

// int32 response_code = 1;
inline void RestrictionListResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListResponse::_internal_response_code() const {
  return response_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListResponse::response_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListResponse.response_code)
  return _internal_response_code();
}
inline void RestrictionListResponse::_internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response_code_ = value;
}
inline void RestrictionListResponse::set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListResponse.response_code)
}

// int32 restriction_list_version = 2;
inline void RestrictionListResponse::clear_restriction_list_version() {
  restriction_list_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListResponse::_internal_restriction_list_version() const {
  return restriction_list_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictionListResponse::restriction_list_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListResponse.restriction_list_version)
  return _internal_restriction_list_version();
}
inline void RestrictionListResponse::_internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  restriction_list_version_ = value;
}
inline void RestrictionListResponse::set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restriction_list_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RestrictionListResponse.restriction_list_version)
}

// .axis.transactions.PrimaryAccountNumberBlackList pan_list = 3;
inline bool RestrictionListResponse::_internal_has_pan_list() const {
  return this != internal_default_instance() && pan_list_ != nullptr;
}
inline bool RestrictionListResponse::has_pan_list() const {
  return _internal_has_pan_list();
}
inline const ::axis::transactions::PrimaryAccountNumberBlackList& RestrictionListResponse::_internal_pan_list() const {
  const ::axis::transactions::PrimaryAccountNumberBlackList* p = pan_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::axis::transactions::PrimaryAccountNumberBlackList*>(
      &::axis::transactions::_PrimaryAccountNumberBlackList_default_instance_);
}
inline const ::axis::transactions::PrimaryAccountNumberBlackList& RestrictionListResponse::pan_list() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListResponse.pan_list)
  return _internal_pan_list();
}
inline void RestrictionListResponse::unsafe_arena_set_allocated_pan_list(
    ::axis::transactions::PrimaryAccountNumberBlackList* pan_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pan_list_);
  }
  pan_list_ = pan_list;
  if (pan_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.RestrictionListResponse.pan_list)
}
inline ::axis::transactions::PrimaryAccountNumberBlackList* RestrictionListResponse::release_pan_list() {
  
  ::axis::transactions::PrimaryAccountNumberBlackList* temp = pan_list_;
  pan_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::axis::transactions::PrimaryAccountNumberBlackList* RestrictionListResponse::unsafe_arena_release_pan_list() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListResponse.pan_list)
  
  ::axis::transactions::PrimaryAccountNumberBlackList* temp = pan_list_;
  pan_list_ = nullptr;
  return temp;
}
inline ::axis::transactions::PrimaryAccountNumberBlackList* RestrictionListResponse::_internal_mutable_pan_list() {
  
  if (pan_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::axis::transactions::PrimaryAccountNumberBlackList>(GetArena());
    pan_list_ = p;
  }
  return pan_list_;
}
inline ::axis::transactions::PrimaryAccountNumberBlackList* RestrictionListResponse::mutable_pan_list() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListResponse.pan_list)
  return _internal_mutable_pan_list();
}
inline void RestrictionListResponse::set_allocated_pan_list(::axis::transactions::PrimaryAccountNumberBlackList* pan_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pan_list_);
  }
  if (pan_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pan_list)->GetArena();
    if (message_arena != submessage_arena) {
      pan_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pan_list, submessage_arena);
    }
    
  } else {
    
  }
  pan_list_ = pan_list;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListResponse.pan_list)
}

// .axis.transactions.PrimaryAccountReferenceBlackList par_list = 4;
inline bool RestrictionListResponse::_internal_has_par_list() const {
  return this != internal_default_instance() && par_list_ != nullptr;
}
inline bool RestrictionListResponse::has_par_list() const {
  return _internal_has_par_list();
}
inline const ::axis::transactions::PrimaryAccountReferenceBlackList& RestrictionListResponse::_internal_par_list() const {
  const ::axis::transactions::PrimaryAccountReferenceBlackList* p = par_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::axis::transactions::PrimaryAccountReferenceBlackList*>(
      &::axis::transactions::_PrimaryAccountReferenceBlackList_default_instance_);
}
inline const ::axis::transactions::PrimaryAccountReferenceBlackList& RestrictionListResponse::par_list() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListResponse.par_list)
  return _internal_par_list();
}
inline void RestrictionListResponse::unsafe_arena_set_allocated_par_list(
    ::axis::transactions::PrimaryAccountReferenceBlackList* par_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(par_list_);
  }
  par_list_ = par_list;
  if (par_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.RestrictionListResponse.par_list)
}
inline ::axis::transactions::PrimaryAccountReferenceBlackList* RestrictionListResponse::release_par_list() {
  
  ::axis::transactions::PrimaryAccountReferenceBlackList* temp = par_list_;
  par_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::axis::transactions::PrimaryAccountReferenceBlackList* RestrictionListResponse::unsafe_arena_release_par_list() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListResponse.par_list)
  
  ::axis::transactions::PrimaryAccountReferenceBlackList* temp = par_list_;
  par_list_ = nullptr;
  return temp;
}
inline ::axis::transactions::PrimaryAccountReferenceBlackList* RestrictionListResponse::_internal_mutable_par_list() {
  
  if (par_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::axis::transactions::PrimaryAccountReferenceBlackList>(GetArena());
    par_list_ = p;
  }
  return par_list_;
}
inline ::axis::transactions::PrimaryAccountReferenceBlackList* RestrictionListResponse::mutable_par_list() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListResponse.par_list)
  return _internal_mutable_par_list();
}
inline void RestrictionListResponse::set_allocated_par_list(::axis::transactions::PrimaryAccountReferenceBlackList* par_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(par_list_);
  }
  if (par_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(par_list)->GetArena();
    if (message_arena != submessage_arena) {
      par_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, par_list, submessage_arena);
    }
    
  } else {
    
  }
  par_list_ = par_list;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListResponse.par_list)
}

// .google.protobuf.Timestamp register_date = 5;
inline bool RestrictionListResponse::_internal_has_register_date() const {
  return this != internal_default_instance() && register_date_ != nullptr;
}
inline bool RestrictionListResponse::has_register_date() const {
  return _internal_has_register_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RestrictionListResponse::_internal_register_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = register_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RestrictionListResponse::register_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RestrictionListResponse.register_date)
  return _internal_register_date();
}
inline void RestrictionListResponse::unsafe_arena_set_allocated_register_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  register_date_ = register_date;
  if (register_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.RestrictionListResponse.register_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListResponse::release_register_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListResponse::unsafe_arena_release_register_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.RestrictionListResponse.register_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListResponse::_internal_mutable_register_date() {
  
  if (register_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    register_date_ = p;
  }
  return register_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestrictionListResponse::mutable_register_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.RestrictionListResponse.register_date)
  return _internal_mutable_register_date();
}
inline void RestrictionListResponse::set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  if (register_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date)->GetArena();
    if (message_arena != submessage_arena) {
      register_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_date, submessage_arena);
    }
    
  } else {
    
  }
  register_date_ = register_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RestrictionListResponse.register_date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transactions
}  // namespace axis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_restriction_2dlist_2eproto
