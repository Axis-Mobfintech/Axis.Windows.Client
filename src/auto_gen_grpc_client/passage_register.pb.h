// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: passage_register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_passage_5fregister_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_passage_5fregister_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_passage_5fregister_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_passage_5fregister_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_passage_5fregister_2eproto;
namespace axis {
namespace transactions {
class RegisterPassageRequest;
struct RegisterPassageRequestDefaultTypeInternal;
extern RegisterPassageRequestDefaultTypeInternal _RegisterPassageRequest_default_instance_;
class RegisterPassageResponse;
struct RegisterPassageResponseDefaultTypeInternal;
extern RegisterPassageResponseDefaultTypeInternal _RegisterPassageResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> ::axis::transactions::RegisterPassageRequest* Arena::CreateMaybeMessage<::axis::transactions::RegisterPassageRequest>(Arena*);
template<> ::axis::transactions::RegisterPassageResponse* Arena::CreateMaybeMessage<::axis::transactions::RegisterPassageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace axis {
namespace transactions {

// ===================================================================

class RegisterPassageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.RegisterPassageRequest) */ {
 public:
  inline RegisterPassageRequest() : RegisterPassageRequest(nullptr) {}
  ~RegisterPassageRequest() override;
  explicit constexpr RegisterPassageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterPassageRequest(const RegisterPassageRequest& from);
  RegisterPassageRequest(RegisterPassageRequest&& from) noexcept
    : RegisterPassageRequest() {
    *this = ::std::move(from);
  }

  inline RegisterPassageRequest& operator=(const RegisterPassageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPassageRequest& operator=(RegisterPassageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterPassageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterPassageRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterPassageRequest*>(
               &_RegisterPassageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterPassageRequest& a, RegisterPassageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPassageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPassageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPassageRequest* New() const final {
    return new RegisterPassageRequest();
  }

  RegisterPassageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPassageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterPassageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterPassageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPassageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.RegisterPassageRequest";
  }
  protected:
  explicit RegisterPassageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kOperatorIdFieldNumber = 2,
    kReaderSerialNumberFieldNumber = 3,
    kDeviceSerialNumberFieldNumber = 4,
    kDeviceSuidFieldNumber = 8,
    kPanHashFieldNumber = 9,
    kParCardFieldNumber = 10,
    kTransactionDataFieldNumber = 11,
    kLineIdFieldNumber = 17,
    kVehicleIdFieldNumber = 18,
    kGeolocationFieldNumber = 19,
    kPassageDateFieldNumber = 6,
    kTransactionDateFieldNumber = 7,
    kRegisterCodeFieldNumber = 5,
    kEmvParametersVersionFieldNumber = 12,
    kBinParametersVersionFieldNumber = 13,
    kRestrictionListVersionFieldNumber = 14,
    kAcceptanceListVersionFieldNumber = 15,
    kTransactionValueFieldNumber = 16,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string operator_id = 2;
  void clear_operator_id();
  const std::string& operator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_operator_id();
  void set_allocated_operator_id(std::string* operator_id);
  private:
  const std::string& _internal_operator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_id(const std::string& value);
  std::string* _internal_mutable_operator_id();
  public:

  // string reader_serial_number = 3;
  void clear_reader_serial_number();
  const std::string& reader_serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reader_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reader_serial_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_reader_serial_number();
  void set_allocated_reader_serial_number(std::string* reader_serial_number);
  private:
  const std::string& _internal_reader_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reader_serial_number(const std::string& value);
  std::string* _internal_mutable_reader_serial_number();
  public:

  // string device_serial_number = 4;
  void clear_device_serial_number();
  const std::string& device_serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_serial_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_serial_number();
  void set_allocated_device_serial_number(std::string* device_serial_number);
  private:
  const std::string& _internal_device_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_serial_number(const std::string& value);
  std::string* _internal_mutable_device_serial_number();
  public:

  // string device_suid = 8;
  void clear_device_suid();
  const std::string& device_suid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_suid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_suid();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_suid();
  void set_allocated_device_suid(std::string* device_suid);
  private:
  const std::string& _internal_device_suid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_suid(const std::string& value);
  std::string* _internal_mutable_device_suid();
  public:

  // bytes pan_hash = 9;
  void clear_pan_hash();
  const std::string& pan_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pan_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pan_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_pan_hash();
  void set_allocated_pan_hash(std::string* pan_hash);
  private:
  const std::string& _internal_pan_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pan_hash(const std::string& value);
  std::string* _internal_mutable_pan_hash();
  public:

  // string par_card = 10;
  void clear_par_card();
  const std::string& par_card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_par_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_par_card();
  PROTOBUF_MUST_USE_RESULT std::string* release_par_card();
  void set_allocated_par_card(std::string* par_card);
  private:
  const std::string& _internal_par_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_par_card(const std::string& value);
  std::string* _internal_mutable_par_card();
  public:

  // bytes transaction_data = 11;
  void clear_transaction_data();
  const std::string& transaction_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_transaction_data();
  void set_allocated_transaction_data(std::string* transaction_data);
  private:
  const std::string& _internal_transaction_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_data(const std::string& value);
  std::string* _internal_mutable_transaction_data();
  public:

  // string line_id = 17;
  void clear_line_id();
  const std::string& line_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_line_id();
  void set_allocated_line_id(std::string* line_id);
  private:
  const std::string& _internal_line_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line_id(const std::string& value);
  std::string* _internal_mutable_line_id();
  public:

  // string vehicle_id = 18;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vehicle_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vehicle_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // string geolocation = 19;
  void clear_geolocation();
  const std::string& geolocation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_geolocation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_geolocation();
  PROTOBUF_MUST_USE_RESULT std::string* release_geolocation();
  void set_allocated_geolocation(std::string* geolocation);
  private:
  const std::string& _internal_geolocation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geolocation(const std::string& value);
  std::string* _internal_mutable_geolocation();
  public:

  // .google.protobuf.Timestamp passage_date = 6;
  bool has_passage_date() const;
  private:
  bool _internal_has_passage_date() const;
  public:
  void clear_passage_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& passage_date() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_passage_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_passage_date();
  void set_allocated_passage_date(::PROTOBUF_NAMESPACE_ID::Timestamp* passage_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_passage_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_passage_date();
  public:
  void unsafe_arena_set_allocated_passage_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* passage_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_passage_date();

  // .google.protobuf.Timestamp transaction_date = 7;
  bool has_transaction_date() const;
  private:
  bool _internal_has_transaction_date() const;
  public:
  void clear_transaction_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_date() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_transaction_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_transaction_date();
  void set_allocated_transaction_date(::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_transaction_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_transaction_date();
  public:
  void unsafe_arena_set_allocated_transaction_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_transaction_date();

  // int32 register_code = 5;
  void clear_register_code();
  ::PROTOBUF_NAMESPACE_ID::int32 register_code() const;
  void set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_register_code() const;
  void _internal_set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 emv_parameters_version = 12;
  void clear_emv_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version() const;
  void set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_emv_parameters_version() const;
  void _internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bin_parameters_version = 13;
  void clear_bin_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version() const;
  void set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bin_parameters_version() const;
  void _internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 restriction_list_version = 14;
  void clear_restriction_list_version();
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version() const;
  void set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restriction_list_version() const;
  void _internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 acceptance_list_version = 15;
  void clear_acceptance_list_version();
  ::PROTOBUF_NAMESPACE_ID::int32 acceptance_list_version() const;
  void set_acceptance_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acceptance_list_version() const;
  void _internal_set_acceptance_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transaction_value = 16;
  void clear_transaction_value();
  ::PROTOBUF_NAMESPACE_ID::int32 transaction_value() const;
  void set_transaction_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transaction_value() const;
  void _internal_set_transaction_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.RegisterPassageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reader_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_suid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pan_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr par_card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geolocation_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* passage_date_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 register_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 acceptance_list_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 transaction_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passage_5fregister_2eproto;
};
// -------------------------------------------------------------------

class RegisterPassageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.RegisterPassageResponse) */ {
 public:
  inline RegisterPassageResponse() : RegisterPassageResponse(nullptr) {}
  ~RegisterPassageResponse() override;
  explicit constexpr RegisterPassageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterPassageResponse(const RegisterPassageResponse& from);
  RegisterPassageResponse(RegisterPassageResponse&& from) noexcept
    : RegisterPassageResponse() {
    *this = ::std::move(from);
  }

  inline RegisterPassageResponse& operator=(const RegisterPassageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPassageResponse& operator=(RegisterPassageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterPassageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterPassageResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterPassageResponse*>(
               &_RegisterPassageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterPassageResponse& a, RegisterPassageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPassageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPassageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPassageResponse* New() const final {
    return new RegisterPassageResponse();
  }

  RegisterPassageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPassageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterPassageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterPassageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPassageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.RegisterPassageResponse";
  }
  protected:
  explicit RegisterPassageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGatewayUidFieldNumber = 2,
    kDeviceSuidFieldNumber = 6,
    kResponseCodeFieldNumber = 1,
    kEmvParametersVersionFieldNumber = 3,
    kBinParametersVersionFieldNumber = 4,
    kRestrictionListVersionFieldNumber = 5,
  };
  // string gateway_uid = 2;
  void clear_gateway_uid();
  const std::string& gateway_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gateway_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gateway_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_gateway_uid();
  void set_allocated_gateway_uid(std::string* gateway_uid);
  private:
  const std::string& _internal_gateway_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway_uid(const std::string& value);
  std::string* _internal_mutable_gateway_uid();
  public:

  // string device_suid = 6;
  void clear_device_suid();
  const std::string& device_suid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_suid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_suid();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_suid();
  void set_allocated_device_suid(std::string* device_suid);
  private:
  const std::string& _internal_device_suid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_suid(const std::string& value);
  std::string* _internal_mutable_device_suid();
  public:

  // int32 response_code = 1;
  void clear_response_code();
  ::PROTOBUF_NAMESPACE_ID::int32 response_code() const;
  void set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_code() const;
  void _internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 emv_parameters_version = 3;
  void clear_emv_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version() const;
  void set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_emv_parameters_version() const;
  void _internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bin_parameters_version = 4;
  void clear_bin_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version() const;
  void set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bin_parameters_version() const;
  void _internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 restriction_list_version = 5;
  void clear_restriction_list_version();
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version() const;
  void set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restriction_list_version() const;
  void _internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.RegisterPassageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_suid_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 restriction_list_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passage_5fregister_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterPassageRequest

// string device_id = 1;
inline void RegisterPassageRequest::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::device_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.device_id)
}
inline std::string* RegisterPassageRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.device_id)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void RegisterPassageRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.device_id)
}

// string operator_id = 2;
inline void RegisterPassageRequest::clear_operator_id() {
  operator_id_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::operator_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.operator_id)
  return _internal_operator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_operator_id(ArgT0&& arg0, ArgT... args) {
 
 operator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.operator_id)
}
inline std::string* RegisterPassageRequest::mutable_operator_id() {
  std::string* _s = _internal_mutable_operator_id();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.operator_id)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_operator_id() const {
  return operator_id_.Get();
}
inline void RegisterPassageRequest::_internal_set_operator_id(const std::string& value) {
  
  operator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_operator_id() {
  
  return operator_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_operator_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.operator_id)
  return operator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_operator_id(std::string* operator_id) {
  if (operator_id != nullptr) {
    
  } else {
    
  }
  operator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.operator_id)
}

// string reader_serial_number = 3;
inline void RegisterPassageRequest::clear_reader_serial_number() {
  reader_serial_number_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::reader_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.reader_serial_number)
  return _internal_reader_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_reader_serial_number(ArgT0&& arg0, ArgT... args) {
 
 reader_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.reader_serial_number)
}
inline std::string* RegisterPassageRequest::mutable_reader_serial_number() {
  std::string* _s = _internal_mutable_reader_serial_number();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.reader_serial_number)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_reader_serial_number() const {
  return reader_serial_number_.Get();
}
inline void RegisterPassageRequest::_internal_set_reader_serial_number(const std::string& value) {
  
  reader_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_reader_serial_number() {
  
  return reader_serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_reader_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.reader_serial_number)
  return reader_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_reader_serial_number(std::string* reader_serial_number) {
  if (reader_serial_number != nullptr) {
    
  } else {
    
  }
  reader_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reader_serial_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.reader_serial_number)
}

// string device_serial_number = 4;
inline void RegisterPassageRequest::clear_device_serial_number() {
  device_serial_number_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::device_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.device_serial_number)
  return _internal_device_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_device_serial_number(ArgT0&& arg0, ArgT... args) {
 
 device_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.device_serial_number)
}
inline std::string* RegisterPassageRequest::mutable_device_serial_number() {
  std::string* _s = _internal_mutable_device_serial_number();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.device_serial_number)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_device_serial_number() const {
  return device_serial_number_.Get();
}
inline void RegisterPassageRequest::_internal_set_device_serial_number(const std::string& value) {
  
  device_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_device_serial_number() {
  
  return device_serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_device_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.device_serial_number)
  return device_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_device_serial_number(std::string* device_serial_number) {
  if (device_serial_number != nullptr) {
    
  } else {
    
  }
  device_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_serial_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.device_serial_number)
}

// int32 register_code = 5;
inline void RegisterPassageRequest::clear_register_code() {
  register_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::_internal_register_code() const {
  return register_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::register_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.register_code)
  return _internal_register_code();
}
inline void RegisterPassageRequest::_internal_set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  register_code_ = value;
}
inline void RegisterPassageRequest::set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_register_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.register_code)
}

// .google.protobuf.Timestamp passage_date = 6;
inline bool RegisterPassageRequest::_internal_has_passage_date() const {
  return this != internal_default_instance() && passage_date_ != nullptr;
}
inline bool RegisterPassageRequest::has_passage_date() const {
  return _internal_has_passage_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RegisterPassageRequest::_internal_passage_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = passage_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RegisterPassageRequest::passage_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.passage_date)
  return _internal_passage_date();
}
inline void RegisterPassageRequest::unsafe_arena_set_allocated_passage_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* passage_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passage_date_);
  }
  passage_date_ = passage_date;
  if (passage_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.RegisterPassageRequest.passage_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::release_passage_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = passage_date_;
  passage_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::unsafe_arena_release_passage_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.passage_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = passage_date_;
  passage_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::_internal_mutable_passage_date() {
  
  if (passage_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    passage_date_ = p;
  }
  return passage_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::mutable_passage_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_passage_date();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.passage_date)
  return _msg;
}
inline void RegisterPassageRequest::set_allocated_passage_date(::PROTOBUF_NAMESPACE_ID::Timestamp* passage_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(passage_date_);
  }
  if (passage_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passage_date));
    if (message_arena != submessage_arena) {
      passage_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passage_date, submessage_arena);
    }
    
  } else {
    
  }
  passage_date_ = passage_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.passage_date)
}

// .google.protobuf.Timestamp transaction_date = 7;
inline bool RegisterPassageRequest::_internal_has_transaction_date() const {
  return this != internal_default_instance() && transaction_date_ != nullptr;
}
inline bool RegisterPassageRequest::has_transaction_date() const {
  return _internal_has_transaction_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RegisterPassageRequest::_internal_transaction_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = transaction_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RegisterPassageRequest::transaction_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.transaction_date)
  return _internal_transaction_date();
}
inline void RegisterPassageRequest::unsafe_arena_set_allocated_transaction_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_date_);
  }
  transaction_date_ = transaction_date;
  if (transaction_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.RegisterPassageRequest.transaction_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::release_transaction_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = transaction_date_;
  transaction_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::unsafe_arena_release_transaction_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.transaction_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = transaction_date_;
  transaction_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::_internal_mutable_transaction_date() {
  
  if (transaction_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    transaction_date_ = p;
  }
  return transaction_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RegisterPassageRequest::mutable_transaction_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_transaction_date();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.transaction_date)
  return _msg;
}
inline void RegisterPassageRequest::set_allocated_transaction_date(::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_date_);
  }
  if (transaction_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_date));
    if (message_arena != submessage_arena) {
      transaction_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_date, submessage_arena);
    }
    
  } else {
    
  }
  transaction_date_ = transaction_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.transaction_date)
}

// string device_suid = 8;
inline void RegisterPassageRequest::clear_device_suid() {
  device_suid_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::device_suid() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.device_suid)
  return _internal_device_suid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_device_suid(ArgT0&& arg0, ArgT... args) {
 
 device_suid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.device_suid)
}
inline std::string* RegisterPassageRequest::mutable_device_suid() {
  std::string* _s = _internal_mutable_device_suid();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.device_suid)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_device_suid() const {
  return device_suid_.Get();
}
inline void RegisterPassageRequest::_internal_set_device_suid(const std::string& value) {
  
  device_suid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_device_suid() {
  
  return device_suid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_device_suid() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.device_suid)
  return device_suid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_device_suid(std::string* device_suid) {
  if (device_suid != nullptr) {
    
  } else {
    
  }
  device_suid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_suid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.device_suid)
}

// bytes pan_hash = 9;
inline void RegisterPassageRequest::clear_pan_hash() {
  pan_hash_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::pan_hash() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.pan_hash)
  return _internal_pan_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_pan_hash(ArgT0&& arg0, ArgT... args) {
 
 pan_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.pan_hash)
}
inline std::string* RegisterPassageRequest::mutable_pan_hash() {
  std::string* _s = _internal_mutable_pan_hash();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.pan_hash)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_pan_hash() const {
  return pan_hash_.Get();
}
inline void RegisterPassageRequest::_internal_set_pan_hash(const std::string& value) {
  
  pan_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_pan_hash() {
  
  return pan_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_pan_hash() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.pan_hash)
  return pan_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_pan_hash(std::string* pan_hash) {
  if (pan_hash != nullptr) {
    
  } else {
    
  }
  pan_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pan_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.pan_hash)
}

// string par_card = 10;
inline void RegisterPassageRequest::clear_par_card() {
  par_card_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::par_card() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.par_card)
  return _internal_par_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_par_card(ArgT0&& arg0, ArgT... args) {
 
 par_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.par_card)
}
inline std::string* RegisterPassageRequest::mutable_par_card() {
  std::string* _s = _internal_mutable_par_card();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.par_card)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_par_card() const {
  return par_card_.Get();
}
inline void RegisterPassageRequest::_internal_set_par_card(const std::string& value) {
  
  par_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_par_card() {
  
  return par_card_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_par_card() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.par_card)
  return par_card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_par_card(std::string* par_card) {
  if (par_card != nullptr) {
    
  } else {
    
  }
  par_card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), par_card,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.par_card)
}

// bytes transaction_data = 11;
inline void RegisterPassageRequest::clear_transaction_data() {
  transaction_data_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::transaction_data() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.transaction_data)
  return _internal_transaction_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_transaction_data(ArgT0&& arg0, ArgT... args) {
 
 transaction_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.transaction_data)
}
inline std::string* RegisterPassageRequest::mutable_transaction_data() {
  std::string* _s = _internal_mutable_transaction_data();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.transaction_data)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_transaction_data() const {
  return transaction_data_.Get();
}
inline void RegisterPassageRequest::_internal_set_transaction_data(const std::string& value) {
  
  transaction_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_transaction_data() {
  
  return transaction_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_transaction_data() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.transaction_data)
  return transaction_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_transaction_data(std::string* transaction_data) {
  if (transaction_data != nullptr) {
    
  } else {
    
  }
  transaction_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.transaction_data)
}

// int32 emv_parameters_version = 12;
inline void RegisterPassageRequest::clear_emv_parameters_version() {
  emv_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::_internal_emv_parameters_version() const {
  return emv_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::emv_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.emv_parameters_version)
  return _internal_emv_parameters_version();
}
inline void RegisterPassageRequest::_internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  emv_parameters_version_ = value;
}
inline void RegisterPassageRequest::set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_emv_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.emv_parameters_version)
}

// int32 bin_parameters_version = 13;
inline void RegisterPassageRequest::clear_bin_parameters_version() {
  bin_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::_internal_bin_parameters_version() const {
  return bin_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::bin_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.bin_parameters_version)
  return _internal_bin_parameters_version();
}
inline void RegisterPassageRequest::_internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bin_parameters_version_ = value;
}
inline void RegisterPassageRequest::set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bin_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.bin_parameters_version)
}

// int32 restriction_list_version = 14;
inline void RegisterPassageRequest::clear_restriction_list_version() {
  restriction_list_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::_internal_restriction_list_version() const {
  return restriction_list_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::restriction_list_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.restriction_list_version)
  return _internal_restriction_list_version();
}
inline void RegisterPassageRequest::_internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  restriction_list_version_ = value;
}
inline void RegisterPassageRequest::set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restriction_list_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.restriction_list_version)
}

// int32 acceptance_list_version = 15;
inline void RegisterPassageRequest::clear_acceptance_list_version() {
  acceptance_list_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::_internal_acceptance_list_version() const {
  return acceptance_list_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::acceptance_list_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.acceptance_list_version)
  return _internal_acceptance_list_version();
}
inline void RegisterPassageRequest::_internal_set_acceptance_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  acceptance_list_version_ = value;
}
inline void RegisterPassageRequest::set_acceptance_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acceptance_list_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.acceptance_list_version)
}

// int32 transaction_value = 16;
inline void RegisterPassageRequest::clear_transaction_value() {
  transaction_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::_internal_transaction_value() const {
  return transaction_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageRequest::transaction_value() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.transaction_value)
  return _internal_transaction_value();
}
inline void RegisterPassageRequest::_internal_set_transaction_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transaction_value_ = value;
}
inline void RegisterPassageRequest::set_transaction_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transaction_value(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.transaction_value)
}

// string line_id = 17;
inline void RegisterPassageRequest::clear_line_id() {
  line_id_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::line_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.line_id)
  return _internal_line_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_line_id(ArgT0&& arg0, ArgT... args) {
 
 line_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.line_id)
}
inline std::string* RegisterPassageRequest::mutable_line_id() {
  std::string* _s = _internal_mutable_line_id();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.line_id)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_line_id() const {
  return line_id_.Get();
}
inline void RegisterPassageRequest::_internal_set_line_id(const std::string& value) {
  
  line_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_line_id() {
  
  return line_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_line_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.line_id)
  return line_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_line_id(std::string* line_id) {
  if (line_id != nullptr) {
    
  } else {
    
  }
  line_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.line_id)
}

// string vehicle_id = 18;
inline void RegisterPassageRequest::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::vehicle_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.vehicle_id)
  return _internal_vehicle_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_vehicle_id(ArgT0&& arg0, ArgT... args) {
 
 vehicle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.vehicle_id)
}
inline std::string* RegisterPassageRequest::mutable_vehicle_id() {
  std::string* _s = _internal_mutable_vehicle_id();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.vehicle_id)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void RegisterPassageRequest::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.vehicle_id)
}

// string geolocation = 19;
inline void RegisterPassageRequest::clear_geolocation() {
  geolocation_.ClearToEmpty();
}
inline const std::string& RegisterPassageRequest::geolocation() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageRequest.geolocation)
  return _internal_geolocation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageRequest::set_geolocation(ArgT0&& arg0, ArgT... args) {
 
 geolocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageRequest.geolocation)
}
inline std::string* RegisterPassageRequest::mutable_geolocation() {
  std::string* _s = _internal_mutable_geolocation();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageRequest.geolocation)
  return _s;
}
inline const std::string& RegisterPassageRequest::_internal_geolocation() const {
  return geolocation_.Get();
}
inline void RegisterPassageRequest::_internal_set_geolocation(const std::string& value) {
  
  geolocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::_internal_mutable_geolocation() {
  
  return geolocation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageRequest::release_geolocation() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageRequest.geolocation)
  return geolocation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageRequest::set_allocated_geolocation(std::string* geolocation) {
  if (geolocation != nullptr) {
    
  } else {
    
  }
  geolocation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geolocation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageRequest.geolocation)
}

// -------------------------------------------------------------------

// RegisterPassageResponse

// int32 response_code = 1;
inline void RegisterPassageResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::_internal_response_code() const {
  return response_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::response_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageResponse.response_code)
  return _internal_response_code();
}
inline void RegisterPassageResponse::_internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response_code_ = value;
}
inline void RegisterPassageResponse::set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageResponse.response_code)
}

// string gateway_uid = 2;
inline void RegisterPassageResponse::clear_gateway_uid() {
  gateway_uid_.ClearToEmpty();
}
inline const std::string& RegisterPassageResponse::gateway_uid() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageResponse.gateway_uid)
  return _internal_gateway_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageResponse::set_gateway_uid(ArgT0&& arg0, ArgT... args) {
 
 gateway_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageResponse.gateway_uid)
}
inline std::string* RegisterPassageResponse::mutable_gateway_uid() {
  std::string* _s = _internal_mutable_gateway_uid();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageResponse.gateway_uid)
  return _s;
}
inline const std::string& RegisterPassageResponse::_internal_gateway_uid() const {
  return gateway_uid_.Get();
}
inline void RegisterPassageResponse::_internal_set_gateway_uid(const std::string& value) {
  
  gateway_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageResponse::_internal_mutable_gateway_uid() {
  
  return gateway_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageResponse::release_gateway_uid() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageResponse.gateway_uid)
  return gateway_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageResponse::set_allocated_gateway_uid(std::string* gateway_uid) {
  if (gateway_uid != nullptr) {
    
  } else {
    
  }
  gateway_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageResponse.gateway_uid)
}

// int32 emv_parameters_version = 3;
inline void RegisterPassageResponse::clear_emv_parameters_version() {
  emv_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::_internal_emv_parameters_version() const {
  return emv_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::emv_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageResponse.emv_parameters_version)
  return _internal_emv_parameters_version();
}
inline void RegisterPassageResponse::_internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  emv_parameters_version_ = value;
}
inline void RegisterPassageResponse::set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_emv_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageResponse.emv_parameters_version)
}

// int32 bin_parameters_version = 4;
inline void RegisterPassageResponse::clear_bin_parameters_version() {
  bin_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::_internal_bin_parameters_version() const {
  return bin_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::bin_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageResponse.bin_parameters_version)
  return _internal_bin_parameters_version();
}
inline void RegisterPassageResponse::_internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bin_parameters_version_ = value;
}
inline void RegisterPassageResponse::set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bin_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageResponse.bin_parameters_version)
}

// int32 restriction_list_version = 5;
inline void RegisterPassageResponse::clear_restriction_list_version() {
  restriction_list_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::_internal_restriction_list_version() const {
  return restriction_list_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterPassageResponse::restriction_list_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageResponse.restriction_list_version)
  return _internal_restriction_list_version();
}
inline void RegisterPassageResponse::_internal_set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  restriction_list_version_ = value;
}
inline void RegisterPassageResponse::set_restriction_list_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restriction_list_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageResponse.restriction_list_version)
}

// string device_suid = 6;
inline void RegisterPassageResponse::clear_device_suid() {
  device_suid_.ClearToEmpty();
}
inline const std::string& RegisterPassageResponse::device_suid() const {
  // @@protoc_insertion_point(field_get:axis.transactions.RegisterPassageResponse.device_suid)
  return _internal_device_suid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterPassageResponse::set_device_suid(ArgT0&& arg0, ArgT... args) {
 
 device_suid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:axis.transactions.RegisterPassageResponse.device_suid)
}
inline std::string* RegisterPassageResponse::mutable_device_suid() {
  std::string* _s = _internal_mutable_device_suid();
  // @@protoc_insertion_point(field_mutable:axis.transactions.RegisterPassageResponse.device_suid)
  return _s;
}
inline const std::string& RegisterPassageResponse::_internal_device_suid() const {
  return device_suid_.Get();
}
inline void RegisterPassageResponse::_internal_set_device_suid(const std::string& value) {
  
  device_suid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterPassageResponse::_internal_mutable_device_suid() {
  
  return device_suid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterPassageResponse::release_device_suid() {
  // @@protoc_insertion_point(field_release:axis.transactions.RegisterPassageResponse.device_suid)
  return device_suid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterPassageResponse::set_allocated_device_suid(std::string* device_suid) {
  if (device_suid != nullptr) {
    
  } else {
    
  }
  device_suid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_suid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.RegisterPassageResponse.device_suid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transactions
}  // namespace axis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_passage_5fregister_2eproto
