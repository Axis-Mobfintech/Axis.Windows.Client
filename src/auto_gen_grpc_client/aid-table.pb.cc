// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos/aid-table.proto

#include "Protos/aid-table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Protos_2faid_2dtable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationData_Protos_2faid_2dtable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Protos_2faid_2dtable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralFlags_Protos_2faid_2dtable_2eproto;
namespace axis {
namespace transactions {
class ApplicationIdentifierTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationIdentifierTable> _instance;
} _ApplicationIdentifierTable_default_instance_;
class ApplicationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationData> _instance;
} _ApplicationData_default_instance_;
class GeneralFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralFlags> _instance;
} _GeneralFlags_default_instance_;
}  // namespace transactions
}  // namespace axis
static void InitDefaultsscc_info_ApplicationData_Protos_2faid_2dtable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_ApplicationData_default_instance_;
    new (ptr) ::axis::transactions::ApplicationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::ApplicationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationData_Protos_2faid_2dtable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplicationData_Protos_2faid_2dtable_2eproto}, {
      &scc_info_GeneralFlags_Protos_2faid_2dtable_2eproto.base,}};

static void InitDefaultsscc_info_ApplicationIdentifierTable_Protos_2faid_2dtable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_ApplicationIdentifierTable_default_instance_;
    new (ptr) ::axis::transactions::ApplicationIdentifierTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::ApplicationIdentifierTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationIdentifierTable_Protos_2faid_2dtable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplicationIdentifierTable_Protos_2faid_2dtable_2eproto}, {
      &scc_info_ApplicationData_Protos_2faid_2dtable_2eproto.base,}};

static void InitDefaultsscc_info_GeneralFlags_Protos_2faid_2dtable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_GeneralFlags_default_instance_;
    new (ptr) ::axis::transactions::GeneralFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::GeneralFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralFlags_Protos_2faid_2dtable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeneralFlags_Protos_2faid_2dtable_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protos_2faid_2dtable_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Protos_2faid_2dtable_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protos_2faid_2dtable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protos_2faid_2dtable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationIdentifierTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationIdentifierTable, message_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationIdentifierTable, index_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationIdentifierTable, application_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, application_identifier_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, general_flags_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, authorized_amount_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, country_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, currency_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, currency_exponent_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, terminal_type_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, merchant_category_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, terminal_transaction_qualifiers_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, contactless_floor_limit_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, reader_floor_limit_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, limit_no_on_device_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, limit_on_device_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, cvm_required_limit_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, terminal_capabilities_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, addictional_terminal_capabilities_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, application_version_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, card_data_input_capability_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, cvm_capability_required_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, cvm_capability_not_required_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, security_capability_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, terminal_action_code_default_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, terminal_action_code_denial_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, terminal_action_code_online_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, risk_management_data_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ApplicationData, category_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::GeneralFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::GeneralFlags, flag_type_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::GeneralFlags, validate_card_date_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::axis::transactions::ApplicationIdentifierTable)},
  { 8, -1, sizeof(::axis::transactions::ApplicationData)},
  { 39, -1, sizeof(::axis::transactions::GeneralFlags)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_ApplicationIdentifierTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_ApplicationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_GeneralFlags_default_instance_),
};

const char descriptor_table_protodef_Protos_2faid_2dtable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026Protos/aid-table.proto\022\021axis.transacti"
  "ons\"}\n\032ApplicationIdentifierTable\022\022\n\nmes"
  "sage_id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022<\n\020applicat"
  "ion_data\030\003 \001(\0132\".axis.transactions.Appli"
  "cationData\"\324\006\n\017ApplicationData\022\036\n\026applic"
  "ation_identifier\030\001 \001(\014\0226\n\rgeneral_flags\030"
  "\002 \001(\0132\037.axis.transactions.GeneralFlags\022\031"
  "\n\021authorized_amount\030\003 \001(\004\022\024\n\014country_cod"
  "e\030\004 \001(\r\022\025\n\rcurrency_code\030\005 \001(\r\022\031\n\021curren"
  "cy_exponent\030\006 \001(\r\022\025\n\rterminal_type\030\007 \001(\r"
  "\022\036\n\026merchant_category_code\030\010 \001(\r\022\'\n\037term"
  "inal_transaction_qualifiers\030\t \001(\014\022\037\n\027con"
  "tactless_floor_limit\030\n \001(\004\022\032\n\022reader_flo"
  "or_limit\030\013 \001(\014\022\032\n\022limit_no_on_device\030\014 \001"
  "(\004\022\027\n\017limit_on_device\030\r \001(\004\022\032\n\022cvm_requi"
  "red_limit\030\016 \001(\004\022\035\n\025terminal_capabilities"
  "\030\017 \001(\014\022)\n!addictional_terminal_capabilit"
  "ies\030\020 \001(\014\022\"\n\032application_version_number\030"
  "\021 \001(\014\022\"\n\032card_data_input_capability\030\022 \001("
  "\014\022\037\n\027cvm_capability_required\030\023 \001(\014\022#\n\033cv"
  "m_capability_not_required\030\024 \001(\014\022\033\n\023secur"
  "ity_capability\030\025 \001(\014\022$\n\034terminal_action_"
  "code_default\030\026 \001(\014\022#\n\033terminal_action_co"
  "de_denial\030\027 \001(\014\022#\n\033terminal_action_code_"
  "online\030\030 \001(\014\022\034\n\024risk_management_data\030\031 \001"
  "(\014\022\025\n\rcategory_code\030\032 \001(\014\"Z\n\014GeneralFlag"
  "s\022.\n\tflag_type\030\001 \001(\0162\033.axis.transactions"
  ".FlagType\022\032\n\022validate_card_date\030\002 \001(\010*m\n"
  "\010FlagType\022\r\n\tUNDEFINED\020\000\022\026\n\022MASTERCARD_P"
  "AYPASS\020\002\022\020\n\014VISA_PAYWAVE\020\003\022\010\n\004AMEX\020\004\022\020\n\014"
  "JCB_QUICKPAY\020\005\022\014\n\010DISCOVER\020\006BQ\n#com.axis"
  "mobfintech.gpb.transactionsZ\022axistransac"
  "tionspb\252\002\025Axis.GPB.Transactionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protos_2faid_2dtable_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Protos_2faid_2dtable_2eproto_sccs[3] = {
  &scc_info_ApplicationData_Protos_2faid_2dtable_2eproto.base,
  &scc_info_ApplicationIdentifierTable_Protos_2faid_2dtable_2eproto.base,
  &scc_info_GeneralFlags_Protos_2faid_2dtable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protos_2faid_2dtable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protos_2faid_2dtable_2eproto = {
  false, false, descriptor_table_protodef_Protos_2faid_2dtable_2eproto, "Protos/aid-table.proto", 1319,
  &descriptor_table_Protos_2faid_2dtable_2eproto_once, descriptor_table_Protos_2faid_2dtable_2eproto_sccs, descriptor_table_Protos_2faid_2dtable_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Protos_2faid_2dtable_2eproto::offsets,
  file_level_metadata_Protos_2faid_2dtable_2eproto, 3, file_level_enum_descriptors_Protos_2faid_2dtable_2eproto, file_level_service_descriptors_Protos_2faid_2dtable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Protos_2faid_2dtable_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Protos_2faid_2dtable_2eproto)), true);
namespace axis {
namespace transactions {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlagType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protos_2faid_2dtable_2eproto);
  return file_level_enum_descriptors_Protos_2faid_2dtable_2eproto[0];
}
bool FlagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ApplicationIdentifierTable::InitAsDefaultInstance() {
  ::axis::transactions::_ApplicationIdentifierTable_default_instance_._instance.get_mutable()->application_data_ = const_cast< ::axis::transactions::ApplicationData*>(
      ::axis::transactions::ApplicationData::internal_default_instance());
}
class ApplicationIdentifierTable::_Internal {
 public:
  static const ::axis::transactions::ApplicationData& application_data(const ApplicationIdentifierTable* msg);
};

const ::axis::transactions::ApplicationData&
ApplicationIdentifierTable::_Internal::application_data(const ApplicationIdentifierTable* msg) {
  return *msg->application_data_;
}
ApplicationIdentifierTable::ApplicationIdentifierTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.ApplicationIdentifierTable)
}
ApplicationIdentifierTable::ApplicationIdentifierTable(const ApplicationIdentifierTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_application_data()) {
    application_data_ = new ::axis::transactions::ApplicationData(*from.application_data_);
  } else {
    application_data_ = nullptr;
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.ApplicationIdentifierTable)
}

void ApplicationIdentifierTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplicationIdentifierTable_Protos_2faid_2dtable_2eproto.base);
  ::memset(&application_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&application_data_)) + sizeof(index_));
}

ApplicationIdentifierTable::~ApplicationIdentifierTable() {
  // @@protoc_insertion_point(destructor:axis.transactions.ApplicationIdentifierTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationIdentifierTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete application_data_;
}

void ApplicationIdentifierTable::ArenaDtor(void* object) {
  ApplicationIdentifierTable* _this = reinterpret_cast< ApplicationIdentifierTable* >(object);
  (void)_this;
}
void ApplicationIdentifierTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationIdentifierTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationIdentifierTable& ApplicationIdentifierTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationIdentifierTable_Protos_2faid_2dtable_2eproto.base);
  return *internal_default_instance();
}


void ApplicationIdentifierTable::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.ApplicationIdentifierTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && application_data_ != nullptr) {
    delete application_data_;
  }
  application_data_ = nullptr;
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationIdentifierTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .axis.transactions.ApplicationData application_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_application_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationIdentifierTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.ApplicationIdentifierTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_message_id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // .axis.transactions.ApplicationData application_data = 3;
  if (this->has_application_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::application_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.ApplicationIdentifierTable)
  return target;
}

size_t ApplicationIdentifierTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.ApplicationIdentifierTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .axis.transactions.ApplicationData application_data = 3;
  if (this->has_application_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *application_data_);
  }

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationIdentifierTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.ApplicationIdentifierTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationIdentifierTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationIdentifierTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.ApplicationIdentifierTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.ApplicationIdentifierTable)
    MergeFrom(*source);
  }
}

void ApplicationIdentifierTable::MergeFrom(const ApplicationIdentifierTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.ApplicationIdentifierTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_application_data()) {
    _internal_mutable_application_data()->::axis::transactions::ApplicationData::MergeFrom(from._internal_application_data());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ApplicationIdentifierTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.ApplicationIdentifierTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationIdentifierTable::CopyFrom(const ApplicationIdentifierTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.ApplicationIdentifierTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationIdentifierTable::IsInitialized() const {
  return true;
}

void ApplicationIdentifierTable::InternalSwap(ApplicationIdentifierTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplicationIdentifierTable, index_)
      + sizeof(ApplicationIdentifierTable::index_)
      - PROTOBUF_FIELD_OFFSET(ApplicationIdentifierTable, application_data_)>(
          reinterpret_cast<char*>(&application_data_),
          reinterpret_cast<char*>(&other->application_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationIdentifierTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplicationData::InitAsDefaultInstance() {
  ::axis::transactions::_ApplicationData_default_instance_._instance.get_mutable()->general_flags_ = const_cast< ::axis::transactions::GeneralFlags*>(
      ::axis::transactions::GeneralFlags::internal_default_instance());
}
class ApplicationData::_Internal {
 public:
  static const ::axis::transactions::GeneralFlags& general_flags(const ApplicationData* msg);
};

const ::axis::transactions::GeneralFlags&
ApplicationData::_Internal::general_flags(const ApplicationData* msg) {
  return *msg->general_flags_;
}
ApplicationData::ApplicationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.ApplicationData)
}
ApplicationData::ApplicationData(const ApplicationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  application_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_identifier().empty()) {
    application_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_application_identifier(),
      GetArena());
  }
  terminal_transaction_qualifiers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_terminal_transaction_qualifiers().empty()) {
    terminal_transaction_qualifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_terminal_transaction_qualifiers(),
      GetArena());
  }
  reader_floor_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reader_floor_limit().empty()) {
    reader_floor_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reader_floor_limit(),
      GetArena());
  }
  terminal_capabilities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_terminal_capabilities().empty()) {
    terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_terminal_capabilities(),
      GetArena());
  }
  addictional_terminal_capabilities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addictional_terminal_capabilities().empty()) {
    addictional_terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addictional_terminal_capabilities(),
      GetArena());
  }
  application_version_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_version_number().empty()) {
    application_version_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_application_version_number(),
      GetArena());
  }
  card_data_input_capability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_data_input_capability().empty()) {
    card_data_input_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_card_data_input_capability(),
      GetArena());
  }
  cvm_capability_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cvm_capability_required().empty()) {
    cvm_capability_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cvm_capability_required(),
      GetArena());
  }
  cvm_capability_not_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cvm_capability_not_required().empty()) {
    cvm_capability_not_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cvm_capability_not_required(),
      GetArena());
  }
  security_capability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_capability().empty()) {
    security_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_security_capability(),
      GetArena());
  }
  terminal_action_code_default_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_terminal_action_code_default().empty()) {
    terminal_action_code_default_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_terminal_action_code_default(),
      GetArena());
  }
  terminal_action_code_denial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_terminal_action_code_denial().empty()) {
    terminal_action_code_denial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_terminal_action_code_denial(),
      GetArena());
  }
  terminal_action_code_online_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_terminal_action_code_online().empty()) {
    terminal_action_code_online_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_terminal_action_code_online(),
      GetArena());
  }
  risk_management_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_risk_management_data().empty()) {
    risk_management_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_risk_management_data(),
      GetArena());
  }
  category_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category_code().empty()) {
    category_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_category_code(),
      GetArena());
  }
  if (from._internal_has_general_flags()) {
    general_flags_ = new ::axis::transactions::GeneralFlags(*from.general_flags_);
  } else {
    general_flags_ = nullptr;
  }
  ::memcpy(&authorized_amount_, &from.authorized_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&merchant_category_code_) -
    reinterpret_cast<char*>(&authorized_amount_)) + sizeof(merchant_category_code_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.ApplicationData)
}

void ApplicationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplicationData_Protos_2faid_2dtable_2eproto.base);
  application_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_transaction_qualifiers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_floor_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_capabilities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addictional_terminal_capabilities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_version_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_data_input_capability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cvm_capability_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cvm_capability_not_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_capability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_action_code_default_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_action_code_denial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_action_code_online_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  risk_management_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&general_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merchant_category_code_) -
      reinterpret_cast<char*>(&general_flags_)) + sizeof(merchant_category_code_));
}

ApplicationData::~ApplicationData() {
  // @@protoc_insertion_point(destructor:axis.transactions.ApplicationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  application_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_transaction_qualifiers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_floor_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_capabilities_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addictional_terminal_capabilities_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_version_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_data_input_capability_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cvm_capability_required_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cvm_capability_not_required_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_capability_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_action_code_default_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_action_code_denial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_action_code_online_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  risk_management_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete general_flags_;
}

void ApplicationData::ArenaDtor(void* object) {
  ApplicationData* _this = reinterpret_cast< ApplicationData* >(object);
  (void)_this;
}
void ApplicationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationData& ApplicationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationData_Protos_2faid_2dtable_2eproto.base);
  return *internal_default_instance();
}


void ApplicationData::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.ApplicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_transaction_qualifiers_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_floor_limit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_capabilities_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addictional_terminal_capabilities_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  application_version_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_data_input_capability_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cvm_capability_required_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cvm_capability_not_required_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  security_capability_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_action_code_default_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_action_code_denial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_action_code_online_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  risk_management_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && general_flags_ != nullptr) {
    delete general_flags_;
  }
  general_flags_ = nullptr;
  ::memset(&authorized_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merchant_category_code_) -
      reinterpret_cast<char*>(&authorized_amount_)) + sizeof(merchant_category_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes application_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_application_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .axis.transactions.GeneralFlags general_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_general_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 authorized_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          authorized_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 country_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          country_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currency_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          currency_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currency_exponent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          currency_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 terminal_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          terminal_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 merchant_category_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          merchant_category_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes terminal_transaction_qualifiers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_terminal_transaction_qualifiers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 contactless_floor_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          contactless_floor_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes reader_floor_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_reader_floor_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit_no_on_device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          limit_no_on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit_on_device = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          limit_on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cvm_required_limit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          cvm_required_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes terminal_capabilities = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_terminal_capabilities();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes addictional_terminal_capabilities = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_addictional_terminal_capabilities();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes application_version_number = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_application_version_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes card_data_input_capability = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_card_data_input_capability();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cvm_capability_required = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_cvm_capability_required();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cvm_capability_not_required = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_cvm_capability_not_required();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes security_capability = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_security_capability();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes terminal_action_code_default = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_terminal_action_code_default();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes terminal_action_code_denial = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_terminal_action_code_denial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes terminal_action_code_online = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_terminal_action_code_online();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes risk_management_data = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_risk_management_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes category_code = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_category_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.ApplicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes application_identifier = 1;
  if (this->application_identifier().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_application_identifier(), target);
  }

  // .axis.transactions.GeneralFlags general_flags = 2;
  if (this->has_general_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::general_flags(this), target, stream);
  }

  // uint64 authorized_amount = 3;
  if (this->authorized_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_authorized_amount(), target);
  }

  // uint32 country_code = 4;
  if (this->country_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_country_code(), target);
  }

  // uint32 currency_code = 5;
  if (this->currency_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_currency_code(), target);
  }

  // uint32 currency_exponent = 6;
  if (this->currency_exponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_currency_exponent(), target);
  }

  // uint32 terminal_type = 7;
  if (this->terminal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_terminal_type(), target);
  }

  // uint32 merchant_category_code = 8;
  if (this->merchant_category_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_merchant_category_code(), target);
  }

  // bytes terminal_transaction_qualifiers = 9;
  if (this->terminal_transaction_qualifiers().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_terminal_transaction_qualifiers(), target);
  }

  // uint64 contactless_floor_limit = 10;
  if (this->contactless_floor_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_contactless_floor_limit(), target);
  }

  // bytes reader_floor_limit = 11;
  if (this->reader_floor_limit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_reader_floor_limit(), target);
  }

  // uint64 limit_no_on_device = 12;
  if (this->limit_no_on_device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_limit_no_on_device(), target);
  }

  // uint64 limit_on_device = 13;
  if (this->limit_on_device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_limit_on_device(), target);
  }

  // uint64 cvm_required_limit = 14;
  if (this->cvm_required_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_cvm_required_limit(), target);
  }

  // bytes terminal_capabilities = 15;
  if (this->terminal_capabilities().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_terminal_capabilities(), target);
  }

  // bytes addictional_terminal_capabilities = 16;
  if (this->addictional_terminal_capabilities().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_addictional_terminal_capabilities(), target);
  }

  // bytes application_version_number = 17;
  if (this->application_version_number().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_application_version_number(), target);
  }

  // bytes card_data_input_capability = 18;
  if (this->card_data_input_capability().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_card_data_input_capability(), target);
  }

  // bytes cvm_capability_required = 19;
  if (this->cvm_capability_required().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_cvm_capability_required(), target);
  }

  // bytes cvm_capability_not_required = 20;
  if (this->cvm_capability_not_required().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_cvm_capability_not_required(), target);
  }

  // bytes security_capability = 21;
  if (this->security_capability().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_security_capability(), target);
  }

  // bytes terminal_action_code_default = 22;
  if (this->terminal_action_code_default().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_terminal_action_code_default(), target);
  }

  // bytes terminal_action_code_denial = 23;
  if (this->terminal_action_code_denial().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_terminal_action_code_denial(), target);
  }

  // bytes terminal_action_code_online = 24;
  if (this->terminal_action_code_online().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_terminal_action_code_online(), target);
  }

  // bytes risk_management_data = 25;
  if (this->risk_management_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_risk_management_data(), target);
  }

  // bytes category_code = 26;
  if (this->category_code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_category_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.ApplicationData)
  return target;
}

size_t ApplicationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.ApplicationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes application_identifier = 1;
  if (this->application_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_application_identifier());
  }

  // bytes terminal_transaction_qualifiers = 9;
  if (this->terminal_transaction_qualifiers().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_transaction_qualifiers());
  }

  // bytes reader_floor_limit = 11;
  if (this->reader_floor_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reader_floor_limit());
  }

  // bytes terminal_capabilities = 15;
  if (this->terminal_capabilities().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_capabilities());
  }

  // bytes addictional_terminal_capabilities = 16;
  if (this->addictional_terminal_capabilities().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_addictional_terminal_capabilities());
  }

  // bytes application_version_number = 17;
  if (this->application_version_number().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_application_version_number());
  }

  // bytes card_data_input_capability = 18;
  if (this->card_data_input_capability().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_card_data_input_capability());
  }

  // bytes cvm_capability_required = 19;
  if (this->cvm_capability_required().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cvm_capability_required());
  }

  // bytes cvm_capability_not_required = 20;
  if (this->cvm_capability_not_required().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cvm_capability_not_required());
  }

  // bytes security_capability = 21;
  if (this->security_capability().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_security_capability());
  }

  // bytes terminal_action_code_default = 22;
  if (this->terminal_action_code_default().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_action_code_default());
  }

  // bytes terminal_action_code_denial = 23;
  if (this->terminal_action_code_denial().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_action_code_denial());
  }

  // bytes terminal_action_code_online = 24;
  if (this->terminal_action_code_online().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_action_code_online());
  }

  // bytes risk_management_data = 25;
  if (this->risk_management_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_risk_management_data());
  }

  // bytes category_code = 26;
  if (this->category_code().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_category_code());
  }

  // .axis.transactions.GeneralFlags general_flags = 2;
  if (this->has_general_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *general_flags_);
  }

  // uint64 authorized_amount = 3;
  if (this->authorized_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_authorized_amount());
  }

  // uint32 country_code = 4;
  if (this->country_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_country_code());
  }

  // uint32 currency_code = 5;
  if (this->currency_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currency_code());
  }

  // uint32 currency_exponent = 6;
  if (this->currency_exponent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currency_exponent());
  }

  // uint32 terminal_type = 7;
  if (this->terminal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_terminal_type());
  }

  // uint64 contactless_floor_limit = 10;
  if (this->contactless_floor_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contactless_floor_limit());
  }

  // uint64 limit_no_on_device = 12;
  if (this->limit_no_on_device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit_no_on_device());
  }

  // uint64 limit_on_device = 13;
  if (this->limit_on_device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit_on_device());
  }

  // uint64 cvm_required_limit = 14;
  if (this->cvm_required_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cvm_required_limit());
  }

  // uint32 merchant_category_code = 8;
  if (this->merchant_category_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_merchant_category_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.ApplicationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.ApplicationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.ApplicationData)
    MergeFrom(*source);
  }
}

void ApplicationData::MergeFrom(const ApplicationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.ApplicationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.application_identifier().size() > 0) {
    _internal_set_application_identifier(from._internal_application_identifier());
  }
  if (from.terminal_transaction_qualifiers().size() > 0) {
    _internal_set_terminal_transaction_qualifiers(from._internal_terminal_transaction_qualifiers());
  }
  if (from.reader_floor_limit().size() > 0) {
    _internal_set_reader_floor_limit(from._internal_reader_floor_limit());
  }
  if (from.terminal_capabilities().size() > 0) {
    _internal_set_terminal_capabilities(from._internal_terminal_capabilities());
  }
  if (from.addictional_terminal_capabilities().size() > 0) {
    _internal_set_addictional_terminal_capabilities(from._internal_addictional_terminal_capabilities());
  }
  if (from.application_version_number().size() > 0) {
    _internal_set_application_version_number(from._internal_application_version_number());
  }
  if (from.card_data_input_capability().size() > 0) {
    _internal_set_card_data_input_capability(from._internal_card_data_input_capability());
  }
  if (from.cvm_capability_required().size() > 0) {
    _internal_set_cvm_capability_required(from._internal_cvm_capability_required());
  }
  if (from.cvm_capability_not_required().size() > 0) {
    _internal_set_cvm_capability_not_required(from._internal_cvm_capability_not_required());
  }
  if (from.security_capability().size() > 0) {
    _internal_set_security_capability(from._internal_security_capability());
  }
  if (from.terminal_action_code_default().size() > 0) {
    _internal_set_terminal_action_code_default(from._internal_terminal_action_code_default());
  }
  if (from.terminal_action_code_denial().size() > 0) {
    _internal_set_terminal_action_code_denial(from._internal_terminal_action_code_denial());
  }
  if (from.terminal_action_code_online().size() > 0) {
    _internal_set_terminal_action_code_online(from._internal_terminal_action_code_online());
  }
  if (from.risk_management_data().size() > 0) {
    _internal_set_risk_management_data(from._internal_risk_management_data());
  }
  if (from.category_code().size() > 0) {
    _internal_set_category_code(from._internal_category_code());
  }
  if (from.has_general_flags()) {
    _internal_mutable_general_flags()->::axis::transactions::GeneralFlags::MergeFrom(from._internal_general_flags());
  }
  if (from.authorized_amount() != 0) {
    _internal_set_authorized_amount(from._internal_authorized_amount());
  }
  if (from.country_code() != 0) {
    _internal_set_country_code(from._internal_country_code());
  }
  if (from.currency_code() != 0) {
    _internal_set_currency_code(from._internal_currency_code());
  }
  if (from.currency_exponent() != 0) {
    _internal_set_currency_exponent(from._internal_currency_exponent());
  }
  if (from.terminal_type() != 0) {
    _internal_set_terminal_type(from._internal_terminal_type());
  }
  if (from.contactless_floor_limit() != 0) {
    _internal_set_contactless_floor_limit(from._internal_contactless_floor_limit());
  }
  if (from.limit_no_on_device() != 0) {
    _internal_set_limit_no_on_device(from._internal_limit_no_on_device());
  }
  if (from.limit_on_device() != 0) {
    _internal_set_limit_on_device(from._internal_limit_on_device());
  }
  if (from.cvm_required_limit() != 0) {
    _internal_set_cvm_required_limit(from._internal_cvm_required_limit());
  }
  if (from.merchant_category_code() != 0) {
    _internal_set_merchant_category_code(from._internal_merchant_category_code());
  }
}

void ApplicationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.ApplicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationData::CopyFrom(const ApplicationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.ApplicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationData::IsInitialized() const {
  return true;
}

void ApplicationData::InternalSwap(ApplicationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  application_identifier_.Swap(&other->application_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_transaction_qualifiers_.Swap(&other->terminal_transaction_qualifiers_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_floor_limit_.Swap(&other->reader_floor_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_capabilities_.Swap(&other->terminal_capabilities_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addictional_terminal_capabilities_.Swap(&other->addictional_terminal_capabilities_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  application_version_number_.Swap(&other->application_version_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_data_input_capability_.Swap(&other->card_data_input_capability_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cvm_capability_required_.Swap(&other->cvm_capability_required_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cvm_capability_not_required_.Swap(&other->cvm_capability_not_required_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  security_capability_.Swap(&other->security_capability_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_action_code_default_.Swap(&other->terminal_action_code_default_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_action_code_denial_.Swap(&other->terminal_action_code_denial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  terminal_action_code_online_.Swap(&other->terminal_action_code_online_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  risk_management_data_.Swap(&other->risk_management_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_code_.Swap(&other->category_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplicationData, merchant_category_code_)
      + sizeof(ApplicationData::merchant_category_code_)
      - PROTOBUF_FIELD_OFFSET(ApplicationData, general_flags_)>(
          reinterpret_cast<char*>(&general_flags_),
          reinterpret_cast<char*>(&other->general_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneralFlags::InitAsDefaultInstance() {
}
class GeneralFlags::_Internal {
 public:
};

GeneralFlags::GeneralFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.GeneralFlags)
}
GeneralFlags::GeneralFlags(const GeneralFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flag_type_, &from.flag_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&validate_card_date_) -
    reinterpret_cast<char*>(&flag_type_)) + sizeof(validate_card_date_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.GeneralFlags)
}

void GeneralFlags::SharedCtor() {
  ::memset(&flag_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validate_card_date_) -
      reinterpret_cast<char*>(&flag_type_)) + sizeof(validate_card_date_));
}

GeneralFlags::~GeneralFlags() {
  // @@protoc_insertion_point(destructor:axis.transactions.GeneralFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeneralFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeneralFlags::ArenaDtor(void* object) {
  GeneralFlags* _this = reinterpret_cast< GeneralFlags* >(object);
  (void)_this;
}
void GeneralFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeneralFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralFlags& GeneralFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralFlags_Protos_2faid_2dtable_2eproto.base);
  return *internal_default_instance();
}


void GeneralFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.GeneralFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flag_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validate_card_date_) -
      reinterpret_cast<char*>(&flag_type_)) + sizeof(validate_card_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeneralFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .axis.transactions.FlagType flag_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag_type(static_cast<::axis::transactions::FlagType>(val));
        } else goto handle_unusual;
        continue;
      // bool validate_card_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          validate_card_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.GeneralFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .axis.transactions.FlagType flag_type = 1;
  if (this->flag_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag_type(), target);
  }

  // bool validate_card_date = 2;
  if (this->validate_card_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_validate_card_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.GeneralFlags)
  return target;
}

size_t GeneralFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.GeneralFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .axis.transactions.FlagType flag_type = 1;
  if (this->flag_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag_type());
  }

  // bool validate_card_date = 2;
  if (this->validate_card_date() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.GeneralFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.GeneralFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.GeneralFlags)
    MergeFrom(*source);
  }
}

void GeneralFlags::MergeFrom(const GeneralFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.GeneralFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flag_type() != 0) {
    _internal_set_flag_type(from._internal_flag_type());
  }
  if (from.validate_card_date() != 0) {
    _internal_set_validate_card_date(from._internal_validate_card_date());
  }
}

void GeneralFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.GeneralFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralFlags::CopyFrom(const GeneralFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.GeneralFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralFlags::IsInitialized() const {
  return true;
}

void GeneralFlags::InternalSwap(GeneralFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeneralFlags, validate_card_date_)
      + sizeof(GeneralFlags::validate_card_date_)
      - PROTOBUF_FIELD_OFFSET(GeneralFlags, flag_type_)>(
          reinterpret_cast<char*>(&flag_type_),
          reinterpret_cast<char*>(&other->flag_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::ApplicationIdentifierTable* Arena::CreateMaybeMessage< ::axis::transactions::ApplicationIdentifierTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::ApplicationIdentifierTable >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::ApplicationData* Arena::CreateMaybeMessage< ::axis::transactions::ApplicationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::ApplicationData >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::GeneralFlags* Arena::CreateMaybeMessage< ::axis::transactions::GeneralFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::GeneralFlags >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
