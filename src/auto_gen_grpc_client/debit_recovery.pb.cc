// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debit_recovery.proto

#include "debit_recovery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace axis {
namespace transactions {
class DebitRecoveryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebitRecovery> _instance;
} _DebitRecovery_default_instance_;
class DebitRecoveryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebitRecoveryResponse> _instance;
} _DebitRecoveryResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
static void InitDefaultsscc_info_DebitRecovery_debit_5frecovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_DebitRecovery_default_instance_;
    new (ptr) ::axis::transactions::DebitRecovery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::DebitRecovery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebitRecovery_debit_5frecovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebitRecovery_debit_5frecovery_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_DebitRecoveryResponse_debit_5frecovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_DebitRecoveryResponse_default_instance_;
    new (ptr) ::axis::transactions::DebitRecoveryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::DebitRecoveryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebitRecoveryResponse_debit_5frecovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebitRecoveryResponse_debit_5frecovery_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_debit_5frecovery_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_debit_5frecovery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_debit_5frecovery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_debit_5frecovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, device_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, operator_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, reader_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, device_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, register_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, passage_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, transaction_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, device_suid_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, pan_hash_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, par_card_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, transaction_data_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, emv_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, bin_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, restriction_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, transaction_value_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, line_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecovery, geolocation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, gateway_uid_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, emv_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, bin_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, restriction_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::DebitRecoveryResponse, device_suid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::axis::transactions::DebitRecovery)},
  { 23, -1, sizeof(::axis::transactions::DebitRecoveryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_DebitRecovery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_DebitRecoveryResponse_default_instance_),
};

const char descriptor_table_protodef_debit_5frecovery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024debit_recovery.proto\022\021axis.transaction"
  "s\032\037google/protobuf/timestamp.proto\"\374\003\n\rD"
  "ebitRecovery\022\021\n\tdevice_id\030\001 \001(\t\022\023\n\013opera"
  "tor_id\030\002 \001(\t\022\034\n\024reader_serial_number\030\003 \001"
  "(\t\022\034\n\024device_serial_number\030\004 \001(\t\022\025\n\rregi"
  "ster_code\030\005 \001(\005\0220\n\014passage_date\030\006 \001(\0132\032."
  "google.protobuf.Timestamp\0224\n\020transaction"
  "_date\030\007 \001(\0132\032.google.protobuf.Timestamp\022"
  "\023\n\013device_suid\030\010 \001(\t\022\020\n\010pan_hash\030\t \001(\014\022\020"
  "\n\010par_card\030\n \001(\t\022\030\n\020transaction_data\030\013 \001"
  "(\014\022\036\n\026emv_parameters_version\030\014 \001(\005\022\036\n\026bi"
  "n_parameters_version\030\r \001(\005\022 \n\030restrictio"
  "n_list_version\030\016 \001(\005\022\031\n\021transaction_valu"
  "e\030\017 \001(\005\022\017\n\007line_id\030\020 \001(\t\022\022\n\nvehicle_id\030\021"
  " \001(\t\022\023\n\013geolocation\030\022 \001(\t\"\272\001\n\025DebitRecov"
  "eryResponse\022\025\n\rresponse_code\030\001 \001(\005\022\023\n\013ga"
  "teway_uid\030\002 \001(\t\022\036\n\026emv_parameters_versio"
  "n\030\003 \001(\005\022\036\n\026bin_parameters_version\030\004 \001(\005\022"
  " \n\030restriction_list_version\030\005 \001(\005\022\023\n\013dev"
  "ice_suid\030\006 \001(\t2e\n\014RecoverDebit\022U\n\007Recove"
  "r\022 .axis.transactions.DebitRecovery\032(.ax"
  "is.transactions.DebitRecoveryResponseBQ\n"
  "#com.axismobfintech.gpb.transactionsZ\022ax"
  "istransactionspb\252\002\025Axis.GPB.Transactions"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_debit_5frecovery_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_debit_5frecovery_2eproto_sccs[2] = {
  &scc_info_DebitRecovery_debit_5frecovery_2eproto.base,
  &scc_info_DebitRecoveryResponse_debit_5frecovery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_debit_5frecovery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_debit_5frecovery_2eproto = {
  false, false, descriptor_table_protodef_debit_5frecovery_2eproto, "debit_recovery.proto", 968,
  &descriptor_table_debit_5frecovery_2eproto_once, descriptor_table_debit_5frecovery_2eproto_sccs, descriptor_table_debit_5frecovery_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_debit_5frecovery_2eproto::offsets,
  file_level_metadata_debit_5frecovery_2eproto, 2, file_level_enum_descriptors_debit_5frecovery_2eproto, file_level_service_descriptors_debit_5frecovery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_debit_5frecovery_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_debit_5frecovery_2eproto)), true);
namespace axis {
namespace transactions {

// ===================================================================

void DebitRecovery::InitAsDefaultInstance() {
  ::axis::transactions::_DebitRecovery_default_instance_._instance.get_mutable()->passage_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::axis::transactions::_DebitRecovery_default_instance_._instance.get_mutable()->transaction_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class DebitRecovery::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& passage_date(const DebitRecovery* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& transaction_date(const DebitRecovery* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DebitRecovery::_Internal::passage_date(const DebitRecovery* msg) {
  return *msg->passage_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DebitRecovery::_Internal::transaction_date(const DebitRecovery* msg) {
  return *msg->transaction_date_;
}
void DebitRecovery::clear_passage_date() {
  if (GetArena() == nullptr && passage_date_ != nullptr) {
    delete passage_date_;
  }
  passage_date_ = nullptr;
}
void DebitRecovery::clear_transaction_date() {
  if (GetArena() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
}
DebitRecovery::DebitRecovery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.DebitRecovery)
}
DebitRecovery::DebitRecovery(const DebitRecovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_id().empty()) {
    operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_id(),
      GetArena());
  }
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reader_serial_number().empty()) {
    reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reader_serial_number(),
      GetArena());
  }
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_serial_number().empty()) {
    device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_serial_number(),
      GetArena());
  }
  device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_suid().empty()) {
    device_suid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_suid(),
      GetArena());
  }
  pan_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pan_hash().empty()) {
    pan_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pan_hash(),
      GetArena());
  }
  par_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_par_card().empty()) {
    par_card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_par_card(),
      GetArena());
  }
  transaction_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_data().empty()) {
    transaction_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction_data(),
      GetArena());
  }
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_id().empty()) {
    line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_line_id(),
      GetArena());
  }
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vehicle_id(),
      GetArena());
  }
  geolocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geolocation().empty()) {
    geolocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_geolocation(),
      GetArena());
  }
  if (from._internal_has_passage_date()) {
    passage_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.passage_date_);
  } else {
    passage_date_ = nullptr;
  }
  if (from._internal_has_transaction_date()) {
    transaction_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.transaction_date_);
  } else {
    transaction_date_ = nullptr;
  }
  ::memcpy(&register_code_, &from.register_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_value_) -
    reinterpret_cast<char*>(&register_code_)) + sizeof(transaction_value_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.DebitRecovery)
}

void DebitRecovery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebitRecovery_debit_5frecovery_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pan_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  par_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geolocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&passage_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_value_) -
      reinterpret_cast<char*>(&passage_date_)) + sizeof(transaction_value_));
}

DebitRecovery::~DebitRecovery() {
  // @@protoc_insertion_point(destructor:axis.transactions.DebitRecovery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebitRecovery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_suid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pan_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  par_card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geolocation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete passage_date_;
  if (this != internal_default_instance()) delete transaction_date_;
}

void DebitRecovery::ArenaDtor(void* object) {
  DebitRecovery* _this = reinterpret_cast< DebitRecovery* >(object);
  (void)_this;
}
void DebitRecovery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebitRecovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebitRecovery& DebitRecovery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebitRecovery_debit_5frecovery_2eproto.base);
  return *internal_default_instance();
}


void DebitRecovery::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.DebitRecovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_suid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pan_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  par_card_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geolocation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && passage_date_ != nullptr) {
    delete passage_date_;
  }
  passage_date_ = nullptr;
  if (GetArena() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
  ::memset(&register_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_value_) -
      reinterpret_cast<char*>(&register_code_)) + sizeof(transaction_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebitRecovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.operator_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reader_serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reader_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.reader_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.device_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 register_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          register_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp passage_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_passage_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp transaction_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_suid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_device_suid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.device_suid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pan_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_pan_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string par_card = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_par_card();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.par_card"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transaction_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_transaction_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 emv_parameters_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          emv_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bin_parameters_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          bin_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 restriction_list_version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          restriction_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transaction_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          transaction_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_line_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.line_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vehicle_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.vehicle_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geolocation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_geolocation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecovery.geolocation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebitRecovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.DebitRecovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string operator_id = 2;
  if (this->operator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_id().data(), static_cast<int>(this->_internal_operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.operator_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_id(), target);
  }

  // string reader_serial_number = 3;
  if (this->reader_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reader_serial_number().data(), static_cast<int>(this->_internal_reader_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.reader_serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reader_serial_number(), target);
  }

  // string device_serial_number = 4;
  if (this->device_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_serial_number().data(), static_cast<int>(this->_internal_device_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.device_serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_serial_number(), target);
  }

  // int32 register_code = 5;
  if (this->register_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_register_code(), target);
  }

  // .google.protobuf.Timestamp passage_date = 6;
  if (this->has_passage_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::passage_date(this), target, stream);
  }

  // .google.protobuf.Timestamp transaction_date = 7;
  if (this->has_transaction_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transaction_date(this), target, stream);
  }

  // string device_suid = 8;
  if (this->device_suid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_suid().data(), static_cast<int>(this->_internal_device_suid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.device_suid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device_suid(), target);
  }

  // bytes pan_hash = 9;
  if (this->pan_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_pan_hash(), target);
  }

  // string par_card = 10;
  if (this->par_card().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_par_card().data(), static_cast<int>(this->_internal_par_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.par_card");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_par_card(), target);
  }

  // bytes transaction_data = 11;
  if (this->transaction_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_transaction_data(), target);
  }

  // int32 emv_parameters_version = 12;
  if (this->emv_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_emv_parameters_version(), target);
  }

  // int32 bin_parameters_version = 13;
  if (this->bin_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_bin_parameters_version(), target);
  }

  // int32 restriction_list_version = 14;
  if (this->restriction_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_restriction_list_version(), target);
  }

  // int32 transaction_value = 15;
  if (this->transaction_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_transaction_value(), target);
  }

  // string line_id = 16;
  if (this->line_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_id().data(), static_cast<int>(this->_internal_line_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.line_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_line_id(), target);
  }

  // string vehicle_id = 17;
  if (this->vehicle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_vehicle_id(), target);
  }

  // string geolocation = 18;
  if (this->geolocation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geolocation().data(), static_cast<int>(this->_internal_geolocation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecovery.geolocation");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_geolocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.DebitRecovery)
  return target;
}

size_t DebitRecovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.DebitRecovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string operator_id = 2;
  if (this->operator_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_id());
  }

  // string reader_serial_number = 3;
  if (this->reader_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reader_serial_number());
  }

  // string device_serial_number = 4;
  if (this->device_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_serial_number());
  }

  // string device_suid = 8;
  if (this->device_suid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_suid());
  }

  // bytes pan_hash = 9;
  if (this->pan_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pan_hash());
  }

  // string par_card = 10;
  if (this->par_card().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_par_card());
  }

  // bytes transaction_data = 11;
  if (this->transaction_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_data());
  }

  // string line_id = 16;
  if (this->line_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_id());
  }

  // string vehicle_id = 17;
  if (this->vehicle_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // string geolocation = 18;
  if (this->geolocation().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geolocation());
  }

  // .google.protobuf.Timestamp passage_date = 6;
  if (this->has_passage_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passage_date_);
  }

  // .google.protobuf.Timestamp transaction_date = 7;
  if (this->has_transaction_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_date_);
  }

  // int32 register_code = 5;
  if (this->register_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_register_code());
  }

  // int32 emv_parameters_version = 12;
  if (this->emv_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_emv_parameters_version());
  }

  // int32 bin_parameters_version = 13;
  if (this->bin_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin_parameters_version());
  }

  // int32 restriction_list_version = 14;
  if (this->restriction_list_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_restriction_list_version());
  }

  // int32 transaction_value = 15;
  if (this->transaction_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transaction_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebitRecovery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.DebitRecovery)
  GOOGLE_DCHECK_NE(&from, this);
  const DebitRecovery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebitRecovery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.DebitRecovery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.DebitRecovery)
    MergeFrom(*source);
  }
}

void DebitRecovery::MergeFrom(const DebitRecovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.DebitRecovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.operator_id().size() > 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.reader_serial_number().size() > 0) {
    _internal_set_reader_serial_number(from._internal_reader_serial_number());
  }
  if (from.device_serial_number().size() > 0) {
    _internal_set_device_serial_number(from._internal_device_serial_number());
  }
  if (from.device_suid().size() > 0) {
    _internal_set_device_suid(from._internal_device_suid());
  }
  if (from.pan_hash().size() > 0) {
    _internal_set_pan_hash(from._internal_pan_hash());
  }
  if (from.par_card().size() > 0) {
    _internal_set_par_card(from._internal_par_card());
  }
  if (from.transaction_data().size() > 0) {
    _internal_set_transaction_data(from._internal_transaction_data());
  }
  if (from.line_id().size() > 0) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (from.vehicle_id().size() > 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from.geolocation().size() > 0) {
    _internal_set_geolocation(from._internal_geolocation());
  }
  if (from.has_passage_date()) {
    _internal_mutable_passage_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_passage_date());
  }
  if (from.has_transaction_date()) {
    _internal_mutable_transaction_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_transaction_date());
  }
  if (from.register_code() != 0) {
    _internal_set_register_code(from._internal_register_code());
  }
  if (from.emv_parameters_version() != 0) {
    _internal_set_emv_parameters_version(from._internal_emv_parameters_version());
  }
  if (from.bin_parameters_version() != 0) {
    _internal_set_bin_parameters_version(from._internal_bin_parameters_version());
  }
  if (from.restriction_list_version() != 0) {
    _internal_set_restriction_list_version(from._internal_restriction_list_version());
  }
  if (from.transaction_value() != 0) {
    _internal_set_transaction_value(from._internal_transaction_value());
  }
}

void DebitRecovery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.DebitRecovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebitRecovery::CopyFrom(const DebitRecovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.DebitRecovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebitRecovery::IsInitialized() const {
  return true;
}

void DebitRecovery::InternalSwap(DebitRecovery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_id_.Swap(&other->operator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_serial_number_.Swap(&other->reader_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_number_.Swap(&other->device_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_suid_.Swap(&other->device_suid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pan_hash_.Swap(&other->pan_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  par_card_.Swap(&other->par_card_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_data_.Swap(&other->transaction_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_id_.Swap(&other->line_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.Swap(&other->vehicle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geolocation_.Swap(&other->geolocation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebitRecovery, transaction_value_)
      + sizeof(DebitRecovery::transaction_value_)
      - PROTOBUF_FIELD_OFFSET(DebitRecovery, passage_date_)>(
          reinterpret_cast<char*>(&passage_date_),
          reinterpret_cast<char*>(&other->passage_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebitRecovery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebitRecoveryResponse::InitAsDefaultInstance() {
}
class DebitRecoveryResponse::_Internal {
 public:
};

DebitRecoveryResponse::DebitRecoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.DebitRecoveryResponse)
}
DebitRecoveryResponse::DebitRecoveryResponse(const DebitRecoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gateway_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gateway_uid().empty()) {
    gateway_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gateway_uid(),
      GetArena());
  }
  device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_suid().empty()) {
    device_suid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_suid(),
      GetArena());
  }
  ::memcpy(&response_code_, &from.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&restriction_list_version_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(restriction_list_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.DebitRecoveryResponse)
}

void DebitRecoveryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebitRecoveryResponse_debit_5frecovery_2eproto.base);
  gateway_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restriction_list_version_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(restriction_list_version_));
}

DebitRecoveryResponse::~DebitRecoveryResponse() {
  // @@protoc_insertion_point(destructor:axis.transactions.DebitRecoveryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebitRecoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gateway_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_suid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebitRecoveryResponse::ArenaDtor(void* object) {
  DebitRecoveryResponse* _this = reinterpret_cast< DebitRecoveryResponse* >(object);
  (void)_this;
}
void DebitRecoveryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebitRecoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebitRecoveryResponse& DebitRecoveryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebitRecoveryResponse_debit_5frecovery_2eproto.base);
  return *internal_default_instance();
}


void DebitRecoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.DebitRecoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_suid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restriction_list_version_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(restriction_list_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebitRecoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gateway_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gateway_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecoveryResponse.gateway_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 emv_parameters_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          emv_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bin_parameters_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bin_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 restriction_list_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          restriction_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_suid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_suid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.DebitRecoveryResponse.device_suid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebitRecoveryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.DebitRecoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 response_code = 1;
  if (this->response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_response_code(), target);
  }

  // string gateway_uid = 2;
  if (this->gateway_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway_uid().data(), static_cast<int>(this->_internal_gateway_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecoveryResponse.gateway_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gateway_uid(), target);
  }

  // int32 emv_parameters_version = 3;
  if (this->emv_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_emv_parameters_version(), target);
  }

  // int32 bin_parameters_version = 4;
  if (this->bin_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bin_parameters_version(), target);
  }

  // int32 restriction_list_version = 5;
  if (this->restriction_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_restriction_list_version(), target);
  }

  // string device_suid = 6;
  if (this->device_suid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_suid().data(), static_cast<int>(this->_internal_device_suid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.DebitRecoveryResponse.device_suid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_suid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.DebitRecoveryResponse)
  return target;
}

size_t DebitRecoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.DebitRecoveryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_uid = 2;
  if (this->gateway_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway_uid());
  }

  // string device_suid = 6;
  if (this->device_suid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_suid());
  }

  // int32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_response_code());
  }

  // int32 emv_parameters_version = 3;
  if (this->emv_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_emv_parameters_version());
  }

  // int32 bin_parameters_version = 4;
  if (this->bin_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin_parameters_version());
  }

  // int32 restriction_list_version = 5;
  if (this->restriction_list_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_restriction_list_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebitRecoveryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.DebitRecoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DebitRecoveryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebitRecoveryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.DebitRecoveryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.DebitRecoveryResponse)
    MergeFrom(*source);
  }
}

void DebitRecoveryResponse::MergeFrom(const DebitRecoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.DebitRecoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_uid().size() > 0) {
    _internal_set_gateway_uid(from._internal_gateway_uid());
  }
  if (from.device_suid().size() > 0) {
    _internal_set_device_suid(from._internal_device_suid());
  }
  if (from.response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
  if (from.emv_parameters_version() != 0) {
    _internal_set_emv_parameters_version(from._internal_emv_parameters_version());
  }
  if (from.bin_parameters_version() != 0) {
    _internal_set_bin_parameters_version(from._internal_bin_parameters_version());
  }
  if (from.restriction_list_version() != 0) {
    _internal_set_restriction_list_version(from._internal_restriction_list_version());
  }
}

void DebitRecoveryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.DebitRecoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebitRecoveryResponse::CopyFrom(const DebitRecoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.DebitRecoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebitRecoveryResponse::IsInitialized() const {
  return true;
}

void DebitRecoveryResponse::InternalSwap(DebitRecoveryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gateway_uid_.Swap(&other->gateway_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_suid_.Swap(&other->device_suid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebitRecoveryResponse, restriction_list_version_)
      + sizeof(DebitRecoveryResponse::restriction_list_version_)
      - PROTOBUF_FIELD_OFFSET(DebitRecoveryResponse, response_code_)>(
          reinterpret_cast<char*>(&response_code_),
          reinterpret_cast<char*>(&other->response_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebitRecoveryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::DebitRecovery* Arena::CreateMaybeMessage< ::axis::transactions::DebitRecovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::DebitRecovery >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::DebitRecoveryResponse* Arena::CreateMaybeMessage< ::axis::transactions::DebitRecoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::DebitRecoveryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
