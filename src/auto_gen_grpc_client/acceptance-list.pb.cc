// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acceptance-list.proto

#include "acceptance-list.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Protos_2fpan_2dacceptance_2dlist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrimaryAccountNumberWhiteList_Protos_2fpan_2dacceptance_2dlist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Protos_2fpar_2dacceptance_2dlist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrimaryAccountReferenceWhiteList_Protos_2fpar_2dacceptance_2dlist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace axis {
namespace transactions {
class AcceptanceListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptanceListRequest> _instance;
} _AcceptanceListRequest_default_instance_;
class AcceptanceListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptanceListResponse> _instance;
} _AcceptanceListResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
static void InitDefaultsscc_info_AcceptanceListRequest_acceptance_2dlist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_AcceptanceListRequest_default_instance_;
    new (ptr) ::axis::transactions::AcceptanceListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::AcceptanceListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcceptanceListRequest_acceptance_2dlist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AcceptanceListRequest_acceptance_2dlist_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_AcceptanceListResponse_acceptance_2dlist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_AcceptanceListResponse_default_instance_;
    new (ptr) ::axis::transactions::AcceptanceListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::AcceptanceListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AcceptanceListResponse_acceptance_2dlist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AcceptanceListResponse_acceptance_2dlist_2eproto}, {
      &scc_info_PrimaryAccountNumberWhiteList_Protos_2fpan_2dacceptance_2dlist_2eproto.base,
      &scc_info_PrimaryAccountReferenceWhiteList_Protos_2fpar_2dacceptance_2dlist_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_acceptance_2dlist_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_acceptance_2dlist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_acceptance_2dlist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_acceptance_2dlist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, operator_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, reader_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, device_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, ksn_data_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, register_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, line_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, register_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListRequest, acceptance_list_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, acceptance_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, pan_list_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, par_list_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::AcceptanceListResponse, register_date_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::axis::transactions::AcceptanceListRequest)},
  { 15, -1, sizeof(::axis::transactions::AcceptanceListResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_AcceptanceListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_AcceptanceListResponse_default_instance_),
};

const char descriptor_table_protodef_acceptance_2dlist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025acceptance-list.proto\022\021axis.transactio"
  "ns\032\037google/protobuf/timestamp.proto\032 Pro"
  "tos/pan-acceptance-list.proto\032 Protos/pa"
  "r-acceptance-list.proto\"\235\002\n\025AcceptanceLi"
  "stRequest\022\021\n\tdevice_id\030\001 \001(\t\022\023\n\013operator"
  "_id\030\002 \001(\t\022\034\n\024reader_serial_number\030\003 \001(\t\022"
  "\034\n\024device_serial_number\030\004 \001(\t\022\020\n\010ksn_dat"
  "a\030\005 \001(\014\022\025\n\rregister_code\030\006 \001(\005\022\017\n\007line_i"
  "d\030\007 \001(\t\022\022\n\nvehicle_id\030\010 \001(\t\0221\n\rregister_"
  "date\030\t \001(\0132\032.google.protobuf.Timestamp\022\037"
  "\n\027acceptance_list_version\030\n \001(\005\"\216\002\n\026Acce"
  "ptanceListResponse\022\025\n\rresponse_code\030\001 \001("
  "\005\022\037\n\027acceptance_list_version\030\002 \001(\005\022B\n\010pa"
  "n_list\030\003 \001(\01320.axis.transactions.Primary"
  "AccountNumberWhiteList\022E\n\010par_list\030\004 \001(\013"
  "23.axis.transactions.PrimaryAccountRefer"
  "enceWhiteList\0221\n\rregister_date\030\005 \001(\0132\032.g"
  "oogle.protobuf.Timestamp2{\n\017AcceptanceLi"
  "sts\022h\n\021GetAcceptanceList\022(.axis.transact"
  "ions.AcceptanceListRequest\032).axis.transa"
  "ctions.AcceptanceListResponseBQ\n#com.axi"
  "smobfintech.gpb.transactionsZ\022axistransa"
  "ctionspb\252\002\025Axis.GPB.Transactionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_acceptance_2dlist_2eproto_deps[3] = {
  &::descriptor_table_Protos_2fpan_2dacceptance_2dlist_2eproto,
  &::descriptor_table_Protos_2fpar_2dacceptance_2dlist_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_acceptance_2dlist_2eproto_sccs[2] = {
  &scc_info_AcceptanceListRequest_acceptance_2dlist_2eproto.base,
  &scc_info_AcceptanceListResponse_acceptance_2dlist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_acceptance_2dlist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_acceptance_2dlist_2eproto = {
  false, false, descriptor_table_protodef_acceptance_2dlist_2eproto, "acceptance-list.proto", 920,
  &descriptor_table_acceptance_2dlist_2eproto_once, descriptor_table_acceptance_2dlist_2eproto_sccs, descriptor_table_acceptance_2dlist_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_acceptance_2dlist_2eproto::offsets,
  file_level_metadata_acceptance_2dlist_2eproto, 2, file_level_enum_descriptors_acceptance_2dlist_2eproto, file_level_service_descriptors_acceptance_2dlist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_acceptance_2dlist_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_acceptance_2dlist_2eproto)), true);
namespace axis {
namespace transactions {

// ===================================================================

void AcceptanceListRequest::InitAsDefaultInstance() {
  ::axis::transactions::_AcceptanceListRequest_default_instance_._instance.get_mutable()->register_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class AcceptanceListRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& register_date(const AcceptanceListRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
AcceptanceListRequest::_Internal::register_date(const AcceptanceListRequest* msg) {
  return *msg->register_date_;
}
void AcceptanceListRequest::clear_register_date() {
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
}
AcceptanceListRequest::AcceptanceListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.AcceptanceListRequest)
}
AcceptanceListRequest::AcceptanceListRequest(const AcceptanceListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_id().empty()) {
    operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_id(),
      GetArena());
  }
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reader_serial_number().empty()) {
    reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reader_serial_number(),
      GetArena());
  }
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_serial_number().empty()) {
    device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_serial_number(),
      GetArena());
  }
  ksn_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ksn_data().empty()) {
    ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ksn_data(),
      GetArena());
  }
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_id().empty()) {
    line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_line_id(),
      GetArena());
  }
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vehicle_id(),
      GetArena());
  }
  if (from._internal_has_register_date()) {
    register_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.register_date_);
  } else {
    register_date_ = nullptr;
  }
  ::memcpy(&register_code_, &from.register_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptance_list_version_) -
    reinterpret_cast<char*>(&register_code_)) + sizeof(acceptance_list_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.AcceptanceListRequest)
}

void AcceptanceListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptanceListRequest_acceptance_2dlist_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ksn_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&register_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_list_version_) -
      reinterpret_cast<char*>(&register_date_)) + sizeof(acceptance_list_version_));
}

AcceptanceListRequest::~AcceptanceListRequest() {
  // @@protoc_insertion_point(destructor:axis.transactions.AcceptanceListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptanceListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ksn_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete register_date_;
}

void AcceptanceListRequest::ArenaDtor(void* object) {
  AcceptanceListRequest* _this = reinterpret_cast< AcceptanceListRequest* >(object);
  (void)_this;
}
void AcceptanceListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptanceListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptanceListRequest& AcceptanceListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptanceListRequest_acceptance_2dlist_2eproto.base);
  return *internal_default_instance();
}


void AcceptanceListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.AcceptanceListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ksn_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
  ::memset(&register_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_list_version_) -
      reinterpret_cast<char*>(&register_code_)) + sizeof(acceptance_list_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptanceListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.operator_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reader_serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reader_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.reader_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.device_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ksn_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ksn_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 register_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          register_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_line_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.line_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vehicle_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.AcceptanceListRequest.vehicle_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp register_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acceptance_list_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          acceptance_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptanceListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.AcceptanceListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string operator_id = 2;
  if (this->operator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_id().data(), static_cast<int>(this->_internal_operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.operator_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_id(), target);
  }

  // string reader_serial_number = 3;
  if (this->reader_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reader_serial_number().data(), static_cast<int>(this->_internal_reader_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.reader_serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reader_serial_number(), target);
  }

  // string device_serial_number = 4;
  if (this->device_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_serial_number().data(), static_cast<int>(this->_internal_device_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.device_serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_serial_number(), target);
  }

  // bytes ksn_data = 5;
  if (this->ksn_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ksn_data(), target);
  }

  // int32 register_code = 6;
  if (this->register_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_register_code(), target);
  }

  // string line_id = 7;
  if (this->line_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_id().data(), static_cast<int>(this->_internal_line_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.line_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_line_id(), target);
  }

  // string vehicle_id = 8;
  if (this->vehicle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.AcceptanceListRequest.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vehicle_id(), target);
  }

  // .google.protobuf.Timestamp register_date = 9;
  if (this->has_register_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::register_date(this), target, stream);
  }

  // int32 acceptance_list_version = 10;
  if (this->acceptance_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_acceptance_list_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.AcceptanceListRequest)
  return target;
}

size_t AcceptanceListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.AcceptanceListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string operator_id = 2;
  if (this->operator_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_id());
  }

  // string reader_serial_number = 3;
  if (this->reader_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reader_serial_number());
  }

  // string device_serial_number = 4;
  if (this->device_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_serial_number());
  }

  // bytes ksn_data = 5;
  if (this->ksn_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ksn_data());
  }

  // string line_id = 7;
  if (this->line_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_id());
  }

  // string vehicle_id = 8;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // .google.protobuf.Timestamp register_date = 9;
  if (this->has_register_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *register_date_);
  }

  // int32 register_code = 6;
  if (this->register_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_register_code());
  }

  // int32 acceptance_list_version = 10;
  if (this->acceptance_list_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acceptance_list_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptanceListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.AcceptanceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptanceListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptanceListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.AcceptanceListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.AcceptanceListRequest)
    MergeFrom(*source);
  }
}

void AcceptanceListRequest::MergeFrom(const AcceptanceListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.AcceptanceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.operator_id().size() > 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.reader_serial_number().size() > 0) {
    _internal_set_reader_serial_number(from._internal_reader_serial_number());
  }
  if (from.device_serial_number().size() > 0) {
    _internal_set_device_serial_number(from._internal_device_serial_number());
  }
  if (from.ksn_data().size() > 0) {
    _internal_set_ksn_data(from._internal_ksn_data());
  }
  if (from.line_id().size() > 0) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (from.vehicle_id().size() > 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from.has_register_date()) {
    _internal_mutable_register_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_register_date());
  }
  if (from.register_code() != 0) {
    _internal_set_register_code(from._internal_register_code());
  }
  if (from.acceptance_list_version() != 0) {
    _internal_set_acceptance_list_version(from._internal_acceptance_list_version());
  }
}

void AcceptanceListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.AcceptanceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceListRequest::CopyFrom(const AcceptanceListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.AcceptanceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceListRequest::IsInitialized() const {
  return true;
}

void AcceptanceListRequest::InternalSwap(AcceptanceListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_id_.Swap(&other->operator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_serial_number_.Swap(&other->reader_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_number_.Swap(&other->device_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ksn_data_.Swap(&other->ksn_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_id_.Swap(&other->line_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.Swap(&other->vehicle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptanceListRequest, acceptance_list_version_)
      + sizeof(AcceptanceListRequest::acceptance_list_version_)
      - PROTOBUF_FIELD_OFFSET(AcceptanceListRequest, register_date_)>(
          reinterpret_cast<char*>(&register_date_),
          reinterpret_cast<char*>(&other->register_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptanceListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptanceListResponse::InitAsDefaultInstance() {
  ::axis::transactions::_AcceptanceListResponse_default_instance_._instance.get_mutable()->pan_list_ = const_cast< ::axis::transactions::PrimaryAccountNumberWhiteList*>(
      ::axis::transactions::PrimaryAccountNumberWhiteList::internal_default_instance());
  ::axis::transactions::_AcceptanceListResponse_default_instance_._instance.get_mutable()->par_list_ = const_cast< ::axis::transactions::PrimaryAccountReferenceWhiteList*>(
      ::axis::transactions::PrimaryAccountReferenceWhiteList::internal_default_instance());
  ::axis::transactions::_AcceptanceListResponse_default_instance_._instance.get_mutable()->register_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class AcceptanceListResponse::_Internal {
 public:
  static const ::axis::transactions::PrimaryAccountNumberWhiteList& pan_list(const AcceptanceListResponse* msg);
  static const ::axis::transactions::PrimaryAccountReferenceWhiteList& par_list(const AcceptanceListResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& register_date(const AcceptanceListResponse* msg);
};

const ::axis::transactions::PrimaryAccountNumberWhiteList&
AcceptanceListResponse::_Internal::pan_list(const AcceptanceListResponse* msg) {
  return *msg->pan_list_;
}
const ::axis::transactions::PrimaryAccountReferenceWhiteList&
AcceptanceListResponse::_Internal::par_list(const AcceptanceListResponse* msg) {
  return *msg->par_list_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
AcceptanceListResponse::_Internal::register_date(const AcceptanceListResponse* msg) {
  return *msg->register_date_;
}
void AcceptanceListResponse::clear_pan_list() {
  if (GetArena() == nullptr && pan_list_ != nullptr) {
    delete pan_list_;
  }
  pan_list_ = nullptr;
}
void AcceptanceListResponse::clear_par_list() {
  if (GetArena() == nullptr && par_list_ != nullptr) {
    delete par_list_;
  }
  par_list_ = nullptr;
}
void AcceptanceListResponse::clear_register_date() {
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
}
AcceptanceListResponse::AcceptanceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.AcceptanceListResponse)
}
AcceptanceListResponse::AcceptanceListResponse(const AcceptanceListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pan_list()) {
    pan_list_ = new ::axis::transactions::PrimaryAccountNumberWhiteList(*from.pan_list_);
  } else {
    pan_list_ = nullptr;
  }
  if (from._internal_has_par_list()) {
    par_list_ = new ::axis::transactions::PrimaryAccountReferenceWhiteList(*from.par_list_);
  } else {
    par_list_ = nullptr;
  }
  if (from._internal_has_register_date()) {
    register_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.register_date_);
  } else {
    register_date_ = nullptr;
  }
  ::memcpy(&response_code_, &from.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptance_list_version_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(acceptance_list_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.AcceptanceListResponse)
}

void AcceptanceListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptanceListResponse_acceptance_2dlist_2eproto.base);
  ::memset(&pan_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_list_version_) -
      reinterpret_cast<char*>(&pan_list_)) + sizeof(acceptance_list_version_));
}

AcceptanceListResponse::~AcceptanceListResponse() {
  // @@protoc_insertion_point(destructor:axis.transactions.AcceptanceListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptanceListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pan_list_;
  if (this != internal_default_instance()) delete par_list_;
  if (this != internal_default_instance()) delete register_date_;
}

void AcceptanceListResponse::ArenaDtor(void* object) {
  AcceptanceListResponse* _this = reinterpret_cast< AcceptanceListResponse* >(object);
  (void)_this;
}
void AcceptanceListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptanceListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptanceListResponse& AcceptanceListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptanceListResponse_acceptance_2dlist_2eproto.base);
  return *internal_default_instance();
}


void AcceptanceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.AcceptanceListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pan_list_ != nullptr) {
    delete pan_list_;
  }
  pan_list_ = nullptr;
  if (GetArena() == nullptr && par_list_ != nullptr) {
    delete par_list_;
  }
  par_list_ = nullptr;
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_list_version_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(acceptance_list_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptanceListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acceptance_list_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          acceptance_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .axis.transactions.PrimaryAccountNumberWhiteList pan_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pan_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .axis.transactions.PrimaryAccountReferenceWhiteList par_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_par_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp register_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptanceListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.AcceptanceListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 response_code = 1;
  if (this->response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_response_code(), target);
  }

  // int32 acceptance_list_version = 2;
  if (this->acceptance_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_acceptance_list_version(), target);
  }

  // .axis.transactions.PrimaryAccountNumberWhiteList pan_list = 3;
  if (this->has_pan_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pan_list(this), target, stream);
  }

  // .axis.transactions.PrimaryAccountReferenceWhiteList par_list = 4;
  if (this->has_par_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::par_list(this), target, stream);
  }

  // .google.protobuf.Timestamp register_date = 5;
  if (this->has_register_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::register_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.AcceptanceListResponse)
  return target;
}

size_t AcceptanceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.AcceptanceListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .axis.transactions.PrimaryAccountNumberWhiteList pan_list = 3;
  if (this->has_pan_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pan_list_);
  }

  // .axis.transactions.PrimaryAccountReferenceWhiteList par_list = 4;
  if (this->has_par_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *par_list_);
  }

  // .google.protobuf.Timestamp register_date = 5;
  if (this->has_register_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *register_date_);
  }

  // int32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_response_code());
  }

  // int32 acceptance_list_version = 2;
  if (this->acceptance_list_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acceptance_list_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptanceListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.AcceptanceListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptanceListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptanceListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.AcceptanceListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.AcceptanceListResponse)
    MergeFrom(*source);
  }
}

void AcceptanceListResponse::MergeFrom(const AcceptanceListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.AcceptanceListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pan_list()) {
    _internal_mutable_pan_list()->::axis::transactions::PrimaryAccountNumberWhiteList::MergeFrom(from._internal_pan_list());
  }
  if (from.has_par_list()) {
    _internal_mutable_par_list()->::axis::transactions::PrimaryAccountReferenceWhiteList::MergeFrom(from._internal_par_list());
  }
  if (from.has_register_date()) {
    _internal_mutable_register_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_register_date());
  }
  if (from.response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
  if (from.acceptance_list_version() != 0) {
    _internal_set_acceptance_list_version(from._internal_acceptance_list_version());
  }
}

void AcceptanceListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.AcceptanceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceListResponse::CopyFrom(const AcceptanceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.AcceptanceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceListResponse::IsInitialized() const {
  return true;
}

void AcceptanceListResponse::InternalSwap(AcceptanceListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptanceListResponse, acceptance_list_version_)
      + sizeof(AcceptanceListResponse::acceptance_list_version_)
      - PROTOBUF_FIELD_OFFSET(AcceptanceListResponse, pan_list_)>(
          reinterpret_cast<char*>(&pan_list_),
          reinterpret_cast<char*>(&other->pan_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptanceListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::AcceptanceListRequest* Arena::CreateMaybeMessage< ::axis::transactions::AcceptanceListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::AcceptanceListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::AcceptanceListResponse* Arena::CreateMaybeMessage< ::axis::transactions::AcceptanceListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::AcceptanceListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
