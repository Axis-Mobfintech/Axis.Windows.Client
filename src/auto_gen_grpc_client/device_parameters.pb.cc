// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_parameters.proto

#include "device_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Protos_2faccepted_5fbin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptedBankIdentificationNumber_Protos_2faccepted_5fbin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Protos_2fapplication_5fidentifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationIdentifier_Protos_2fapplication_5fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Protos_2fcapk_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace axis {
namespace transactions {
class ParametersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParametersRequest> _instance;
} _ParametersRequest_default_instance_;
class ParametersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParametersResponse> _instance;
} _ParametersResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
static void InitDefaultsscc_info_ParametersRequest_device_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_ParametersRequest_default_instance_;
    new (ptr) ::axis::transactions::ParametersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::ParametersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParametersRequest_device_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParametersRequest_device_5fparameters_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ParametersResponse_device_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_ParametersResponse_default_instance_;
    new (ptr) ::axis::transactions::ParametersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::ParametersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ParametersResponse_device_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ParametersResponse_device_5fparameters_2eproto}, {
      &scc_info_ApplicationIdentifier_Protos_2fapplication_5fidentifier_2eproto.base,
      &scc_info_AcceptedBankIdentificationNumber_Protos_2faccepted_5fbin_2eproto.base,
      &scc_info_CertificateAuthorityPublicKeyTable_Protos_2fcapk_5ftable_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_device_5fparameters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_device_5fparameters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_device_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_device_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, operator_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, reader_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, device_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, ksn_data_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, register_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, line_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, register_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, emv_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, bin_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersRequest, capk_parameters_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, emv_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, bin_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, aid_table_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, bin_table_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, capk_table_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::ParametersResponse, response_date_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::axis::transactions::ParametersRequest)},
  { 17, -1, sizeof(::axis::transactions::ParametersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_ParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_ParametersResponse_default_instance_),
};

const char descriptor_table_protodef_device_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027device_parameters.proto\022\021axis.transact"
  "ions\032\037google/protobuf/timestamp.proto\032\031P"
  "rotos/accepted_bin.proto\032#Protos/applica"
  "tion_identifier.proto\032\027Protos/capk_table"
  ".proto\"\331\002\n\021ParametersRequest\022\021\n\tdevice_i"
  "d\030\001 \001(\t\022\023\n\013operator_id\030\002 \001(\t\022\034\n\024reader_s"
  "erial_number\030\003 \001(\t\022\034\n\024device_serial_numb"
  "er\030\004 \001(\t\022\020\n\010ksn_data\030\005 \001(\014\022\025\n\rregister_c"
  "ode\030\006 \001(\005\022\017\n\007line_id\030\007 \001(\t\022\022\n\nvehicle_id"
  "\030\010 \001(\t\0221\n\rregister_date\030\t \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\036\n\026emv_parameters_vers"
  "ion\030\n \001(\005\022\036\n\026bin_parameters_version\030\013 \001("
  "\005\022\037\n\027capk_parameters_version\030\014 \001(\005\"\356\002\n\022P"
  "arametersResponse\022\025\n\rresponse_code\030\001 \001(\005"
  "\022\036\n\026emv_parameters_version\030\002 \001(\005\022\036\n\026bin_"
  "parameters_version\030\003 \001(\005\022;\n\taid_table\030\004 "
  "\003(\0132(.axis.transactions.ApplicationIdent"
  "ifier\022F\n\tbin_table\030\005 \003(\01323.axis.transact"
  "ions.AcceptedBankIdentificationNumber\022I\n"
  "\ncapk_table\030\006 \003(\01325.axis.transactions.Ce"
  "rtificateAuthorityPublicKeyTable\0221\n\rresp"
  "onse_date\030\007 \001(\0132\032.google.protobuf.Timest"
  "amp2}\n\027DeviceParametersService\022b\n\023GetDev"
  "iceParameters\022$.axis.transactions.Parame"
  "tersRequest\032%.axis.transactions.Paramete"
  "rsResponseBQ\n#com.axismobfintech.gpb.tra"
  "nsactionsZ\022axistransactionspb\252\002\025Axis.GPB"
  ".Transactionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_device_5fparameters_2eproto_deps[4] = {
  &::descriptor_table_Protos_2faccepted_5fbin_2eproto,
  &::descriptor_table_Protos_2fapplication_5fidentifier_2eproto,
  &::descriptor_table_Protos_2fcapk_5ftable_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_device_5fparameters_2eproto_sccs[2] = {
  &scc_info_ParametersRequest_device_5fparameters_2eproto.base,
  &scc_info_ParametersResponse_device_5fparameters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_device_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_5fparameters_2eproto = {
  false, false, descriptor_table_protodef_device_5fparameters_2eproto, "device_parameters.proto", 1101,
  &descriptor_table_device_5fparameters_2eproto_once, descriptor_table_device_5fparameters_2eproto_sccs, descriptor_table_device_5fparameters_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_device_5fparameters_2eproto::offsets,
  file_level_metadata_device_5fparameters_2eproto, 2, file_level_enum_descriptors_device_5fparameters_2eproto, file_level_service_descriptors_device_5fparameters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_device_5fparameters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_device_5fparameters_2eproto)), true);
namespace axis {
namespace transactions {

// ===================================================================

void ParametersRequest::InitAsDefaultInstance() {
  ::axis::transactions::_ParametersRequest_default_instance_._instance.get_mutable()->register_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ParametersRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& register_date(const ParametersRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ParametersRequest::_Internal::register_date(const ParametersRequest* msg) {
  return *msg->register_date_;
}
void ParametersRequest::clear_register_date() {
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
}
ParametersRequest::ParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.ParametersRequest)
}
ParametersRequest::ParametersRequest(const ParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_id().empty()) {
    operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_id(),
      GetArena());
  }
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reader_serial_number().empty()) {
    reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reader_serial_number(),
      GetArena());
  }
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_serial_number().empty()) {
    device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_serial_number(),
      GetArena());
  }
  ksn_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ksn_data().empty()) {
    ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ksn_data(),
      GetArena());
  }
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_id().empty()) {
    line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_line_id(),
      GetArena());
  }
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vehicle_id(),
      GetArena());
  }
  if (from._internal_has_register_date()) {
    register_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.register_date_);
  } else {
    register_date_ = nullptr;
  }
  ::memcpy(&register_code_, &from.register_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&capk_parameters_version_) -
    reinterpret_cast<char*>(&register_code_)) + sizeof(capk_parameters_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.ParametersRequest)
}

void ParametersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParametersRequest_device_5fparameters_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ksn_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&register_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capk_parameters_version_) -
      reinterpret_cast<char*>(&register_date_)) + sizeof(capk_parameters_version_));
}

ParametersRequest::~ParametersRequest() {
  // @@protoc_insertion_point(destructor:axis.transactions.ParametersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ksn_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete register_date_;
}

void ParametersRequest::ArenaDtor(void* object) {
  ParametersRequest* _this = reinterpret_cast< ParametersRequest* >(object);
  (void)_this;
}
void ParametersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParametersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParametersRequest& ParametersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParametersRequest_device_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void ParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.ParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ksn_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
  ::memset(&register_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capk_parameters_version_) -
      reinterpret_cast<char*>(&register_code_)) + sizeof(capk_parameters_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParametersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.ParametersRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.ParametersRequest.operator_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reader_serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reader_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.ParametersRequest.reader_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.ParametersRequest.device_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ksn_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ksn_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 register_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          register_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_line_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.ParametersRequest.line_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vehicle_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.ParametersRequest.vehicle_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp register_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 emv_parameters_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          emv_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bin_parameters_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bin_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capk_parameters_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          capk_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParametersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.ParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.ParametersRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string operator_id = 2;
  if (this->operator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_id().data(), static_cast<int>(this->_internal_operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.ParametersRequest.operator_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_id(), target);
  }

  // string reader_serial_number = 3;
  if (this->reader_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reader_serial_number().data(), static_cast<int>(this->_internal_reader_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.ParametersRequest.reader_serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reader_serial_number(), target);
  }

  // string device_serial_number = 4;
  if (this->device_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_serial_number().data(), static_cast<int>(this->_internal_device_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.ParametersRequest.device_serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_serial_number(), target);
  }

  // bytes ksn_data = 5;
  if (this->ksn_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ksn_data(), target);
  }

  // int32 register_code = 6;
  if (this->register_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_register_code(), target);
  }

  // string line_id = 7;
  if (this->line_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_id().data(), static_cast<int>(this->_internal_line_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.ParametersRequest.line_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_line_id(), target);
  }

  // string vehicle_id = 8;
  if (this->vehicle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.ParametersRequest.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vehicle_id(), target);
  }

  // .google.protobuf.Timestamp register_date = 9;
  if (this->has_register_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::register_date(this), target, stream);
  }

  // int32 emv_parameters_version = 10;
  if (this->emv_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_emv_parameters_version(), target);
  }

  // int32 bin_parameters_version = 11;
  if (this->bin_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_bin_parameters_version(), target);
  }

  // int32 capk_parameters_version = 12;
  if (this->capk_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_capk_parameters_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.ParametersRequest)
  return target;
}

size_t ParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.ParametersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string operator_id = 2;
  if (this->operator_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_id());
  }

  // string reader_serial_number = 3;
  if (this->reader_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reader_serial_number());
  }

  // string device_serial_number = 4;
  if (this->device_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_serial_number());
  }

  // bytes ksn_data = 5;
  if (this->ksn_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ksn_data());
  }

  // string line_id = 7;
  if (this->line_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_id());
  }

  // string vehicle_id = 8;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // .google.protobuf.Timestamp register_date = 9;
  if (this->has_register_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *register_date_);
  }

  // int32 register_code = 6;
  if (this->register_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_register_code());
  }

  // int32 emv_parameters_version = 10;
  if (this->emv_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_emv_parameters_version());
  }

  // int32 bin_parameters_version = 11;
  if (this->bin_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin_parameters_version());
  }

  // int32 capk_parameters_version = 12;
  if (this->capk_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capk_parameters_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParametersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.ParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParametersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParametersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.ParametersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.ParametersRequest)
    MergeFrom(*source);
  }
}

void ParametersRequest::MergeFrom(const ParametersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.ParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.operator_id().size() > 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.reader_serial_number().size() > 0) {
    _internal_set_reader_serial_number(from._internal_reader_serial_number());
  }
  if (from.device_serial_number().size() > 0) {
    _internal_set_device_serial_number(from._internal_device_serial_number());
  }
  if (from.ksn_data().size() > 0) {
    _internal_set_ksn_data(from._internal_ksn_data());
  }
  if (from.line_id().size() > 0) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (from.vehicle_id().size() > 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from.has_register_date()) {
    _internal_mutable_register_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_register_date());
  }
  if (from.register_code() != 0) {
    _internal_set_register_code(from._internal_register_code());
  }
  if (from.emv_parameters_version() != 0) {
    _internal_set_emv_parameters_version(from._internal_emv_parameters_version());
  }
  if (from.bin_parameters_version() != 0) {
    _internal_set_bin_parameters_version(from._internal_bin_parameters_version());
  }
  if (from.capk_parameters_version() != 0) {
    _internal_set_capk_parameters_version(from._internal_capk_parameters_version());
  }
}

void ParametersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.ParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParametersRequest::CopyFrom(const ParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.ParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParametersRequest::IsInitialized() const {
  return true;
}

void ParametersRequest::InternalSwap(ParametersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_id_.Swap(&other->operator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reader_serial_number_.Swap(&other->reader_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_number_.Swap(&other->device_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ksn_data_.Swap(&other->ksn_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_id_.Swap(&other->line_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.Swap(&other->vehicle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParametersRequest, capk_parameters_version_)
      + sizeof(ParametersRequest::capk_parameters_version_)
      - PROTOBUF_FIELD_OFFSET(ParametersRequest, register_date_)>(
          reinterpret_cast<char*>(&register_date_),
          reinterpret_cast<char*>(&other->register_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParametersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParametersResponse::InitAsDefaultInstance() {
  ::axis::transactions::_ParametersResponse_default_instance_._instance.get_mutable()->response_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ParametersResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& response_date(const ParametersResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ParametersResponse::_Internal::response_date(const ParametersResponse* msg) {
  return *msg->response_date_;
}
void ParametersResponse::clear_aid_table() {
  aid_table_.Clear();
}
void ParametersResponse::clear_bin_table() {
  bin_table_.Clear();
}
void ParametersResponse::clear_capk_table() {
  capk_table_.Clear();
}
void ParametersResponse::clear_response_date() {
  if (GetArena() == nullptr && response_date_ != nullptr) {
    delete response_date_;
  }
  response_date_ = nullptr;
}
ParametersResponse::ParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  aid_table_(arena),
  bin_table_(arena),
  capk_table_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.ParametersResponse)
}
ParametersResponse::ParametersResponse(const ParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aid_table_(from.aid_table_),
      bin_table_(from.bin_table_),
      capk_table_(from.capk_table_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response_date()) {
    response_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.response_date_);
  } else {
    response_date_ = nullptr;
  }
  ::memcpy(&response_code_, &from.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&bin_parameters_version_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(bin_parameters_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.ParametersResponse)
}

void ParametersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParametersResponse_device_5fparameters_2eproto.base);
  ::memset(&response_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_parameters_version_) -
      reinterpret_cast<char*>(&response_date_)) + sizeof(bin_parameters_version_));
}

ParametersResponse::~ParametersResponse() {
  // @@protoc_insertion_point(destructor:axis.transactions.ParametersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete response_date_;
}

void ParametersResponse::ArenaDtor(void* object) {
  ParametersResponse* _this = reinterpret_cast< ParametersResponse* >(object);
  (void)_this;
}
void ParametersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParametersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParametersResponse& ParametersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParametersResponse_device_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void ParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.ParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aid_table_.Clear();
  bin_table_.Clear();
  capk_table_.Clear();
  if (GetArena() == nullptr && response_date_ != nullptr) {
    delete response_date_;
  }
  response_date_ = nullptr;
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_parameters_version_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(bin_parameters_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParametersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 emv_parameters_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          emv_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bin_parameters_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bin_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .axis.transactions.ApplicationIdentifier aid_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aid_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .axis.transactions.AcceptedBankIdentificationNumber bin_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bin_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .axis.transactions.CertificateAuthorityPublicKeyTable capk_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capk_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp response_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParametersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.ParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 response_code = 1;
  if (this->response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_response_code(), target);
  }

  // int32 emv_parameters_version = 2;
  if (this->emv_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_emv_parameters_version(), target);
  }

  // int32 bin_parameters_version = 3;
  if (this->bin_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bin_parameters_version(), target);
  }

  // repeated .axis.transactions.ApplicationIdentifier aid_table = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aid_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_aid_table(i), target, stream);
  }

  // repeated .axis.transactions.AcceptedBankIdentificationNumber bin_table = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bin_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_bin_table(i), target, stream);
  }

  // repeated .axis.transactions.CertificateAuthorityPublicKeyTable capk_table = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capk_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_capk_table(i), target, stream);
  }

  // .google.protobuf.Timestamp response_date = 7;
  if (this->has_response_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::response_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.ParametersResponse)
  return target;
}

size_t ParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.ParametersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .axis.transactions.ApplicationIdentifier aid_table = 4;
  total_size += 1UL * this->_internal_aid_table_size();
  for (const auto& msg : this->aid_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .axis.transactions.AcceptedBankIdentificationNumber bin_table = 5;
  total_size += 1UL * this->_internal_bin_table_size();
  for (const auto& msg : this->bin_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .axis.transactions.CertificateAuthorityPublicKeyTable capk_table = 6;
  total_size += 1UL * this->_internal_capk_table_size();
  for (const auto& msg : this->capk_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp response_date = 7;
  if (this->has_response_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_date_);
  }

  // int32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_response_code());
  }

  // int32 emv_parameters_version = 2;
  if (this->emv_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_emv_parameters_version());
  }

  // int32 bin_parameters_version = 3;
  if (this->bin_parameters_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin_parameters_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParametersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.ParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ParametersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParametersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.ParametersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.ParametersResponse)
    MergeFrom(*source);
  }
}

void ParametersResponse::MergeFrom(const ParametersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.ParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aid_table_.MergeFrom(from.aid_table_);
  bin_table_.MergeFrom(from.bin_table_);
  capk_table_.MergeFrom(from.capk_table_);
  if (from.has_response_date()) {
    _internal_mutable_response_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_response_date());
  }
  if (from.response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
  if (from.emv_parameters_version() != 0) {
    _internal_set_emv_parameters_version(from._internal_emv_parameters_version());
  }
  if (from.bin_parameters_version() != 0) {
    _internal_set_bin_parameters_version(from._internal_bin_parameters_version());
  }
}

void ParametersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.ParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParametersResponse::CopyFrom(const ParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.ParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParametersResponse::IsInitialized() const {
  return true;
}

void ParametersResponse::InternalSwap(ParametersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  aid_table_.InternalSwap(&other->aid_table_);
  bin_table_.InternalSwap(&other->bin_table_);
  capk_table_.InternalSwap(&other->capk_table_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParametersResponse, bin_parameters_version_)
      + sizeof(ParametersResponse::bin_parameters_version_)
      - PROTOBUF_FIELD_OFFSET(ParametersResponse, response_date_)>(
          reinterpret_cast<char*>(&response_date_),
          reinterpret_cast<char*>(&other->response_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParametersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::ParametersRequest* Arena::CreateMaybeMessage< ::axis::transactions::ParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::ParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::ParametersResponse* Arena::CreateMaybeMessage< ::axis::transactions::ParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::ParametersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
