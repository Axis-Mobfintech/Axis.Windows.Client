// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logs/protos/par-restriction-list.proto

#include "logs/protos/par-restriction-list.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace axis {
namespace transactions {
class PrimaryAccountReferenceBlackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrimaryAccountReferenceBlackList> _instance;
} _PrimaryAccountReferenceBlackList_default_instance_;
}  // namespace transactions
}  // namespace axis
static void InitDefaultsscc_info_PrimaryAccountReferenceBlackList_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::axis::transactions::_PrimaryAccountReferenceBlackList_default_instance_;
    new (ptr) ::axis::transactions::PrimaryAccountReferenceBlackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::axis::transactions::PrimaryAccountReferenceBlackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrimaryAccountReferenceBlackList_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrimaryAccountReferenceBlackList_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::PrimaryAccountReferenceBlackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::PrimaryAccountReferenceBlackList, message_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::PrimaryAccountReferenceBlackList, index_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::PrimaryAccountReferenceBlackList, reason_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::PrimaryAccountReferenceBlackList, register_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::PrimaryAccountReferenceBlackList, payment_account_reference_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::axis::transactions::PrimaryAccountReferenceBlackList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_PrimaryAccountReferenceBlackList_default_instance_),
};

const char descriptor_table_protodef_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&logs/protos/par-restriction-list.proto"
  "\022\021axis.transactions\032\037google/protobuf/tim"
  "estamp.proto\"\253\001\n PrimaryAccountReference"
  "BlackList\022\022\n\nmessage_id\030\001 \001(\005\022\r\n\005index\030\002"
  " \001(\005\022\016\n\006reason\030\003 \001(\005\0221\n\rregister_date\030\004 "
  "\001(\0132\032.google.protobuf.Timestamp\022!\n\031payme"
  "nt_account_reference\030\005 \001(\tBQ\n#com.axismo"
  "bfintech.gpb.transactionsZ\022axistransacti"
  "onspb\252\002\025Axis.GPB.Transactionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto_sccs[1] = {
  &scc_info_PrimaryAccountReferenceBlackList_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto = {
  false, false, descriptor_table_protodef_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto, "logs/protos/par-restriction-list.proto", 357,
  &descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto_once, descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto_sccs, descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto::offsets,
  file_level_metadata_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto, 1, file_level_enum_descriptors_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto, file_level_service_descriptors_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto)), true);
namespace axis {
namespace transactions {

// ===================================================================

void PrimaryAccountReferenceBlackList::InitAsDefaultInstance() {
  ::axis::transactions::_PrimaryAccountReferenceBlackList_default_instance_._instance.get_mutable()->register_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PrimaryAccountReferenceBlackList::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& register_date(const PrimaryAccountReferenceBlackList* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PrimaryAccountReferenceBlackList::_Internal::register_date(const PrimaryAccountReferenceBlackList* msg) {
  return *msg->register_date_;
}
void PrimaryAccountReferenceBlackList::clear_register_date() {
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
}
PrimaryAccountReferenceBlackList::PrimaryAccountReferenceBlackList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:axis.transactions.PrimaryAccountReferenceBlackList)
}
PrimaryAccountReferenceBlackList::PrimaryAccountReferenceBlackList(const PrimaryAccountReferenceBlackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payment_account_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_account_reference().empty()) {
    payment_account_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payment_account_reference(),
      GetArena());
  }
  if (from._internal_has_register_date()) {
    register_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.register_date_);
  } else {
    register_date_ = nullptr;
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.PrimaryAccountReferenceBlackList)
}

void PrimaryAccountReferenceBlackList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrimaryAccountReferenceBlackList_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto.base);
  payment_account_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&register_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&register_date_)) + sizeof(reason_));
}

PrimaryAccountReferenceBlackList::~PrimaryAccountReferenceBlackList() {
  // @@protoc_insertion_point(destructor:axis.transactions.PrimaryAccountReferenceBlackList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrimaryAccountReferenceBlackList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payment_account_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete register_date_;
}

void PrimaryAccountReferenceBlackList::ArenaDtor(void* object) {
  PrimaryAccountReferenceBlackList* _this = reinterpret_cast< PrimaryAccountReferenceBlackList* >(object);
  (void)_this;
}
void PrimaryAccountReferenceBlackList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimaryAccountReferenceBlackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrimaryAccountReferenceBlackList& PrimaryAccountReferenceBlackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrimaryAccountReferenceBlackList_logs_2fprotos_2fpar_2drestriction_2dlist_2eproto.base);
  return *internal_default_instance();
}


void PrimaryAccountReferenceBlackList::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.PrimaryAccountReferenceBlackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_account_reference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && register_date_ != nullptr) {
    delete register_date_;
  }
  register_date_ = nullptr;
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimaryAccountReferenceBlackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp register_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_account_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payment_account_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrimaryAccountReferenceBlackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.PrimaryAccountReferenceBlackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_message_id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 reason = 3;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reason(), target);
  }

  // .google.protobuf.Timestamp register_date = 4;
  if (this->has_register_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::register_date(this), target, stream);
  }

  // string payment_account_reference = 5;
  if (this->payment_account_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_account_reference().data(), static_cast<int>(this->_internal_payment_account_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payment_account_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.PrimaryAccountReferenceBlackList)
  return target;
}

size_t PrimaryAccountReferenceBlackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.PrimaryAccountReferenceBlackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payment_account_reference = 5;
  if (this->payment_account_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_account_reference());
  }

  // .google.protobuf.Timestamp register_date = 4;
  if (this->has_register_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *register_date_);
  }

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimaryAccountReferenceBlackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:axis.transactions.PrimaryAccountReferenceBlackList)
  GOOGLE_DCHECK_NE(&from, this);
  const PrimaryAccountReferenceBlackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrimaryAccountReferenceBlackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:axis.transactions.PrimaryAccountReferenceBlackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:axis.transactions.PrimaryAccountReferenceBlackList)
    MergeFrom(*source);
  }
}

void PrimaryAccountReferenceBlackList::MergeFrom(const PrimaryAccountReferenceBlackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.PrimaryAccountReferenceBlackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_account_reference().size() > 0) {
    _internal_set_payment_account_reference(from._internal_payment_account_reference());
  }
  if (from.has_register_date()) {
    _internal_mutable_register_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_register_date());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void PrimaryAccountReferenceBlackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:axis.transactions.PrimaryAccountReferenceBlackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimaryAccountReferenceBlackList::CopyFrom(const PrimaryAccountReferenceBlackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.PrimaryAccountReferenceBlackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimaryAccountReferenceBlackList::IsInitialized() const {
  return true;
}

void PrimaryAccountReferenceBlackList::InternalSwap(PrimaryAccountReferenceBlackList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payment_account_reference_.Swap(&other->payment_account_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimaryAccountReferenceBlackList, reason_)
      + sizeof(PrimaryAccountReferenceBlackList::reason_)
      - PROTOBUF_FIELD_OFFSET(PrimaryAccountReferenceBlackList, register_date_)>(
          reinterpret_cast<char*>(&register_date_),
          reinterpret_cast<char*>(&other->register_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimaryAccountReferenceBlackList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::PrimaryAccountReferenceBlackList* Arena::CreateMaybeMessage< ::axis::transactions::PrimaryAccountReferenceBlackList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::PrimaryAccountReferenceBlackList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
