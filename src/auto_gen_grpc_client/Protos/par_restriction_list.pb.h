// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos/par_restriction_list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protos_2fpar_5frestriction_5flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protos_2fpar_5frestriction_5flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protos_2fpar_5frestriction_5flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protos_2fpar_5frestriction_5flist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protos_2fpar_5frestriction_5flist_2eproto;
namespace axis {
namespace transactions {
class PrimaryAccountReferenceBlackList;
class PrimaryAccountReferenceBlackListDefaultTypeInternal;
extern PrimaryAccountReferenceBlackListDefaultTypeInternal _PrimaryAccountReferenceBlackList_default_instance_;
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> ::axis::transactions::PrimaryAccountReferenceBlackList* Arena::CreateMaybeMessage<::axis::transactions::PrimaryAccountReferenceBlackList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace axis {
namespace transactions {

// ===================================================================

class PrimaryAccountReferenceBlackList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.PrimaryAccountReferenceBlackList) */ {
 public:
  inline PrimaryAccountReferenceBlackList() : PrimaryAccountReferenceBlackList(nullptr) {}
  virtual ~PrimaryAccountReferenceBlackList();

  PrimaryAccountReferenceBlackList(const PrimaryAccountReferenceBlackList& from);
  PrimaryAccountReferenceBlackList(PrimaryAccountReferenceBlackList&& from) noexcept
    : PrimaryAccountReferenceBlackList() {
    *this = ::std::move(from);
  }

  inline PrimaryAccountReferenceBlackList& operator=(const PrimaryAccountReferenceBlackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimaryAccountReferenceBlackList& operator=(PrimaryAccountReferenceBlackList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrimaryAccountReferenceBlackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimaryAccountReferenceBlackList* internal_default_instance() {
    return reinterpret_cast<const PrimaryAccountReferenceBlackList*>(
               &_PrimaryAccountReferenceBlackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrimaryAccountReferenceBlackList& a, PrimaryAccountReferenceBlackList& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimaryAccountReferenceBlackList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimaryAccountReferenceBlackList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrimaryAccountReferenceBlackList* New() const final {
    return CreateMaybeMessage<PrimaryAccountReferenceBlackList>(nullptr);
  }

  PrimaryAccountReferenceBlackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrimaryAccountReferenceBlackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrimaryAccountReferenceBlackList& from);
  void MergeFrom(const PrimaryAccountReferenceBlackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimaryAccountReferenceBlackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.PrimaryAccountReferenceBlackList";
  }
  protected:
  explicit PrimaryAccountReferenceBlackList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protos_2fpar_5frestriction_5flist_2eproto);
    return ::descriptor_table_Protos_2fpar_5frestriction_5flist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentAccountReferenceFieldNumber = 5,
    kRegisterDateFieldNumber = 4,
    kMessageIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // string payment_account_reference = 5;
  void clear_payment_account_reference();
  const std::string& payment_account_reference() const;
  void set_payment_account_reference(const std::string& value);
  void set_payment_account_reference(std::string&& value);
  void set_payment_account_reference(const char* value);
  void set_payment_account_reference(const char* value, size_t size);
  std::string* mutable_payment_account_reference();
  std::string* release_payment_account_reference();
  void set_allocated_payment_account_reference(std::string* payment_account_reference);
  private:
  const std::string& _internal_payment_account_reference() const;
  void _internal_set_payment_account_reference(const std::string& value);
  std::string* _internal_mutable_payment_account_reference();
  public:

  // .google.protobuf.Timestamp register_date = 4;
  bool has_register_date() const;
  private:
  bool _internal_has_register_date() const;
  public:
  void clear_register_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_register_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_register_date();
  void set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_register_date();
  public:
  void unsafe_arena_set_allocated_register_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_register_date();

  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reason = 3;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::int32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.PrimaryAccountReferenceBlackList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_account_reference_;
  PROTOBUF_NAMESPACE_ID::Timestamp* register_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protos_2fpar_5frestriction_5flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrimaryAccountReferenceBlackList

// int32 message_id = 1;
inline void PrimaryAccountReferenceBlackList::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimaryAccountReferenceBlackList::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimaryAccountReferenceBlackList::message_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.PrimaryAccountReferenceBlackList.message_id)
  return _internal_message_id();
}
inline void PrimaryAccountReferenceBlackList::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void PrimaryAccountReferenceBlackList::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.PrimaryAccountReferenceBlackList.message_id)
}

// int32 index = 2;
inline void PrimaryAccountReferenceBlackList::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimaryAccountReferenceBlackList::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimaryAccountReferenceBlackList::index() const {
  // @@protoc_insertion_point(field_get:axis.transactions.PrimaryAccountReferenceBlackList.index)
  return _internal_index();
}
inline void PrimaryAccountReferenceBlackList::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void PrimaryAccountReferenceBlackList::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:axis.transactions.PrimaryAccountReferenceBlackList.index)
}

// int32 reason = 3;
inline void PrimaryAccountReferenceBlackList::clear_reason() {
  reason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimaryAccountReferenceBlackList::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimaryAccountReferenceBlackList::reason() const {
  // @@protoc_insertion_point(field_get:axis.transactions.PrimaryAccountReferenceBlackList.reason)
  return _internal_reason();
}
inline void PrimaryAccountReferenceBlackList::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reason_ = value;
}
inline void PrimaryAccountReferenceBlackList::set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:axis.transactions.PrimaryAccountReferenceBlackList.reason)
}

// .google.protobuf.Timestamp register_date = 4;
inline bool PrimaryAccountReferenceBlackList::_internal_has_register_date() const {
  return this != internal_default_instance() && register_date_ != nullptr;
}
inline bool PrimaryAccountReferenceBlackList::has_register_date() const {
  return _internal_has_register_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PrimaryAccountReferenceBlackList::_internal_register_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = register_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PrimaryAccountReferenceBlackList::register_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.PrimaryAccountReferenceBlackList.register_date)
  return _internal_register_date();
}
inline void PrimaryAccountReferenceBlackList::unsafe_arena_set_allocated_register_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  register_date_ = register_date;
  if (register_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.PrimaryAccountReferenceBlackList.register_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrimaryAccountReferenceBlackList::release_register_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrimaryAccountReferenceBlackList::unsafe_arena_release_register_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.PrimaryAccountReferenceBlackList.register_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrimaryAccountReferenceBlackList::_internal_mutable_register_date() {
  
  if (register_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    register_date_ = p;
  }
  return register_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrimaryAccountReferenceBlackList::mutable_register_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.PrimaryAccountReferenceBlackList.register_date)
  return _internal_mutable_register_date();
}
inline void PrimaryAccountReferenceBlackList::set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  if (register_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date)->GetArena();
    if (message_arena != submessage_arena) {
      register_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_date, submessage_arena);
    }
    
  } else {
    
  }
  register_date_ = register_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.PrimaryAccountReferenceBlackList.register_date)
}

// string payment_account_reference = 5;
inline void PrimaryAccountReferenceBlackList::clear_payment_account_reference() {
  payment_account_reference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrimaryAccountReferenceBlackList::payment_account_reference() const {
  // @@protoc_insertion_point(field_get:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
  return _internal_payment_account_reference();
}
inline void PrimaryAccountReferenceBlackList::set_payment_account_reference(const std::string& value) {
  _internal_set_payment_account_reference(value);
  // @@protoc_insertion_point(field_set:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
}
inline std::string* PrimaryAccountReferenceBlackList::mutable_payment_account_reference() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
  return _internal_mutable_payment_account_reference();
}
inline const std::string& PrimaryAccountReferenceBlackList::_internal_payment_account_reference() const {
  return payment_account_reference_.Get();
}
inline void PrimaryAccountReferenceBlackList::_internal_set_payment_account_reference(const std::string& value) {
  
  payment_account_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrimaryAccountReferenceBlackList::set_payment_account_reference(std::string&& value) {
  
  payment_account_reference_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
}
inline void PrimaryAccountReferenceBlackList::set_payment_account_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_account_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
}
inline void PrimaryAccountReferenceBlackList::set_payment_account_reference(const char* value,
    size_t size) {
  
  payment_account_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
}
inline std::string* PrimaryAccountReferenceBlackList::_internal_mutable_payment_account_reference() {
  
  return payment_account_reference_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrimaryAccountReferenceBlackList::release_payment_account_reference() {
  // @@protoc_insertion_point(field_release:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
  return payment_account_reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrimaryAccountReferenceBlackList::set_allocated_payment_account_reference(std::string* payment_account_reference) {
  if (payment_account_reference != nullptr) {
    
  } else {
    
  }
  payment_account_reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_account_reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.PrimaryAccountReferenceBlackList.payment_account_reference)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace transactions
}  // namespace axis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protos_2fpar_5frestriction_5flist_2eproto
