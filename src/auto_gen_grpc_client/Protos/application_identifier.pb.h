// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos/application_identifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protos_2fapplication_5fidentifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protos_2fapplication_5fidentifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protos_2fapplication_5fidentifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protos_2fapplication_5fidentifier_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protos_2fapplication_5fidentifier_2eproto;
namespace axis {
namespace transactions {
class ApplicationIdentifier;
class ApplicationIdentifierDefaultTypeInternal;
extern ApplicationIdentifierDefaultTypeInternal _ApplicationIdentifier_default_instance_;
class GeneralFlags;
class GeneralFlagsDefaultTypeInternal;
extern GeneralFlagsDefaultTypeInternal _GeneralFlags_default_instance_;
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> ::axis::transactions::ApplicationIdentifier* Arena::CreateMaybeMessage<::axis::transactions::ApplicationIdentifier>(Arena*);
template<> ::axis::transactions::GeneralFlags* Arena::CreateMaybeMessage<::axis::transactions::GeneralFlags>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace axis {
namespace transactions {

enum FlagType : int {
  UNDEFINED = 0,
  MASTERCARD_PAYPASS = 2,
  VISA_PAYWAVE = 3,
  AMEX = 4,
  JCB_QUICKPAY = 5,
  DISCOVER = 6,
  FlagType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlagType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlagType_IsValid(int value);
constexpr FlagType FlagType_MIN = UNDEFINED;
constexpr FlagType FlagType_MAX = DISCOVER;
constexpr int FlagType_ARRAYSIZE = FlagType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlagType_descriptor();
template<typename T>
inline const std::string& FlagType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlagType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlagType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlagType_descriptor(), enum_t_value);
}
inline bool FlagType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlagType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlagType>(
    FlagType_descriptor(), name, value);
}
// ===================================================================

class ApplicationIdentifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.ApplicationIdentifier) */ {
 public:
  inline ApplicationIdentifier() : ApplicationIdentifier(nullptr) {}
  virtual ~ApplicationIdentifier();

  ApplicationIdentifier(const ApplicationIdentifier& from);
  ApplicationIdentifier(ApplicationIdentifier&& from) noexcept
    : ApplicationIdentifier() {
    *this = ::std::move(from);
  }

  inline ApplicationIdentifier& operator=(const ApplicationIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationIdentifier& operator=(ApplicationIdentifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationIdentifier* internal_default_instance() {
    return reinterpret_cast<const ApplicationIdentifier*>(
               &_ApplicationIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApplicationIdentifier& a, ApplicationIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationIdentifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationIdentifier* New() const final {
    return CreateMaybeMessage<ApplicationIdentifier>(nullptr);
  }

  ApplicationIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationIdentifier& from);
  void MergeFrom(const ApplicationIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.ApplicationIdentifier";
  }
  protected:
  explicit ApplicationIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protos_2fapplication_5fidentifier_2eproto);
    return ::descriptor_table_Protos_2fapplication_5fidentifier_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdentifierFieldNumber = 1,
    kTerminalTransactionQualifiersFieldNumber = 9,
    kReaderFloorLimitFieldNumber = 11,
    kTerminalCapabilitiesFieldNumber = 15,
    kAddictionalTerminalCapabilitiesFieldNumber = 16,
    kApplicationVersionNumberFieldNumber = 17,
    kCardDataInputCapabilityFieldNumber = 18,
    kCvmCapabilityRequiredFieldNumber = 19,
    kCvmCapabilityNotRequiredFieldNumber = 20,
    kSecurityCapabilityFieldNumber = 21,
    kTerminalActionCodeDefaultFieldNumber = 22,
    kTerminalActionCodeDenialFieldNumber = 23,
    kTerminalActionCodeOnlineFieldNumber = 24,
    kRiskManagementDataFieldNumber = 25,
    kCategoryCodeFieldNumber = 26,
    kGeneralFlagsFieldNumber = 2,
    kAuthorizedAmountFieldNumber = 3,
    kCountryCodeFieldNumber = 4,
    kCurrencyCodeFieldNumber = 5,
    kCurrencyExponentFieldNumber = 6,
    kTerminalTypeFieldNumber = 7,
    kContactlessFloorLimitFieldNumber = 10,
    kLimitNoOnDeviceFieldNumber = 12,
    kLimitOnDeviceFieldNumber = 13,
    kCvmRequiredLimitFieldNumber = 14,
    kMerchantCategoryCodeFieldNumber = 8,
  };
  // bytes application_identifier = 1;
  void clear_application_identifier();
  const std::string& application_identifier() const;
  void set_application_identifier(const std::string& value);
  void set_application_identifier(std::string&& value);
  void set_application_identifier(const char* value);
  void set_application_identifier(const void* value, size_t size);
  std::string* mutable_application_identifier();
  std::string* release_application_identifier();
  void set_allocated_application_identifier(std::string* application_identifier);
  private:
  const std::string& _internal_application_identifier() const;
  void _internal_set_application_identifier(const std::string& value);
  std::string* _internal_mutable_application_identifier();
  public:

  // bytes terminal_transaction_qualifiers = 9;
  void clear_terminal_transaction_qualifiers();
  const std::string& terminal_transaction_qualifiers() const;
  void set_terminal_transaction_qualifiers(const std::string& value);
  void set_terminal_transaction_qualifiers(std::string&& value);
  void set_terminal_transaction_qualifiers(const char* value);
  void set_terminal_transaction_qualifiers(const void* value, size_t size);
  std::string* mutable_terminal_transaction_qualifiers();
  std::string* release_terminal_transaction_qualifiers();
  void set_allocated_terminal_transaction_qualifiers(std::string* terminal_transaction_qualifiers);
  private:
  const std::string& _internal_terminal_transaction_qualifiers() const;
  void _internal_set_terminal_transaction_qualifiers(const std::string& value);
  std::string* _internal_mutable_terminal_transaction_qualifiers();
  public:

  // bytes reader_floor_limit = 11;
  void clear_reader_floor_limit();
  const std::string& reader_floor_limit() const;
  void set_reader_floor_limit(const std::string& value);
  void set_reader_floor_limit(std::string&& value);
  void set_reader_floor_limit(const char* value);
  void set_reader_floor_limit(const void* value, size_t size);
  std::string* mutable_reader_floor_limit();
  std::string* release_reader_floor_limit();
  void set_allocated_reader_floor_limit(std::string* reader_floor_limit);
  private:
  const std::string& _internal_reader_floor_limit() const;
  void _internal_set_reader_floor_limit(const std::string& value);
  std::string* _internal_mutable_reader_floor_limit();
  public:

  // bytes terminal_capabilities = 15;
  void clear_terminal_capabilities();
  const std::string& terminal_capabilities() const;
  void set_terminal_capabilities(const std::string& value);
  void set_terminal_capabilities(std::string&& value);
  void set_terminal_capabilities(const char* value);
  void set_terminal_capabilities(const void* value, size_t size);
  std::string* mutable_terminal_capabilities();
  std::string* release_terminal_capabilities();
  void set_allocated_terminal_capabilities(std::string* terminal_capabilities);
  private:
  const std::string& _internal_terminal_capabilities() const;
  void _internal_set_terminal_capabilities(const std::string& value);
  std::string* _internal_mutable_terminal_capabilities();
  public:

  // bytes addictional_terminal_capabilities = 16;
  void clear_addictional_terminal_capabilities();
  const std::string& addictional_terminal_capabilities() const;
  void set_addictional_terminal_capabilities(const std::string& value);
  void set_addictional_terminal_capabilities(std::string&& value);
  void set_addictional_terminal_capabilities(const char* value);
  void set_addictional_terminal_capabilities(const void* value, size_t size);
  std::string* mutable_addictional_terminal_capabilities();
  std::string* release_addictional_terminal_capabilities();
  void set_allocated_addictional_terminal_capabilities(std::string* addictional_terminal_capabilities);
  private:
  const std::string& _internal_addictional_terminal_capabilities() const;
  void _internal_set_addictional_terminal_capabilities(const std::string& value);
  std::string* _internal_mutable_addictional_terminal_capabilities();
  public:

  // bytes application_version_number = 17;
  void clear_application_version_number();
  const std::string& application_version_number() const;
  void set_application_version_number(const std::string& value);
  void set_application_version_number(std::string&& value);
  void set_application_version_number(const char* value);
  void set_application_version_number(const void* value, size_t size);
  std::string* mutable_application_version_number();
  std::string* release_application_version_number();
  void set_allocated_application_version_number(std::string* application_version_number);
  private:
  const std::string& _internal_application_version_number() const;
  void _internal_set_application_version_number(const std::string& value);
  std::string* _internal_mutable_application_version_number();
  public:

  // bytes card_data_input_capability = 18;
  void clear_card_data_input_capability();
  const std::string& card_data_input_capability() const;
  void set_card_data_input_capability(const std::string& value);
  void set_card_data_input_capability(std::string&& value);
  void set_card_data_input_capability(const char* value);
  void set_card_data_input_capability(const void* value, size_t size);
  std::string* mutable_card_data_input_capability();
  std::string* release_card_data_input_capability();
  void set_allocated_card_data_input_capability(std::string* card_data_input_capability);
  private:
  const std::string& _internal_card_data_input_capability() const;
  void _internal_set_card_data_input_capability(const std::string& value);
  std::string* _internal_mutable_card_data_input_capability();
  public:

  // bytes cvm_capability_required = 19;
  void clear_cvm_capability_required();
  const std::string& cvm_capability_required() const;
  void set_cvm_capability_required(const std::string& value);
  void set_cvm_capability_required(std::string&& value);
  void set_cvm_capability_required(const char* value);
  void set_cvm_capability_required(const void* value, size_t size);
  std::string* mutable_cvm_capability_required();
  std::string* release_cvm_capability_required();
  void set_allocated_cvm_capability_required(std::string* cvm_capability_required);
  private:
  const std::string& _internal_cvm_capability_required() const;
  void _internal_set_cvm_capability_required(const std::string& value);
  std::string* _internal_mutable_cvm_capability_required();
  public:

  // bytes cvm_capability_not_required = 20;
  void clear_cvm_capability_not_required();
  const std::string& cvm_capability_not_required() const;
  void set_cvm_capability_not_required(const std::string& value);
  void set_cvm_capability_not_required(std::string&& value);
  void set_cvm_capability_not_required(const char* value);
  void set_cvm_capability_not_required(const void* value, size_t size);
  std::string* mutable_cvm_capability_not_required();
  std::string* release_cvm_capability_not_required();
  void set_allocated_cvm_capability_not_required(std::string* cvm_capability_not_required);
  private:
  const std::string& _internal_cvm_capability_not_required() const;
  void _internal_set_cvm_capability_not_required(const std::string& value);
  std::string* _internal_mutable_cvm_capability_not_required();
  public:

  // bytes security_capability = 21;
  void clear_security_capability();
  const std::string& security_capability() const;
  void set_security_capability(const std::string& value);
  void set_security_capability(std::string&& value);
  void set_security_capability(const char* value);
  void set_security_capability(const void* value, size_t size);
  std::string* mutable_security_capability();
  std::string* release_security_capability();
  void set_allocated_security_capability(std::string* security_capability);
  private:
  const std::string& _internal_security_capability() const;
  void _internal_set_security_capability(const std::string& value);
  std::string* _internal_mutable_security_capability();
  public:

  // bytes terminal_action_code_default = 22;
  void clear_terminal_action_code_default();
  const std::string& terminal_action_code_default() const;
  void set_terminal_action_code_default(const std::string& value);
  void set_terminal_action_code_default(std::string&& value);
  void set_terminal_action_code_default(const char* value);
  void set_terminal_action_code_default(const void* value, size_t size);
  std::string* mutable_terminal_action_code_default();
  std::string* release_terminal_action_code_default();
  void set_allocated_terminal_action_code_default(std::string* terminal_action_code_default);
  private:
  const std::string& _internal_terminal_action_code_default() const;
  void _internal_set_terminal_action_code_default(const std::string& value);
  std::string* _internal_mutable_terminal_action_code_default();
  public:

  // bytes terminal_action_code_denial = 23;
  void clear_terminal_action_code_denial();
  const std::string& terminal_action_code_denial() const;
  void set_terminal_action_code_denial(const std::string& value);
  void set_terminal_action_code_denial(std::string&& value);
  void set_terminal_action_code_denial(const char* value);
  void set_terminal_action_code_denial(const void* value, size_t size);
  std::string* mutable_terminal_action_code_denial();
  std::string* release_terminal_action_code_denial();
  void set_allocated_terminal_action_code_denial(std::string* terminal_action_code_denial);
  private:
  const std::string& _internal_terminal_action_code_denial() const;
  void _internal_set_terminal_action_code_denial(const std::string& value);
  std::string* _internal_mutable_terminal_action_code_denial();
  public:

  // bytes terminal_action_code_online = 24;
  void clear_terminal_action_code_online();
  const std::string& terminal_action_code_online() const;
  void set_terminal_action_code_online(const std::string& value);
  void set_terminal_action_code_online(std::string&& value);
  void set_terminal_action_code_online(const char* value);
  void set_terminal_action_code_online(const void* value, size_t size);
  std::string* mutable_terminal_action_code_online();
  std::string* release_terminal_action_code_online();
  void set_allocated_terminal_action_code_online(std::string* terminal_action_code_online);
  private:
  const std::string& _internal_terminal_action_code_online() const;
  void _internal_set_terminal_action_code_online(const std::string& value);
  std::string* _internal_mutable_terminal_action_code_online();
  public:

  // bytes risk_management_data = 25;
  void clear_risk_management_data();
  const std::string& risk_management_data() const;
  void set_risk_management_data(const std::string& value);
  void set_risk_management_data(std::string&& value);
  void set_risk_management_data(const char* value);
  void set_risk_management_data(const void* value, size_t size);
  std::string* mutable_risk_management_data();
  std::string* release_risk_management_data();
  void set_allocated_risk_management_data(std::string* risk_management_data);
  private:
  const std::string& _internal_risk_management_data() const;
  void _internal_set_risk_management_data(const std::string& value);
  std::string* _internal_mutable_risk_management_data();
  public:

  // bytes category_code = 26;
  void clear_category_code();
  const std::string& category_code() const;
  void set_category_code(const std::string& value);
  void set_category_code(std::string&& value);
  void set_category_code(const char* value);
  void set_category_code(const void* value, size_t size);
  std::string* mutable_category_code();
  std::string* release_category_code();
  void set_allocated_category_code(std::string* category_code);
  private:
  const std::string& _internal_category_code() const;
  void _internal_set_category_code(const std::string& value);
  std::string* _internal_mutable_category_code();
  public:

  // .axis.transactions.GeneralFlags general_flags = 2;
  bool has_general_flags() const;
  private:
  bool _internal_has_general_flags() const;
  public:
  void clear_general_flags();
  const ::axis::transactions::GeneralFlags& general_flags() const;
  ::axis::transactions::GeneralFlags* release_general_flags();
  ::axis::transactions::GeneralFlags* mutable_general_flags();
  void set_allocated_general_flags(::axis::transactions::GeneralFlags* general_flags);
  private:
  const ::axis::transactions::GeneralFlags& _internal_general_flags() const;
  ::axis::transactions::GeneralFlags* _internal_mutable_general_flags();
  public:
  void unsafe_arena_set_allocated_general_flags(
      ::axis::transactions::GeneralFlags* general_flags);
  ::axis::transactions::GeneralFlags* unsafe_arena_release_general_flags();

  // uint64 authorized_amount = 3;
  void clear_authorized_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 authorized_amount() const;
  void set_authorized_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_authorized_amount() const;
  void _internal_set_authorized_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 country_code = 4;
  void clear_country_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 country_code() const;
  void set_country_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_country_code() const;
  void _internal_set_country_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 currency_code = 5;
  void clear_currency_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 currency_code() const;
  void set_currency_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_currency_code() const;
  void _internal_set_currency_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 currency_exponent = 6;
  void clear_currency_exponent();
  ::PROTOBUF_NAMESPACE_ID::uint32 currency_exponent() const;
  void set_currency_exponent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_currency_exponent() const;
  void _internal_set_currency_exponent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 terminal_type = 7;
  void clear_terminal_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 terminal_type() const;
  void set_terminal_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_terminal_type() const;
  void _internal_set_terminal_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 contactless_floor_limit = 10;
  void clear_contactless_floor_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 contactless_floor_limit() const;
  void set_contactless_floor_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contactless_floor_limit() const;
  void _internal_set_contactless_floor_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limit_no_on_device = 12;
  void clear_limit_no_on_device();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_no_on_device() const;
  void set_limit_no_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit_no_on_device() const;
  void _internal_set_limit_no_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limit_on_device = 13;
  void clear_limit_on_device();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_on_device() const;
  void set_limit_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit_on_device() const;
  void _internal_set_limit_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cvm_required_limit = 14;
  void clear_cvm_required_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 cvm_required_limit() const;
  void set_cvm_required_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cvm_required_limit() const;
  void _internal_set_cvm_required_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 merchant_category_code = 8;
  void clear_merchant_category_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 merchant_category_code() const;
  void set_merchant_category_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_merchant_category_code() const;
  void _internal_set_merchant_category_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.ApplicationIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_transaction_qualifiers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reader_floor_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addictional_terminal_capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_version_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_data_input_capability_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvm_capability_required_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvm_capability_not_required_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_capability_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_action_code_default_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_action_code_denial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_action_code_online_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr risk_management_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_code_;
  ::axis::transactions::GeneralFlags* general_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 authorized_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 country_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currency_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currency_exponent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 terminal_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contactless_floor_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_no_on_device_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_on_device_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cvm_required_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 merchant_category_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protos_2fapplication_5fidentifier_2eproto;
};
// -------------------------------------------------------------------

class GeneralFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.GeneralFlags) */ {
 public:
  inline GeneralFlags() : GeneralFlags(nullptr) {}
  virtual ~GeneralFlags();

  GeneralFlags(const GeneralFlags& from);
  GeneralFlags(GeneralFlags&& from) noexcept
    : GeneralFlags() {
    *this = ::std::move(from);
  }

  inline GeneralFlags& operator=(const GeneralFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralFlags& operator=(GeneralFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneralFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralFlags* internal_default_instance() {
    return reinterpret_cast<const GeneralFlags*>(
               &_GeneralFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GeneralFlags& a, GeneralFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneralFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneralFlags* New() const final {
    return CreateMaybeMessage<GeneralFlags>(nullptr);
  }

  GeneralFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralFlags& from);
  void MergeFrom(const GeneralFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.GeneralFlags";
  }
  protected:
  explicit GeneralFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protos_2fapplication_5fidentifier_2eproto);
    return ::descriptor_table_Protos_2fapplication_5fidentifier_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagTypeFieldNumber = 1,
    kValidateCardDateFieldNumber = 2,
  };
  // .axis.transactions.FlagType flag_type = 1;
  void clear_flag_type();
  ::axis::transactions::FlagType flag_type() const;
  void set_flag_type(::axis::transactions::FlagType value);
  private:
  ::axis::transactions::FlagType _internal_flag_type() const;
  void _internal_set_flag_type(::axis::transactions::FlagType value);
  public:

  // bool validate_card_date = 2;
  void clear_validate_card_date();
  bool validate_card_date() const;
  void set_validate_card_date(bool value);
  private:
  bool _internal_validate_card_date() const;
  void _internal_set_validate_card_date(bool value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.GeneralFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int flag_type_;
  bool validate_card_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protos_2fapplication_5fidentifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApplicationIdentifier

// bytes application_identifier = 1;
inline void ApplicationIdentifier::clear_application_identifier() {
  application_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::application_identifier() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.application_identifier)
  return _internal_application_identifier();
}
inline void ApplicationIdentifier::set_application_identifier(const std::string& value) {
  _internal_set_application_identifier(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.application_identifier)
}
inline std::string* ApplicationIdentifier::mutable_application_identifier() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.application_identifier)
  return _internal_mutable_application_identifier();
}
inline const std::string& ApplicationIdentifier::_internal_application_identifier() const {
  return application_identifier_.Get();
}
inline void ApplicationIdentifier::_internal_set_application_identifier(const std::string& value) {
  
  application_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_application_identifier(std::string&& value) {
  
  application_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.application_identifier)
}
inline void ApplicationIdentifier::set_application_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.application_identifier)
}
inline void ApplicationIdentifier::set_application_identifier(const void* value,
    size_t size) {
  
  application_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.application_identifier)
}
inline std::string* ApplicationIdentifier::_internal_mutable_application_identifier() {
  
  return application_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_application_identifier() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.application_identifier)
  return application_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_application_identifier(std::string* application_identifier) {
  if (application_identifier != nullptr) {
    
  } else {
    
  }
  application_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.application_identifier)
}

// .axis.transactions.GeneralFlags general_flags = 2;
inline bool ApplicationIdentifier::_internal_has_general_flags() const {
  return this != internal_default_instance() && general_flags_ != nullptr;
}
inline bool ApplicationIdentifier::has_general_flags() const {
  return _internal_has_general_flags();
}
inline void ApplicationIdentifier::clear_general_flags() {
  if (GetArena() == nullptr && general_flags_ != nullptr) {
    delete general_flags_;
  }
  general_flags_ = nullptr;
}
inline const ::axis::transactions::GeneralFlags& ApplicationIdentifier::_internal_general_flags() const {
  const ::axis::transactions::GeneralFlags* p = general_flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::axis::transactions::GeneralFlags*>(
      &::axis::transactions::_GeneralFlags_default_instance_);
}
inline const ::axis::transactions::GeneralFlags& ApplicationIdentifier::general_flags() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.general_flags)
  return _internal_general_flags();
}
inline void ApplicationIdentifier::unsafe_arena_set_allocated_general_flags(
    ::axis::transactions::GeneralFlags* general_flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(general_flags_);
  }
  general_flags_ = general_flags;
  if (general_flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.ApplicationIdentifier.general_flags)
}
inline ::axis::transactions::GeneralFlags* ApplicationIdentifier::release_general_flags() {
  
  ::axis::transactions::GeneralFlags* temp = general_flags_;
  general_flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::axis::transactions::GeneralFlags* ApplicationIdentifier::unsafe_arena_release_general_flags() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.general_flags)
  
  ::axis::transactions::GeneralFlags* temp = general_flags_;
  general_flags_ = nullptr;
  return temp;
}
inline ::axis::transactions::GeneralFlags* ApplicationIdentifier::_internal_mutable_general_flags() {
  
  if (general_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::axis::transactions::GeneralFlags>(GetArena());
    general_flags_ = p;
  }
  return general_flags_;
}
inline ::axis::transactions::GeneralFlags* ApplicationIdentifier::mutable_general_flags() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.general_flags)
  return _internal_mutable_general_flags();
}
inline void ApplicationIdentifier::set_allocated_general_flags(::axis::transactions::GeneralFlags* general_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete general_flags_;
  }
  if (general_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(general_flags);
    if (message_arena != submessage_arena) {
      general_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_flags, submessage_arena);
    }
    
  } else {
    
  }
  general_flags_ = general_flags;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.general_flags)
}

// uint64 authorized_amount = 3;
inline void ApplicationIdentifier::clear_authorized_amount() {
  authorized_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::_internal_authorized_amount() const {
  return authorized_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::authorized_amount() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.authorized_amount)
  return _internal_authorized_amount();
}
inline void ApplicationIdentifier::_internal_set_authorized_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  authorized_amount_ = value;
}
inline void ApplicationIdentifier::set_authorized_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_authorized_amount(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.authorized_amount)
}

// uint32 country_code = 4;
inline void ApplicationIdentifier::clear_country_code() {
  country_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::_internal_country_code() const {
  return country_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::country_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.country_code)
  return _internal_country_code();
}
inline void ApplicationIdentifier::_internal_set_country_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  country_code_ = value;
}
inline void ApplicationIdentifier::set_country_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.country_code)
}

// uint32 currency_code = 5;
inline void ApplicationIdentifier::clear_currency_code() {
  currency_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::_internal_currency_code() const {
  return currency_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::currency_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.currency_code)
  return _internal_currency_code();
}
inline void ApplicationIdentifier::_internal_set_currency_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currency_code_ = value;
}
inline void ApplicationIdentifier::set_currency_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_currency_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.currency_code)
}

// uint32 currency_exponent = 6;
inline void ApplicationIdentifier::clear_currency_exponent() {
  currency_exponent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::_internal_currency_exponent() const {
  return currency_exponent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::currency_exponent() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.currency_exponent)
  return _internal_currency_exponent();
}
inline void ApplicationIdentifier::_internal_set_currency_exponent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currency_exponent_ = value;
}
inline void ApplicationIdentifier::set_currency_exponent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_currency_exponent(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.currency_exponent)
}

// uint32 terminal_type = 7;
inline void ApplicationIdentifier::clear_terminal_type() {
  terminal_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::_internal_terminal_type() const {
  return terminal_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::terminal_type() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.terminal_type)
  return _internal_terminal_type();
}
inline void ApplicationIdentifier::_internal_set_terminal_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  terminal_type_ = value;
}
inline void ApplicationIdentifier::set_terminal_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_terminal_type(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.terminal_type)
}

// uint32 merchant_category_code = 8;
inline void ApplicationIdentifier::clear_merchant_category_code() {
  merchant_category_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::_internal_merchant_category_code() const {
  return merchant_category_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplicationIdentifier::merchant_category_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.merchant_category_code)
  return _internal_merchant_category_code();
}
inline void ApplicationIdentifier::_internal_set_merchant_category_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  merchant_category_code_ = value;
}
inline void ApplicationIdentifier::set_merchant_category_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_merchant_category_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.merchant_category_code)
}

// bytes terminal_transaction_qualifiers = 9;
inline void ApplicationIdentifier::clear_terminal_transaction_qualifiers() {
  terminal_transaction_qualifiers_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::terminal_transaction_qualifiers() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
  return _internal_terminal_transaction_qualifiers();
}
inline void ApplicationIdentifier::set_terminal_transaction_qualifiers(const std::string& value) {
  _internal_set_terminal_transaction_qualifiers(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
}
inline std::string* ApplicationIdentifier::mutable_terminal_transaction_qualifiers() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
  return _internal_mutable_terminal_transaction_qualifiers();
}
inline const std::string& ApplicationIdentifier::_internal_terminal_transaction_qualifiers() const {
  return terminal_transaction_qualifiers_.Get();
}
inline void ApplicationIdentifier::_internal_set_terminal_transaction_qualifiers(const std::string& value) {
  
  terminal_transaction_qualifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_terminal_transaction_qualifiers(std::string&& value) {
  
  terminal_transaction_qualifiers_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
}
inline void ApplicationIdentifier::set_terminal_transaction_qualifiers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terminal_transaction_qualifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
}
inline void ApplicationIdentifier::set_terminal_transaction_qualifiers(const void* value,
    size_t size) {
  
  terminal_transaction_qualifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
}
inline std::string* ApplicationIdentifier::_internal_mutable_terminal_transaction_qualifiers() {
  
  return terminal_transaction_qualifiers_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_terminal_transaction_qualifiers() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
  return terminal_transaction_qualifiers_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_terminal_transaction_qualifiers(std::string* terminal_transaction_qualifiers) {
  if (terminal_transaction_qualifiers != nullptr) {
    
  } else {
    
  }
  terminal_transaction_qualifiers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_transaction_qualifiers,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.terminal_transaction_qualifiers)
}

// uint64 contactless_floor_limit = 10;
inline void ApplicationIdentifier::clear_contactless_floor_limit() {
  contactless_floor_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::_internal_contactless_floor_limit() const {
  return contactless_floor_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::contactless_floor_limit() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.contactless_floor_limit)
  return _internal_contactless_floor_limit();
}
inline void ApplicationIdentifier::_internal_set_contactless_floor_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contactless_floor_limit_ = value;
}
inline void ApplicationIdentifier::set_contactless_floor_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contactless_floor_limit(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.contactless_floor_limit)
}

// bytes reader_floor_limit = 11;
inline void ApplicationIdentifier::clear_reader_floor_limit() {
  reader_floor_limit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::reader_floor_limit() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.reader_floor_limit)
  return _internal_reader_floor_limit();
}
inline void ApplicationIdentifier::set_reader_floor_limit(const std::string& value) {
  _internal_set_reader_floor_limit(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.reader_floor_limit)
}
inline std::string* ApplicationIdentifier::mutable_reader_floor_limit() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.reader_floor_limit)
  return _internal_mutable_reader_floor_limit();
}
inline const std::string& ApplicationIdentifier::_internal_reader_floor_limit() const {
  return reader_floor_limit_.Get();
}
inline void ApplicationIdentifier::_internal_set_reader_floor_limit(const std::string& value) {
  
  reader_floor_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_reader_floor_limit(std::string&& value) {
  
  reader_floor_limit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.reader_floor_limit)
}
inline void ApplicationIdentifier::set_reader_floor_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reader_floor_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.reader_floor_limit)
}
inline void ApplicationIdentifier::set_reader_floor_limit(const void* value,
    size_t size) {
  
  reader_floor_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.reader_floor_limit)
}
inline std::string* ApplicationIdentifier::_internal_mutable_reader_floor_limit() {
  
  return reader_floor_limit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_reader_floor_limit() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.reader_floor_limit)
  return reader_floor_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_reader_floor_limit(std::string* reader_floor_limit) {
  if (reader_floor_limit != nullptr) {
    
  } else {
    
  }
  reader_floor_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reader_floor_limit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.reader_floor_limit)
}

// uint64 limit_no_on_device = 12;
inline void ApplicationIdentifier::clear_limit_no_on_device() {
  limit_no_on_device_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::_internal_limit_no_on_device() const {
  return limit_no_on_device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::limit_no_on_device() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.limit_no_on_device)
  return _internal_limit_no_on_device();
}
inline void ApplicationIdentifier::_internal_set_limit_no_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_no_on_device_ = value;
}
inline void ApplicationIdentifier::set_limit_no_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit_no_on_device(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.limit_no_on_device)
}

// uint64 limit_on_device = 13;
inline void ApplicationIdentifier::clear_limit_on_device() {
  limit_on_device_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::_internal_limit_on_device() const {
  return limit_on_device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::limit_on_device() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.limit_on_device)
  return _internal_limit_on_device();
}
inline void ApplicationIdentifier::_internal_set_limit_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_on_device_ = value;
}
inline void ApplicationIdentifier::set_limit_on_device(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit_on_device(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.limit_on_device)
}

// uint64 cvm_required_limit = 14;
inline void ApplicationIdentifier::clear_cvm_required_limit() {
  cvm_required_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::_internal_cvm_required_limit() const {
  return cvm_required_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApplicationIdentifier::cvm_required_limit() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.cvm_required_limit)
  return _internal_cvm_required_limit();
}
inline void ApplicationIdentifier::_internal_set_cvm_required_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cvm_required_limit_ = value;
}
inline void ApplicationIdentifier::set_cvm_required_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cvm_required_limit(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.cvm_required_limit)
}

// bytes terminal_capabilities = 15;
inline void ApplicationIdentifier::clear_terminal_capabilities() {
  terminal_capabilities_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::terminal_capabilities() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.terminal_capabilities)
  return _internal_terminal_capabilities();
}
inline void ApplicationIdentifier::set_terminal_capabilities(const std::string& value) {
  _internal_set_terminal_capabilities(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.terminal_capabilities)
}
inline std::string* ApplicationIdentifier::mutable_terminal_capabilities() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.terminal_capabilities)
  return _internal_mutable_terminal_capabilities();
}
inline const std::string& ApplicationIdentifier::_internal_terminal_capabilities() const {
  return terminal_capabilities_.Get();
}
inline void ApplicationIdentifier::_internal_set_terminal_capabilities(const std::string& value) {
  
  terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_terminal_capabilities(std::string&& value) {
  
  terminal_capabilities_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.terminal_capabilities)
}
inline void ApplicationIdentifier::set_terminal_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.terminal_capabilities)
}
inline void ApplicationIdentifier::set_terminal_capabilities(const void* value,
    size_t size) {
  
  terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.terminal_capabilities)
}
inline std::string* ApplicationIdentifier::_internal_mutable_terminal_capabilities() {
  
  return terminal_capabilities_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_terminal_capabilities() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.terminal_capabilities)
  return terminal_capabilities_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_terminal_capabilities(std::string* terminal_capabilities) {
  if (terminal_capabilities != nullptr) {
    
  } else {
    
  }
  terminal_capabilities_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_capabilities,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.terminal_capabilities)
}

// bytes addictional_terminal_capabilities = 16;
inline void ApplicationIdentifier::clear_addictional_terminal_capabilities() {
  addictional_terminal_capabilities_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::addictional_terminal_capabilities() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
  return _internal_addictional_terminal_capabilities();
}
inline void ApplicationIdentifier::set_addictional_terminal_capabilities(const std::string& value) {
  _internal_set_addictional_terminal_capabilities(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
}
inline std::string* ApplicationIdentifier::mutable_addictional_terminal_capabilities() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
  return _internal_mutable_addictional_terminal_capabilities();
}
inline const std::string& ApplicationIdentifier::_internal_addictional_terminal_capabilities() const {
  return addictional_terminal_capabilities_.Get();
}
inline void ApplicationIdentifier::_internal_set_addictional_terminal_capabilities(const std::string& value) {
  
  addictional_terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_addictional_terminal_capabilities(std::string&& value) {
  
  addictional_terminal_capabilities_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
}
inline void ApplicationIdentifier::set_addictional_terminal_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addictional_terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
}
inline void ApplicationIdentifier::set_addictional_terminal_capabilities(const void* value,
    size_t size) {
  
  addictional_terminal_capabilities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
}
inline std::string* ApplicationIdentifier::_internal_mutable_addictional_terminal_capabilities() {
  
  return addictional_terminal_capabilities_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_addictional_terminal_capabilities() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
  return addictional_terminal_capabilities_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_addictional_terminal_capabilities(std::string* addictional_terminal_capabilities) {
  if (addictional_terminal_capabilities != nullptr) {
    
  } else {
    
  }
  addictional_terminal_capabilities_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addictional_terminal_capabilities,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.addictional_terminal_capabilities)
}

// bytes application_version_number = 17;
inline void ApplicationIdentifier::clear_application_version_number() {
  application_version_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::application_version_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.application_version_number)
  return _internal_application_version_number();
}
inline void ApplicationIdentifier::set_application_version_number(const std::string& value) {
  _internal_set_application_version_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.application_version_number)
}
inline std::string* ApplicationIdentifier::mutable_application_version_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.application_version_number)
  return _internal_mutable_application_version_number();
}
inline const std::string& ApplicationIdentifier::_internal_application_version_number() const {
  return application_version_number_.Get();
}
inline void ApplicationIdentifier::_internal_set_application_version_number(const std::string& value) {
  
  application_version_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_application_version_number(std::string&& value) {
  
  application_version_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.application_version_number)
}
inline void ApplicationIdentifier::set_application_version_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_version_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.application_version_number)
}
inline void ApplicationIdentifier::set_application_version_number(const void* value,
    size_t size) {
  
  application_version_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.application_version_number)
}
inline std::string* ApplicationIdentifier::_internal_mutable_application_version_number() {
  
  return application_version_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_application_version_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.application_version_number)
  return application_version_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_application_version_number(std::string* application_version_number) {
  if (application_version_number != nullptr) {
    
  } else {
    
  }
  application_version_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_version_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.application_version_number)
}

// bytes card_data_input_capability = 18;
inline void ApplicationIdentifier::clear_card_data_input_capability() {
  card_data_input_capability_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::card_data_input_capability() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.card_data_input_capability)
  return _internal_card_data_input_capability();
}
inline void ApplicationIdentifier::set_card_data_input_capability(const std::string& value) {
  _internal_set_card_data_input_capability(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.card_data_input_capability)
}
inline std::string* ApplicationIdentifier::mutable_card_data_input_capability() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.card_data_input_capability)
  return _internal_mutable_card_data_input_capability();
}
inline const std::string& ApplicationIdentifier::_internal_card_data_input_capability() const {
  return card_data_input_capability_.Get();
}
inline void ApplicationIdentifier::_internal_set_card_data_input_capability(const std::string& value) {
  
  card_data_input_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_card_data_input_capability(std::string&& value) {
  
  card_data_input_capability_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.card_data_input_capability)
}
inline void ApplicationIdentifier::set_card_data_input_capability(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_data_input_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.card_data_input_capability)
}
inline void ApplicationIdentifier::set_card_data_input_capability(const void* value,
    size_t size) {
  
  card_data_input_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.card_data_input_capability)
}
inline std::string* ApplicationIdentifier::_internal_mutable_card_data_input_capability() {
  
  return card_data_input_capability_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_card_data_input_capability() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.card_data_input_capability)
  return card_data_input_capability_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_card_data_input_capability(std::string* card_data_input_capability) {
  if (card_data_input_capability != nullptr) {
    
  } else {
    
  }
  card_data_input_capability_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_data_input_capability,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.card_data_input_capability)
}

// bytes cvm_capability_required = 19;
inline void ApplicationIdentifier::clear_cvm_capability_required() {
  cvm_capability_required_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::cvm_capability_required() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.cvm_capability_required)
  return _internal_cvm_capability_required();
}
inline void ApplicationIdentifier::set_cvm_capability_required(const std::string& value) {
  _internal_set_cvm_capability_required(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.cvm_capability_required)
}
inline std::string* ApplicationIdentifier::mutable_cvm_capability_required() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.cvm_capability_required)
  return _internal_mutable_cvm_capability_required();
}
inline const std::string& ApplicationIdentifier::_internal_cvm_capability_required() const {
  return cvm_capability_required_.Get();
}
inline void ApplicationIdentifier::_internal_set_cvm_capability_required(const std::string& value) {
  
  cvm_capability_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_cvm_capability_required(std::string&& value) {
  
  cvm_capability_required_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.cvm_capability_required)
}
inline void ApplicationIdentifier::set_cvm_capability_required(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cvm_capability_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.cvm_capability_required)
}
inline void ApplicationIdentifier::set_cvm_capability_required(const void* value,
    size_t size) {
  
  cvm_capability_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.cvm_capability_required)
}
inline std::string* ApplicationIdentifier::_internal_mutable_cvm_capability_required() {
  
  return cvm_capability_required_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_cvm_capability_required() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.cvm_capability_required)
  return cvm_capability_required_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_cvm_capability_required(std::string* cvm_capability_required) {
  if (cvm_capability_required != nullptr) {
    
  } else {
    
  }
  cvm_capability_required_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvm_capability_required,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.cvm_capability_required)
}

// bytes cvm_capability_not_required = 20;
inline void ApplicationIdentifier::clear_cvm_capability_not_required() {
  cvm_capability_not_required_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::cvm_capability_not_required() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
  return _internal_cvm_capability_not_required();
}
inline void ApplicationIdentifier::set_cvm_capability_not_required(const std::string& value) {
  _internal_set_cvm_capability_not_required(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
}
inline std::string* ApplicationIdentifier::mutable_cvm_capability_not_required() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
  return _internal_mutable_cvm_capability_not_required();
}
inline const std::string& ApplicationIdentifier::_internal_cvm_capability_not_required() const {
  return cvm_capability_not_required_.Get();
}
inline void ApplicationIdentifier::_internal_set_cvm_capability_not_required(const std::string& value) {
  
  cvm_capability_not_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_cvm_capability_not_required(std::string&& value) {
  
  cvm_capability_not_required_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
}
inline void ApplicationIdentifier::set_cvm_capability_not_required(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cvm_capability_not_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
}
inline void ApplicationIdentifier::set_cvm_capability_not_required(const void* value,
    size_t size) {
  
  cvm_capability_not_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
}
inline std::string* ApplicationIdentifier::_internal_mutable_cvm_capability_not_required() {
  
  return cvm_capability_not_required_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_cvm_capability_not_required() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
  return cvm_capability_not_required_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_cvm_capability_not_required(std::string* cvm_capability_not_required) {
  if (cvm_capability_not_required != nullptr) {
    
  } else {
    
  }
  cvm_capability_not_required_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvm_capability_not_required,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.cvm_capability_not_required)
}

// bytes security_capability = 21;
inline void ApplicationIdentifier::clear_security_capability() {
  security_capability_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::security_capability() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.security_capability)
  return _internal_security_capability();
}
inline void ApplicationIdentifier::set_security_capability(const std::string& value) {
  _internal_set_security_capability(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.security_capability)
}
inline std::string* ApplicationIdentifier::mutable_security_capability() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.security_capability)
  return _internal_mutable_security_capability();
}
inline const std::string& ApplicationIdentifier::_internal_security_capability() const {
  return security_capability_.Get();
}
inline void ApplicationIdentifier::_internal_set_security_capability(const std::string& value) {
  
  security_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_security_capability(std::string&& value) {
  
  security_capability_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.security_capability)
}
inline void ApplicationIdentifier::set_security_capability(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.security_capability)
}
inline void ApplicationIdentifier::set_security_capability(const void* value,
    size_t size) {
  
  security_capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.security_capability)
}
inline std::string* ApplicationIdentifier::_internal_mutable_security_capability() {
  
  return security_capability_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_security_capability() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.security_capability)
  return security_capability_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_security_capability(std::string* security_capability) {
  if (security_capability != nullptr) {
    
  } else {
    
  }
  security_capability_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_capability,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.security_capability)
}

// bytes terminal_action_code_default = 22;
inline void ApplicationIdentifier::clear_terminal_action_code_default() {
  terminal_action_code_default_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::terminal_action_code_default() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
  return _internal_terminal_action_code_default();
}
inline void ApplicationIdentifier::set_terminal_action_code_default(const std::string& value) {
  _internal_set_terminal_action_code_default(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
}
inline std::string* ApplicationIdentifier::mutable_terminal_action_code_default() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
  return _internal_mutable_terminal_action_code_default();
}
inline const std::string& ApplicationIdentifier::_internal_terminal_action_code_default() const {
  return terminal_action_code_default_.Get();
}
inline void ApplicationIdentifier::_internal_set_terminal_action_code_default(const std::string& value) {
  
  terminal_action_code_default_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_terminal_action_code_default(std::string&& value) {
  
  terminal_action_code_default_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
}
inline void ApplicationIdentifier::set_terminal_action_code_default(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terminal_action_code_default_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
}
inline void ApplicationIdentifier::set_terminal_action_code_default(const void* value,
    size_t size) {
  
  terminal_action_code_default_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
}
inline std::string* ApplicationIdentifier::_internal_mutable_terminal_action_code_default() {
  
  return terminal_action_code_default_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_terminal_action_code_default() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
  return terminal_action_code_default_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_terminal_action_code_default(std::string* terminal_action_code_default) {
  if (terminal_action_code_default != nullptr) {
    
  } else {
    
  }
  terminal_action_code_default_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_action_code_default,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.terminal_action_code_default)
}

// bytes terminal_action_code_denial = 23;
inline void ApplicationIdentifier::clear_terminal_action_code_denial() {
  terminal_action_code_denial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::terminal_action_code_denial() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
  return _internal_terminal_action_code_denial();
}
inline void ApplicationIdentifier::set_terminal_action_code_denial(const std::string& value) {
  _internal_set_terminal_action_code_denial(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
}
inline std::string* ApplicationIdentifier::mutable_terminal_action_code_denial() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
  return _internal_mutable_terminal_action_code_denial();
}
inline const std::string& ApplicationIdentifier::_internal_terminal_action_code_denial() const {
  return terminal_action_code_denial_.Get();
}
inline void ApplicationIdentifier::_internal_set_terminal_action_code_denial(const std::string& value) {
  
  terminal_action_code_denial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_terminal_action_code_denial(std::string&& value) {
  
  terminal_action_code_denial_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
}
inline void ApplicationIdentifier::set_terminal_action_code_denial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terminal_action_code_denial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
}
inline void ApplicationIdentifier::set_terminal_action_code_denial(const void* value,
    size_t size) {
  
  terminal_action_code_denial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
}
inline std::string* ApplicationIdentifier::_internal_mutable_terminal_action_code_denial() {
  
  return terminal_action_code_denial_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_terminal_action_code_denial() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
  return terminal_action_code_denial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_terminal_action_code_denial(std::string* terminal_action_code_denial) {
  if (terminal_action_code_denial != nullptr) {
    
  } else {
    
  }
  terminal_action_code_denial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_action_code_denial,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.terminal_action_code_denial)
}

// bytes terminal_action_code_online = 24;
inline void ApplicationIdentifier::clear_terminal_action_code_online() {
  terminal_action_code_online_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::terminal_action_code_online() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
  return _internal_terminal_action_code_online();
}
inline void ApplicationIdentifier::set_terminal_action_code_online(const std::string& value) {
  _internal_set_terminal_action_code_online(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
}
inline std::string* ApplicationIdentifier::mutable_terminal_action_code_online() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
  return _internal_mutable_terminal_action_code_online();
}
inline const std::string& ApplicationIdentifier::_internal_terminal_action_code_online() const {
  return terminal_action_code_online_.Get();
}
inline void ApplicationIdentifier::_internal_set_terminal_action_code_online(const std::string& value) {
  
  terminal_action_code_online_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_terminal_action_code_online(std::string&& value) {
  
  terminal_action_code_online_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
}
inline void ApplicationIdentifier::set_terminal_action_code_online(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terminal_action_code_online_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
}
inline void ApplicationIdentifier::set_terminal_action_code_online(const void* value,
    size_t size) {
  
  terminal_action_code_online_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
}
inline std::string* ApplicationIdentifier::_internal_mutable_terminal_action_code_online() {
  
  return terminal_action_code_online_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_terminal_action_code_online() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
  return terminal_action_code_online_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_terminal_action_code_online(std::string* terminal_action_code_online) {
  if (terminal_action_code_online != nullptr) {
    
  } else {
    
  }
  terminal_action_code_online_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_action_code_online,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.terminal_action_code_online)
}

// bytes risk_management_data = 25;
inline void ApplicationIdentifier::clear_risk_management_data() {
  risk_management_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::risk_management_data() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.risk_management_data)
  return _internal_risk_management_data();
}
inline void ApplicationIdentifier::set_risk_management_data(const std::string& value) {
  _internal_set_risk_management_data(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.risk_management_data)
}
inline std::string* ApplicationIdentifier::mutable_risk_management_data() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.risk_management_data)
  return _internal_mutable_risk_management_data();
}
inline const std::string& ApplicationIdentifier::_internal_risk_management_data() const {
  return risk_management_data_.Get();
}
inline void ApplicationIdentifier::_internal_set_risk_management_data(const std::string& value) {
  
  risk_management_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_risk_management_data(std::string&& value) {
  
  risk_management_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.risk_management_data)
}
inline void ApplicationIdentifier::set_risk_management_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  risk_management_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.risk_management_data)
}
inline void ApplicationIdentifier::set_risk_management_data(const void* value,
    size_t size) {
  
  risk_management_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.risk_management_data)
}
inline std::string* ApplicationIdentifier::_internal_mutable_risk_management_data() {
  
  return risk_management_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_risk_management_data() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.risk_management_data)
  return risk_management_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_risk_management_data(std::string* risk_management_data) {
  if (risk_management_data != nullptr) {
    
  } else {
    
  }
  risk_management_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), risk_management_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.risk_management_data)
}

// bytes category_code = 26;
inline void ApplicationIdentifier::clear_category_code() {
  category_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplicationIdentifier::category_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ApplicationIdentifier.category_code)
  return _internal_category_code();
}
inline void ApplicationIdentifier::set_category_code(const std::string& value) {
  _internal_set_category_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ApplicationIdentifier.category_code)
}
inline std::string* ApplicationIdentifier::mutable_category_code() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ApplicationIdentifier.category_code)
  return _internal_mutable_category_code();
}
inline const std::string& ApplicationIdentifier::_internal_category_code() const {
  return category_code_.Get();
}
inline void ApplicationIdentifier::_internal_set_category_code(const std::string& value) {
  
  category_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplicationIdentifier::set_category_code(std::string&& value) {
  
  category_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ApplicationIdentifier.category_code)
}
inline void ApplicationIdentifier::set_category_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ApplicationIdentifier.category_code)
}
inline void ApplicationIdentifier::set_category_code(const void* value,
    size_t size) {
  
  category_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ApplicationIdentifier.category_code)
}
inline std::string* ApplicationIdentifier::_internal_mutable_category_code() {
  
  return category_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplicationIdentifier::release_category_code() {
  // @@protoc_insertion_point(field_release:axis.transactions.ApplicationIdentifier.category_code)
  return category_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationIdentifier::set_allocated_category_code(std::string* category_code) {
  if (category_code != nullptr) {
    
  } else {
    
  }
  category_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ApplicationIdentifier.category_code)
}

// -------------------------------------------------------------------

// GeneralFlags

// .axis.transactions.FlagType flag_type = 1;
inline void GeneralFlags::clear_flag_type() {
  flag_type_ = 0;
}
inline ::axis::transactions::FlagType GeneralFlags::_internal_flag_type() const {
  return static_cast< ::axis::transactions::FlagType >(flag_type_);
}
inline ::axis::transactions::FlagType GeneralFlags::flag_type() const {
  // @@protoc_insertion_point(field_get:axis.transactions.GeneralFlags.flag_type)
  return _internal_flag_type();
}
inline void GeneralFlags::_internal_set_flag_type(::axis::transactions::FlagType value) {
  
  flag_type_ = value;
}
inline void GeneralFlags::set_flag_type(::axis::transactions::FlagType value) {
  _internal_set_flag_type(value);
  // @@protoc_insertion_point(field_set:axis.transactions.GeneralFlags.flag_type)
}

// bool validate_card_date = 2;
inline void GeneralFlags::clear_validate_card_date() {
  validate_card_date_ = false;
}
inline bool GeneralFlags::_internal_validate_card_date() const {
  return validate_card_date_;
}
inline bool GeneralFlags::validate_card_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.GeneralFlags.validate_card_date)
  return _internal_validate_card_date();
}
inline void GeneralFlags::_internal_set_validate_card_date(bool value) {
  
  validate_card_date_ = value;
}
inline void GeneralFlags::set_validate_card_date(bool value) {
  _internal_set_validate_card_date(value);
  // @@protoc_insertion_point(field_set:axis.transactions.GeneralFlags.validate_card_date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transactions
}  // namespace axis

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::axis::transactions::FlagType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::axis::transactions::FlagType>() {
  return ::axis::transactions::FlagType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protos_2fapplication_5fidentifier_2eproto
