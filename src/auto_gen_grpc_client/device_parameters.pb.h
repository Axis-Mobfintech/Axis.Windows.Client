// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Protos/accepted_bin.pb.h"
#include "Protos/application_identifier.pb.h"
#include "Protos/capk_table.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_5fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5fparameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_5fparameters_2eproto;
namespace axis {
namespace transactions {
class ParametersRequest;
class ParametersRequestDefaultTypeInternal;
extern ParametersRequestDefaultTypeInternal _ParametersRequest_default_instance_;
class ParametersResponse;
class ParametersResponseDefaultTypeInternal;
extern ParametersResponseDefaultTypeInternal _ParametersResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> ::axis::transactions::ParametersRequest* Arena::CreateMaybeMessage<::axis::transactions::ParametersRequest>(Arena*);
template<> ::axis::transactions::ParametersResponse* Arena::CreateMaybeMessage<::axis::transactions::ParametersResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace axis {
namespace transactions {

// ===================================================================

class ParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.ParametersRequest) */ {
 public:
  inline ParametersRequest() : ParametersRequest(nullptr) {}
  virtual ~ParametersRequest();

  ParametersRequest(const ParametersRequest& from);
  ParametersRequest(ParametersRequest&& from) noexcept
    : ParametersRequest() {
    *this = ::std::move(from);
  }

  inline ParametersRequest& operator=(const ParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParametersRequest& operator=(ParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParametersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParametersRequest* internal_default_instance() {
    return reinterpret_cast<const ParametersRequest*>(
               &_ParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParametersRequest& a, ParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParametersRequest* New() const final {
    return CreateMaybeMessage<ParametersRequest>(nullptr);
  }

  ParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParametersRequest& from);
  void MergeFrom(const ParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.ParametersRequest";
  }
  protected:
  explicit ParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_5fparameters_2eproto);
    return ::descriptor_table_device_5fparameters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kOperatorIdFieldNumber = 2,
    kReaderSerialNumberFieldNumber = 3,
    kDeviceSerialNumberFieldNumber = 4,
    kKsnDataFieldNumber = 5,
    kLineIdFieldNumber = 7,
    kVehicleIdFieldNumber = 8,
    kRegisterDateFieldNumber = 9,
    kRegisterCodeFieldNumber = 6,
    kEmvParametersVersionFieldNumber = 10,
    kBinParametersVersionFieldNumber = 11,
    kCapkParametersVersionFieldNumber = 12,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string operator_id = 2;
  void clear_operator_id();
  const std::string& operator_id() const;
  void set_operator_id(const std::string& value);
  void set_operator_id(std::string&& value);
  void set_operator_id(const char* value);
  void set_operator_id(const char* value, size_t size);
  std::string* mutable_operator_id();
  std::string* release_operator_id();
  void set_allocated_operator_id(std::string* operator_id);
  private:
  const std::string& _internal_operator_id() const;
  void _internal_set_operator_id(const std::string& value);
  std::string* _internal_mutable_operator_id();
  public:

  // string reader_serial_number = 3;
  void clear_reader_serial_number();
  const std::string& reader_serial_number() const;
  void set_reader_serial_number(const std::string& value);
  void set_reader_serial_number(std::string&& value);
  void set_reader_serial_number(const char* value);
  void set_reader_serial_number(const char* value, size_t size);
  std::string* mutable_reader_serial_number();
  std::string* release_reader_serial_number();
  void set_allocated_reader_serial_number(std::string* reader_serial_number);
  private:
  const std::string& _internal_reader_serial_number() const;
  void _internal_set_reader_serial_number(const std::string& value);
  std::string* _internal_mutable_reader_serial_number();
  public:

  // string device_serial_number = 4;
  void clear_device_serial_number();
  const std::string& device_serial_number() const;
  void set_device_serial_number(const std::string& value);
  void set_device_serial_number(std::string&& value);
  void set_device_serial_number(const char* value);
  void set_device_serial_number(const char* value, size_t size);
  std::string* mutable_device_serial_number();
  std::string* release_device_serial_number();
  void set_allocated_device_serial_number(std::string* device_serial_number);
  private:
  const std::string& _internal_device_serial_number() const;
  void _internal_set_device_serial_number(const std::string& value);
  std::string* _internal_mutable_device_serial_number();
  public:

  // bytes ksn_data = 5;
  void clear_ksn_data();
  const std::string& ksn_data() const;
  void set_ksn_data(const std::string& value);
  void set_ksn_data(std::string&& value);
  void set_ksn_data(const char* value);
  void set_ksn_data(const void* value, size_t size);
  std::string* mutable_ksn_data();
  std::string* release_ksn_data();
  void set_allocated_ksn_data(std::string* ksn_data);
  private:
  const std::string& _internal_ksn_data() const;
  void _internal_set_ksn_data(const std::string& value);
  std::string* _internal_mutable_ksn_data();
  public:

  // string line_id = 7;
  void clear_line_id();
  const std::string& line_id() const;
  void set_line_id(const std::string& value);
  void set_line_id(std::string&& value);
  void set_line_id(const char* value);
  void set_line_id(const char* value, size_t size);
  std::string* mutable_line_id();
  std::string* release_line_id();
  void set_allocated_line_id(std::string* line_id);
  private:
  const std::string& _internal_line_id() const;
  void _internal_set_line_id(const std::string& value);
  std::string* _internal_mutable_line_id();
  public:

  // string vehicle_id = 8;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // .google.protobuf.Timestamp register_date = 9;
  bool has_register_date() const;
  private:
  bool _internal_has_register_date() const;
  public:
  void clear_register_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_register_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_register_date();
  void set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_register_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_register_date();
  public:
  void unsafe_arena_set_allocated_register_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* register_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_register_date();

  // int32 register_code = 6;
  void clear_register_code();
  ::PROTOBUF_NAMESPACE_ID::int32 register_code() const;
  void set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_register_code() const;
  void _internal_set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 emv_parameters_version = 10;
  void clear_emv_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version() const;
  void set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_emv_parameters_version() const;
  void _internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bin_parameters_version = 11;
  void clear_bin_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version() const;
  void set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bin_parameters_version() const;
  void _internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 capk_parameters_version = 12;
  void clear_capk_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 capk_parameters_version() const;
  void set_capk_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_capk_parameters_version() const;
  void _internal_set_capk_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.ParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reader_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ksn_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* register_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 register_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 capk_parameters_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_5fparameters_2eproto;
};
// -------------------------------------------------------------------

class ParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:axis.transactions.ParametersResponse) */ {
 public:
  inline ParametersResponse() : ParametersResponse(nullptr) {}
  virtual ~ParametersResponse();

  ParametersResponse(const ParametersResponse& from);
  ParametersResponse(ParametersResponse&& from) noexcept
    : ParametersResponse() {
    *this = ::std::move(from);
  }

  inline ParametersResponse& operator=(const ParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParametersResponse& operator=(ParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParametersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParametersResponse* internal_default_instance() {
    return reinterpret_cast<const ParametersResponse*>(
               &_ParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParametersResponse& a, ParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParametersResponse* New() const final {
    return CreateMaybeMessage<ParametersResponse>(nullptr);
  }

  ParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParametersResponse& from);
  void MergeFrom(const ParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "axis.transactions.ParametersResponse";
  }
  protected:
  explicit ParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_5fparameters_2eproto);
    return ::descriptor_table_device_5fparameters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAidTableFieldNumber = 4,
    kBinTableFieldNumber = 5,
    kCapkTableFieldNumber = 6,
    kResponseDateFieldNumber = 7,
    kResponseCodeFieldNumber = 1,
    kEmvParametersVersionFieldNumber = 2,
    kBinParametersVersionFieldNumber = 3,
  };
  // repeated .axis.transactions.ApplicationIdentifier aid_table = 4;
  int aid_table_size() const;
  private:
  int _internal_aid_table_size() const;
  public:
  void clear_aid_table();
  ::axis::transactions::ApplicationIdentifier* mutable_aid_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::ApplicationIdentifier >*
      mutable_aid_table();
  private:
  const ::axis::transactions::ApplicationIdentifier& _internal_aid_table(int index) const;
  ::axis::transactions::ApplicationIdentifier* _internal_add_aid_table();
  public:
  const ::axis::transactions::ApplicationIdentifier& aid_table(int index) const;
  ::axis::transactions::ApplicationIdentifier* add_aid_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::ApplicationIdentifier >&
      aid_table() const;

  // repeated .axis.transactions.AcceptedBankIdentificationNumber bin_table = 5;
  int bin_table_size() const;
  private:
  int _internal_bin_table_size() const;
  public:
  void clear_bin_table();
  ::axis::transactions::AcceptedBankIdentificationNumber* mutable_bin_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::AcceptedBankIdentificationNumber >*
      mutable_bin_table();
  private:
  const ::axis::transactions::AcceptedBankIdentificationNumber& _internal_bin_table(int index) const;
  ::axis::transactions::AcceptedBankIdentificationNumber* _internal_add_bin_table();
  public:
  const ::axis::transactions::AcceptedBankIdentificationNumber& bin_table(int index) const;
  ::axis::transactions::AcceptedBankIdentificationNumber* add_bin_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::AcceptedBankIdentificationNumber >&
      bin_table() const;

  // repeated .axis.transactions.CertificateAuthorityPublicKeyTable capk_table = 6;
  int capk_table_size() const;
  private:
  int _internal_capk_table_size() const;
  public:
  void clear_capk_table();
  ::axis::transactions::CertificateAuthorityPublicKeyTable* mutable_capk_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::CertificateAuthorityPublicKeyTable >*
      mutable_capk_table();
  private:
  const ::axis::transactions::CertificateAuthorityPublicKeyTable& _internal_capk_table(int index) const;
  ::axis::transactions::CertificateAuthorityPublicKeyTable* _internal_add_capk_table();
  public:
  const ::axis::transactions::CertificateAuthorityPublicKeyTable& capk_table(int index) const;
  ::axis::transactions::CertificateAuthorityPublicKeyTable* add_capk_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::CertificateAuthorityPublicKeyTable >&
      capk_table() const;

  // .google.protobuf.Timestamp response_date = 7;
  bool has_response_date() const;
  private:
  bool _internal_has_response_date() const;
  public:
  void clear_response_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& response_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_response_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_response_date();
  void set_allocated_response_date(PROTOBUF_NAMESPACE_ID::Timestamp* response_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_response_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_response_date();
  public:
  void unsafe_arena_set_allocated_response_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* response_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_response_date();

  // int32 response_code = 1;
  void clear_response_code();
  ::PROTOBUF_NAMESPACE_ID::int32 response_code() const;
  void set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_code() const;
  void _internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 emv_parameters_version = 2;
  void clear_emv_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version() const;
  void set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_emv_parameters_version() const;
  void _internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bin_parameters_version = 3;
  void clear_bin_parameters_version();
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version() const;
  void set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bin_parameters_version() const;
  void _internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:axis.transactions.ParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::ApplicationIdentifier > aid_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::AcceptedBankIdentificationNumber > bin_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::CertificateAuthorityPublicKeyTable > capk_table_;
  PROTOBUF_NAMESPACE_ID::Timestamp* response_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 emv_parameters_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 bin_parameters_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParametersRequest

// string device_id = 1;
inline void ParametersRequest::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::device_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.device_id)
  return _internal_device_id();
}
inline void ParametersRequest::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.device_id)
}
inline std::string* ParametersRequest::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& ParametersRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void ParametersRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.device_id)
}
inline void ParametersRequest::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.device_id)
}
inline void ParametersRequest::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.device_id)
}
inline std::string* ParametersRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.device_id)
}

// string operator_id = 2;
inline void ParametersRequest::clear_operator_id() {
  operator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::operator_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.operator_id)
  return _internal_operator_id();
}
inline void ParametersRequest::set_operator_id(const std::string& value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.operator_id)
}
inline std::string* ParametersRequest::mutable_operator_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.operator_id)
  return _internal_mutable_operator_id();
}
inline const std::string& ParametersRequest::_internal_operator_id() const {
  return operator_id_.Get();
}
inline void ParametersRequest::_internal_set_operator_id(const std::string& value) {
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_operator_id(std::string&& value) {
  
  operator_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.operator_id)
}
inline void ParametersRequest::set_operator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.operator_id)
}
inline void ParametersRequest::set_operator_id(const char* value,
    size_t size) {
  
  operator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.operator_id)
}
inline std::string* ParametersRequest::_internal_mutable_operator_id() {
  
  return operator_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_operator_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.operator_id)
  return operator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_operator_id(std::string* operator_id) {
  if (operator_id != nullptr) {
    
  } else {
    
  }
  operator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.operator_id)
}

// string reader_serial_number = 3;
inline void ParametersRequest::clear_reader_serial_number() {
  reader_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::reader_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.reader_serial_number)
  return _internal_reader_serial_number();
}
inline void ParametersRequest::set_reader_serial_number(const std::string& value) {
  _internal_set_reader_serial_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.reader_serial_number)
}
inline std::string* ParametersRequest::mutable_reader_serial_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.reader_serial_number)
  return _internal_mutable_reader_serial_number();
}
inline const std::string& ParametersRequest::_internal_reader_serial_number() const {
  return reader_serial_number_.Get();
}
inline void ParametersRequest::_internal_set_reader_serial_number(const std::string& value) {
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_reader_serial_number(std::string&& value) {
  
  reader_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.reader_serial_number)
}
inline void ParametersRequest::set_reader_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.reader_serial_number)
}
inline void ParametersRequest::set_reader_serial_number(const char* value,
    size_t size) {
  
  reader_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.reader_serial_number)
}
inline std::string* ParametersRequest::_internal_mutable_reader_serial_number() {
  
  return reader_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_reader_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.reader_serial_number)
  return reader_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_reader_serial_number(std::string* reader_serial_number) {
  if (reader_serial_number != nullptr) {
    
  } else {
    
  }
  reader_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reader_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.reader_serial_number)
}

// string device_serial_number = 4;
inline void ParametersRequest::clear_device_serial_number() {
  device_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::device_serial_number() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.device_serial_number)
  return _internal_device_serial_number();
}
inline void ParametersRequest::set_device_serial_number(const std::string& value) {
  _internal_set_device_serial_number(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.device_serial_number)
}
inline std::string* ParametersRequest::mutable_device_serial_number() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.device_serial_number)
  return _internal_mutable_device_serial_number();
}
inline const std::string& ParametersRequest::_internal_device_serial_number() const {
  return device_serial_number_.Get();
}
inline void ParametersRequest::_internal_set_device_serial_number(const std::string& value) {
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_device_serial_number(std::string&& value) {
  
  device_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.device_serial_number)
}
inline void ParametersRequest::set_device_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.device_serial_number)
}
inline void ParametersRequest::set_device_serial_number(const char* value,
    size_t size) {
  
  device_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.device_serial_number)
}
inline std::string* ParametersRequest::_internal_mutable_device_serial_number() {
  
  return device_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_device_serial_number() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.device_serial_number)
  return device_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_device_serial_number(std::string* device_serial_number) {
  if (device_serial_number != nullptr) {
    
  } else {
    
  }
  device_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.device_serial_number)
}

// bytes ksn_data = 5;
inline void ParametersRequest::clear_ksn_data() {
  ksn_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::ksn_data() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.ksn_data)
  return _internal_ksn_data();
}
inline void ParametersRequest::set_ksn_data(const std::string& value) {
  _internal_set_ksn_data(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.ksn_data)
}
inline std::string* ParametersRequest::mutable_ksn_data() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.ksn_data)
  return _internal_mutable_ksn_data();
}
inline const std::string& ParametersRequest::_internal_ksn_data() const {
  return ksn_data_.Get();
}
inline void ParametersRequest::_internal_set_ksn_data(const std::string& value) {
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_ksn_data(std::string&& value) {
  
  ksn_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.ksn_data)
}
inline void ParametersRequest::set_ksn_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.ksn_data)
}
inline void ParametersRequest::set_ksn_data(const void* value,
    size_t size) {
  
  ksn_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.ksn_data)
}
inline std::string* ParametersRequest::_internal_mutable_ksn_data() {
  
  return ksn_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_ksn_data() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.ksn_data)
  return ksn_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_ksn_data(std::string* ksn_data) {
  if (ksn_data != nullptr) {
    
  } else {
    
  }
  ksn_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ksn_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.ksn_data)
}

// int32 register_code = 6;
inline void ParametersRequest::clear_register_code() {
  register_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::_internal_register_code() const {
  return register_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::register_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.register_code)
  return _internal_register_code();
}
inline void ParametersRequest::_internal_set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  register_code_ = value;
}
inline void ParametersRequest::set_register_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_register_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.register_code)
}

// string line_id = 7;
inline void ParametersRequest::clear_line_id() {
  line_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::line_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.line_id)
  return _internal_line_id();
}
inline void ParametersRequest::set_line_id(const std::string& value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.line_id)
}
inline std::string* ParametersRequest::mutable_line_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.line_id)
  return _internal_mutable_line_id();
}
inline const std::string& ParametersRequest::_internal_line_id() const {
  return line_id_.Get();
}
inline void ParametersRequest::_internal_set_line_id(const std::string& value) {
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_line_id(std::string&& value) {
  
  line_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.line_id)
}
inline void ParametersRequest::set_line_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.line_id)
}
inline void ParametersRequest::set_line_id(const char* value,
    size_t size) {
  
  line_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.line_id)
}
inline std::string* ParametersRequest::_internal_mutable_line_id() {
  
  return line_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_line_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.line_id)
  return line_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_line_id(std::string* line_id) {
  if (line_id != nullptr) {
    
  } else {
    
  }
  line_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.line_id)
}

// string vehicle_id = 8;
inline void ParametersRequest::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParametersRequest::vehicle_id() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.vehicle_id)
  return _internal_vehicle_id();
}
inline void ParametersRequest::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.vehicle_id)
}
inline std::string* ParametersRequest::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& ParametersRequest::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void ParametersRequest::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParametersRequest::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:axis.transactions.ParametersRequest.vehicle_id)
}
inline void ParametersRequest::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:axis.transactions.ParametersRequest.vehicle_id)
}
inline void ParametersRequest::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:axis.transactions.ParametersRequest.vehicle_id)
}
inline std::string* ParametersRequest::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParametersRequest::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParametersRequest::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.vehicle_id)
}

// .google.protobuf.Timestamp register_date = 9;
inline bool ParametersRequest::_internal_has_register_date() const {
  return this != internal_default_instance() && register_date_ != nullptr;
}
inline bool ParametersRequest::has_register_date() const {
  return _internal_has_register_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ParametersRequest::_internal_register_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = register_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ParametersRequest::register_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.register_date)
  return _internal_register_date();
}
inline void ParametersRequest::unsafe_arena_set_allocated_register_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  register_date_ = register_date;
  if (register_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.ParametersRequest.register_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersRequest::release_register_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersRequest::unsafe_arena_release_register_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersRequest.register_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = register_date_;
  register_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersRequest::_internal_mutable_register_date() {
  
  if (register_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    register_date_ = p;
  }
  return register_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersRequest::mutable_register_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersRequest.register_date)
  return _internal_mutable_register_date();
}
inline void ParametersRequest::set_allocated_register_date(PROTOBUF_NAMESPACE_ID::Timestamp* register_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date_);
  }
  if (register_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_date)->GetArena();
    if (message_arena != submessage_arena) {
      register_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_date, submessage_arena);
    }
    
  } else {
    
  }
  register_date_ = register_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersRequest.register_date)
}

// int32 emv_parameters_version = 10;
inline void ParametersRequest::clear_emv_parameters_version() {
  emv_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::_internal_emv_parameters_version() const {
  return emv_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::emv_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.emv_parameters_version)
  return _internal_emv_parameters_version();
}
inline void ParametersRequest::_internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  emv_parameters_version_ = value;
}
inline void ParametersRequest::set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_emv_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.emv_parameters_version)
}

// int32 bin_parameters_version = 11;
inline void ParametersRequest::clear_bin_parameters_version() {
  bin_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::_internal_bin_parameters_version() const {
  return bin_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::bin_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.bin_parameters_version)
  return _internal_bin_parameters_version();
}
inline void ParametersRequest::_internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bin_parameters_version_ = value;
}
inline void ParametersRequest::set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bin_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.bin_parameters_version)
}

// int32 capk_parameters_version = 12;
inline void ParametersRequest::clear_capk_parameters_version() {
  capk_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::_internal_capk_parameters_version() const {
  return capk_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersRequest::capk_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersRequest.capk_parameters_version)
  return _internal_capk_parameters_version();
}
inline void ParametersRequest::_internal_set_capk_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  capk_parameters_version_ = value;
}
inline void ParametersRequest::set_capk_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_capk_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersRequest.capk_parameters_version)
}

// -------------------------------------------------------------------

// ParametersResponse

// int32 response_code = 1;
inline void ParametersResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersResponse::_internal_response_code() const {
  return response_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersResponse::response_code() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.response_code)
  return _internal_response_code();
}
inline void ParametersResponse::_internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response_code_ = value;
}
inline void ParametersResponse::set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersResponse.response_code)
}

// int32 emv_parameters_version = 2;
inline void ParametersResponse::clear_emv_parameters_version() {
  emv_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersResponse::_internal_emv_parameters_version() const {
  return emv_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersResponse::emv_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.emv_parameters_version)
  return _internal_emv_parameters_version();
}
inline void ParametersResponse::_internal_set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  emv_parameters_version_ = value;
}
inline void ParametersResponse::set_emv_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_emv_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersResponse.emv_parameters_version)
}

// int32 bin_parameters_version = 3;
inline void ParametersResponse::clear_bin_parameters_version() {
  bin_parameters_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersResponse::_internal_bin_parameters_version() const {
  return bin_parameters_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParametersResponse::bin_parameters_version() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.bin_parameters_version)
  return _internal_bin_parameters_version();
}
inline void ParametersResponse::_internal_set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bin_parameters_version_ = value;
}
inline void ParametersResponse::set_bin_parameters_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bin_parameters_version(value);
  // @@protoc_insertion_point(field_set:axis.transactions.ParametersResponse.bin_parameters_version)
}

// repeated .axis.transactions.ApplicationIdentifier aid_table = 4;
inline int ParametersResponse::_internal_aid_table_size() const {
  return aid_table_.size();
}
inline int ParametersResponse::aid_table_size() const {
  return _internal_aid_table_size();
}
inline ::axis::transactions::ApplicationIdentifier* ParametersResponse::mutable_aid_table(int index) {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersResponse.aid_table)
  return aid_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::ApplicationIdentifier >*
ParametersResponse::mutable_aid_table() {
  // @@protoc_insertion_point(field_mutable_list:axis.transactions.ParametersResponse.aid_table)
  return &aid_table_;
}
inline const ::axis::transactions::ApplicationIdentifier& ParametersResponse::_internal_aid_table(int index) const {
  return aid_table_.Get(index);
}
inline const ::axis::transactions::ApplicationIdentifier& ParametersResponse::aid_table(int index) const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.aid_table)
  return _internal_aid_table(index);
}
inline ::axis::transactions::ApplicationIdentifier* ParametersResponse::_internal_add_aid_table() {
  return aid_table_.Add();
}
inline ::axis::transactions::ApplicationIdentifier* ParametersResponse::add_aid_table() {
  // @@protoc_insertion_point(field_add:axis.transactions.ParametersResponse.aid_table)
  return _internal_add_aid_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::ApplicationIdentifier >&
ParametersResponse::aid_table() const {
  // @@protoc_insertion_point(field_list:axis.transactions.ParametersResponse.aid_table)
  return aid_table_;
}

// repeated .axis.transactions.AcceptedBankIdentificationNumber bin_table = 5;
inline int ParametersResponse::_internal_bin_table_size() const {
  return bin_table_.size();
}
inline int ParametersResponse::bin_table_size() const {
  return _internal_bin_table_size();
}
inline ::axis::transactions::AcceptedBankIdentificationNumber* ParametersResponse::mutable_bin_table(int index) {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersResponse.bin_table)
  return bin_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::AcceptedBankIdentificationNumber >*
ParametersResponse::mutable_bin_table() {
  // @@protoc_insertion_point(field_mutable_list:axis.transactions.ParametersResponse.bin_table)
  return &bin_table_;
}
inline const ::axis::transactions::AcceptedBankIdentificationNumber& ParametersResponse::_internal_bin_table(int index) const {
  return bin_table_.Get(index);
}
inline const ::axis::transactions::AcceptedBankIdentificationNumber& ParametersResponse::bin_table(int index) const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.bin_table)
  return _internal_bin_table(index);
}
inline ::axis::transactions::AcceptedBankIdentificationNumber* ParametersResponse::_internal_add_bin_table() {
  return bin_table_.Add();
}
inline ::axis::transactions::AcceptedBankIdentificationNumber* ParametersResponse::add_bin_table() {
  // @@protoc_insertion_point(field_add:axis.transactions.ParametersResponse.bin_table)
  return _internal_add_bin_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::AcceptedBankIdentificationNumber >&
ParametersResponse::bin_table() const {
  // @@protoc_insertion_point(field_list:axis.transactions.ParametersResponse.bin_table)
  return bin_table_;
}

// repeated .axis.transactions.CertificateAuthorityPublicKeyTable capk_table = 6;
inline int ParametersResponse::_internal_capk_table_size() const {
  return capk_table_.size();
}
inline int ParametersResponse::capk_table_size() const {
  return _internal_capk_table_size();
}
inline ::axis::transactions::CertificateAuthorityPublicKeyTable* ParametersResponse::mutable_capk_table(int index) {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersResponse.capk_table)
  return capk_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::CertificateAuthorityPublicKeyTable >*
ParametersResponse::mutable_capk_table() {
  // @@protoc_insertion_point(field_mutable_list:axis.transactions.ParametersResponse.capk_table)
  return &capk_table_;
}
inline const ::axis::transactions::CertificateAuthorityPublicKeyTable& ParametersResponse::_internal_capk_table(int index) const {
  return capk_table_.Get(index);
}
inline const ::axis::transactions::CertificateAuthorityPublicKeyTable& ParametersResponse::capk_table(int index) const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.capk_table)
  return _internal_capk_table(index);
}
inline ::axis::transactions::CertificateAuthorityPublicKeyTable* ParametersResponse::_internal_add_capk_table() {
  return capk_table_.Add();
}
inline ::axis::transactions::CertificateAuthorityPublicKeyTable* ParametersResponse::add_capk_table() {
  // @@protoc_insertion_point(field_add:axis.transactions.ParametersResponse.capk_table)
  return _internal_add_capk_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::axis::transactions::CertificateAuthorityPublicKeyTable >&
ParametersResponse::capk_table() const {
  // @@protoc_insertion_point(field_list:axis.transactions.ParametersResponse.capk_table)
  return capk_table_;
}

// .google.protobuf.Timestamp response_date = 7;
inline bool ParametersResponse::_internal_has_response_date() const {
  return this != internal_default_instance() && response_date_ != nullptr;
}
inline bool ParametersResponse::has_response_date() const {
  return _internal_has_response_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ParametersResponse::_internal_response_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = response_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ParametersResponse::response_date() const {
  // @@protoc_insertion_point(field_get:axis.transactions.ParametersResponse.response_date)
  return _internal_response_date();
}
inline void ParametersResponse::unsafe_arena_set_allocated_response_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* response_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_date_);
  }
  response_date_ = response_date;
  if (response_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:axis.transactions.ParametersResponse.response_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersResponse::release_response_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = response_date_;
  response_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersResponse::unsafe_arena_release_response_date() {
  // @@protoc_insertion_point(field_release:axis.transactions.ParametersResponse.response_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = response_date_;
  response_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersResponse::_internal_mutable_response_date() {
  
  if (response_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    response_date_ = p;
  }
  return response_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ParametersResponse::mutable_response_date() {
  // @@protoc_insertion_point(field_mutable:axis.transactions.ParametersResponse.response_date)
  return _internal_mutable_response_date();
}
inline void ParametersResponse::set_allocated_response_date(PROTOBUF_NAMESPACE_ID::Timestamp* response_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_date_);
  }
  if (response_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_date)->GetArena();
    if (message_arena != submessage_arena) {
      response_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_date, submessage_arena);
    }
    
  } else {
    
  }
  response_date_ = response_date;
  // @@protoc_insertion_point(field_set_allocated:axis.transactions.ParametersResponse.response_date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transactions
}  // namespace axis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_5fparameters_2eproto
