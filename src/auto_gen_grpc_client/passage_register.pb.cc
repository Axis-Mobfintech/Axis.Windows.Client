// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: passage_register.proto

#include "passage_register.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace axis {
namespace transactions {
constexpr RegisterPassageRequest::RegisterPassageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reader_serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_suid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pan_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , par_card_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vehicle_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , geolocation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , passage_date_(nullptr)
  , transaction_date_(nullptr)
  , register_code_(0)
  , emv_parameters_version_(0)
  , bin_parameters_version_(0)
  , restriction_list_version_(0)
  , acceptance_list_version_(0)
  , transaction_value_(0){}
struct RegisterPassageRequestDefaultTypeInternal {
  constexpr RegisterPassageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterPassageRequestDefaultTypeInternal() {}
  union {
    RegisterPassageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterPassageRequestDefaultTypeInternal _RegisterPassageRequest_default_instance_;
constexpr RegisterPassageResponse::RegisterPassageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gateway_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_suid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_code_(0)
  , emv_parameters_version_(0)
  , bin_parameters_version_(0)
  , restriction_list_version_(0){}
struct RegisterPassageResponseDefaultTypeInternal {
  constexpr RegisterPassageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterPassageResponseDefaultTypeInternal() {}
  union {
    RegisterPassageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterPassageResponseDefaultTypeInternal _RegisterPassageResponse_default_instance_;
}  // namespace transactions
}  // namespace axis
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_passage_5fregister_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_passage_5fregister_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_passage_5fregister_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_passage_5fregister_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, operator_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, reader_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, device_serial_number_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, register_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, passage_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, transaction_date_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, device_suid_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, pan_hash_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, par_card_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, transaction_data_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, emv_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, bin_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, restriction_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, acceptance_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, transaction_value_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, line_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageRequest, geolocation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, gateway_uid_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, emv_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, bin_parameters_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, restriction_list_version_),
  PROTOBUF_FIELD_OFFSET(::axis::transactions::RegisterPassageResponse, device_suid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::axis::transactions::RegisterPassageRequest)},
  { 25, -1, -1, sizeof(::axis::transactions::RegisterPassageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_RegisterPassageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::axis::transactions::_RegisterPassageResponse_default_instance_),
};

const char descriptor_table_protodef_passage_5fregister_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026passage_register.proto\022\021axis.transacti"
  "ons\032\037google/protobuf/timestamp.proto\"\246\004\n"
  "\026RegisterPassageRequest\022\021\n\tdevice_id\030\001 \001"
  "(\t\022\023\n\013operator_id\030\002 \001(\t\022\034\n\024reader_serial"
  "_number\030\003 \001(\t\022\034\n\024device_serial_number\030\004 "
  "\001(\t\022\025\n\rregister_code\030\005 \001(\005\0220\n\014passage_da"
  "te\030\006 \001(\0132\032.google.protobuf.Timestamp\0224\n\020"
  "transaction_date\030\007 \001(\0132\032.google.protobuf"
  ".Timestamp\022\023\n\013device_suid\030\010 \001(\t\022\020\n\010pan_h"
  "ash\030\t \001(\014\022\020\n\010par_card\030\n \001(\t\022\030\n\020transacti"
  "on_data\030\013 \001(\014\022\036\n\026emv_parameters_version\030"
  "\014 \001(\005\022\036\n\026bin_parameters_version\030\r \001(\005\022 \n"
  "\030restriction_list_version\030\016 \001(\005\022\037\n\027accep"
  "tance_list_version\030\017 \001(\005\022\031\n\021transaction_"
  "value\030\020 \001(\005\022\017\n\007line_id\030\021 \001(\t\022\022\n\nvehicle_"
  "id\030\022 \001(\t\022\023\n\013geolocation\030\023 \001(\t\"\274\001\n\027Regist"
  "erPassageResponse\022\025\n\rresponse_code\030\001 \001(\005"
  "\022\023\n\013gateway_uid\030\002 \001(\t\022\036\n\026emv_parameters_"
  "version\030\003 \001(\005\022\036\n\026bin_parameters_version\030"
  "\004 \001(\005\022 \n\030restriction_list_version\030\005 \001(\005\022"
  "\023\n\013device_suid\030\006 \001(\t2\202\001\n\026RegisterPassage"
  "Service\022h\n\017MakeTransaction\022).axis.transa"
  "ctions.RegisterPassageRequest\032*.axis.tra"
  "nsactions.RegisterPassageResponseBQ\n#com"
  ".axismobfintech.gpb.transactionsZ\022axistr"
  "ansactionspb\252\002\025Axis.GPB.Transactionsb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_passage_5fregister_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_passage_5fregister_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_passage_5fregister_2eproto = {
  false, false, 1044, descriptor_table_protodef_passage_5fregister_2eproto, "passage_register.proto", 
  &descriptor_table_passage_5fregister_2eproto_once, descriptor_table_passage_5fregister_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_passage_5fregister_2eproto::offsets,
  file_level_metadata_passage_5fregister_2eproto, file_level_enum_descriptors_passage_5fregister_2eproto, file_level_service_descriptors_passage_5fregister_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_passage_5fregister_2eproto_getter() {
  return &descriptor_table_passage_5fregister_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_passage_5fregister_2eproto(&descriptor_table_passage_5fregister_2eproto);
namespace axis {
namespace transactions {

// ===================================================================

class RegisterPassageRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& passage_date(const RegisterPassageRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_date(const RegisterPassageRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RegisterPassageRequest::_Internal::passage_date(const RegisterPassageRequest* msg) {
  return *msg->passage_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RegisterPassageRequest::_Internal::transaction_date(const RegisterPassageRequest* msg) {
  return *msg->transaction_date_;
}
void RegisterPassageRequest::clear_passage_date() {
  if (GetArenaForAllocation() == nullptr && passage_date_ != nullptr) {
    delete passage_date_;
  }
  passage_date_ = nullptr;
}
void RegisterPassageRequest::clear_transaction_date() {
  if (GetArenaForAllocation() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
}
RegisterPassageRequest::RegisterPassageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:axis.transactions.RegisterPassageRequest)
}
RegisterPassageRequest::RegisterPassageRequest(const RegisterPassageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_id().empty()) {
    operator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_id(), 
      GetArenaForAllocation());
  }
  reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reader_serial_number().empty()) {
    reader_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reader_serial_number(), 
      GetArenaForAllocation());
  }
  device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_serial_number().empty()) {
    device_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_serial_number(), 
      GetArenaForAllocation());
  }
  device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_suid().empty()) {
    device_suid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_suid(), 
      GetArenaForAllocation());
  }
  pan_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pan_hash().empty()) {
    pan_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pan_hash(), 
      GetArenaForAllocation());
  }
  par_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_par_card().empty()) {
    par_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_par_card(), 
      GetArenaForAllocation());
  }
  transaction_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_data().empty()) {
    transaction_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_data(), 
      GetArenaForAllocation());
  }
  line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_id().empty()) {
    line_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line_id(), 
      GetArenaForAllocation());
  }
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vehicle_id(), 
      GetArenaForAllocation());
  }
  geolocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geolocation().empty()) {
    geolocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_geolocation(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_passage_date()) {
    passage_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.passage_date_);
  } else {
    passage_date_ = nullptr;
  }
  if (from._internal_has_transaction_date()) {
    transaction_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.transaction_date_);
  } else {
    transaction_date_ = nullptr;
  }
  ::memcpy(&register_code_, &from.register_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_value_) -
    reinterpret_cast<char*>(&register_code_)) + sizeof(transaction_value_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.RegisterPassageRequest)
}

void RegisterPassageRequest::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reader_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pan_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
par_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
line_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
geolocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&passage_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_value_) -
    reinterpret_cast<char*>(&passage_date_)) + sizeof(transaction_value_));
}

RegisterPassageRequest::~RegisterPassageRequest() {
  // @@protoc_insertion_point(destructor:axis.transactions.RegisterPassageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterPassageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_suid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pan_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  par_card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geolocation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete passage_date_;
  if (this != internal_default_instance()) delete transaction_date_;
}

void RegisterPassageRequest::ArenaDtor(void* object) {
  RegisterPassageRequest* _this = reinterpret_cast< RegisterPassageRequest* >(object);
  (void)_this;
}
void RegisterPassageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterPassageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterPassageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.RegisterPassageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  operator_id_.ClearToEmpty();
  reader_serial_number_.ClearToEmpty();
  device_serial_number_.ClearToEmpty();
  device_suid_.ClearToEmpty();
  pan_hash_.ClearToEmpty();
  par_card_.ClearToEmpty();
  transaction_data_.ClearToEmpty();
  line_id_.ClearToEmpty();
  vehicle_id_.ClearToEmpty();
  geolocation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && passage_date_ != nullptr) {
    delete passage_date_;
  }
  passage_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_date_ != nullptr) {
    delete transaction_date_;
  }
  transaction_date_ = nullptr;
  ::memset(&register_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_value_) -
      reinterpret_cast<char*>(&register_code_)) + sizeof(transaction_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterPassageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.operator_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reader_serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reader_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.reader_serial_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.device_serial_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 register_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          register_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp passage_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_passage_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp transaction_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_suid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_device_suid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.device_suid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pan_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_pan_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string par_card = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_par_card();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.par_card"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_transaction_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 emv_parameters_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          emv_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bin_parameters_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          bin_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 restriction_list_version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          restriction_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 acceptance_list_version = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          acceptance_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 transaction_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          transaction_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string line_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_line_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.line_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vehicle_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.vehicle_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string geolocation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_geolocation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageRequest.geolocation"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPassageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.RegisterPassageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string operator_id = 2;
  if (!this->_internal_operator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_id().data(), static_cast<int>(this->_internal_operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.operator_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_id(), target);
  }

  // string reader_serial_number = 3;
  if (!this->_internal_reader_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reader_serial_number().data(), static_cast<int>(this->_internal_reader_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.reader_serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reader_serial_number(), target);
  }

  // string device_serial_number = 4;
  if (!this->_internal_device_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_serial_number().data(), static_cast<int>(this->_internal_device_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.device_serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_serial_number(), target);
  }

  // int32 register_code = 5;
  if (this->_internal_register_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_register_code(), target);
  }

  // .google.protobuf.Timestamp passage_date = 6;
  if (this->_internal_has_passage_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::passage_date(this), target, stream);
  }

  // .google.protobuf.Timestamp transaction_date = 7;
  if (this->_internal_has_transaction_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transaction_date(this), target, stream);
  }

  // string device_suid = 8;
  if (!this->_internal_device_suid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_suid().data(), static_cast<int>(this->_internal_device_suid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.device_suid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device_suid(), target);
  }

  // bytes pan_hash = 9;
  if (!this->_internal_pan_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_pan_hash(), target);
  }

  // string par_card = 10;
  if (!this->_internal_par_card().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_par_card().data(), static_cast<int>(this->_internal_par_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.par_card");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_par_card(), target);
  }

  // bytes transaction_data = 11;
  if (!this->_internal_transaction_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_transaction_data(), target);
  }

  // int32 emv_parameters_version = 12;
  if (this->_internal_emv_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_emv_parameters_version(), target);
  }

  // int32 bin_parameters_version = 13;
  if (this->_internal_bin_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_bin_parameters_version(), target);
  }

  // int32 restriction_list_version = 14;
  if (this->_internal_restriction_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_restriction_list_version(), target);
  }

  // int32 acceptance_list_version = 15;
  if (this->_internal_acceptance_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_acceptance_list_version(), target);
  }

  // int32 transaction_value = 16;
  if (this->_internal_transaction_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_transaction_value(), target);
  }

  // string line_id = 17;
  if (!this->_internal_line_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_id().data(), static_cast<int>(this->_internal_line_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.line_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_line_id(), target);
  }

  // string vehicle_id = 18;
  if (!this->_internal_vehicle_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_vehicle_id(), target);
  }

  // string geolocation = 19;
  if (!this->_internal_geolocation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geolocation().data(), static_cast<int>(this->_internal_geolocation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageRequest.geolocation");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_geolocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.RegisterPassageRequest)
  return target;
}

size_t RegisterPassageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.RegisterPassageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string operator_id = 2;
  if (!this->_internal_operator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_id());
  }

  // string reader_serial_number = 3;
  if (!this->_internal_reader_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reader_serial_number());
  }

  // string device_serial_number = 4;
  if (!this->_internal_device_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_serial_number());
  }

  // string device_suid = 8;
  if (!this->_internal_device_suid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_suid());
  }

  // bytes pan_hash = 9;
  if (!this->_internal_pan_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pan_hash());
  }

  // string par_card = 10;
  if (!this->_internal_par_card().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_par_card());
  }

  // bytes transaction_data = 11;
  if (!this->_internal_transaction_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_data());
  }

  // string line_id = 17;
  if (!this->_internal_line_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_id());
  }

  // string vehicle_id = 18;
  if (!this->_internal_vehicle_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // string geolocation = 19;
  if (!this->_internal_geolocation().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geolocation());
  }

  // .google.protobuf.Timestamp passage_date = 6;
  if (this->_internal_has_passage_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passage_date_);
  }

  // .google.protobuf.Timestamp transaction_date = 7;
  if (this->_internal_has_transaction_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_date_);
  }

  // int32 register_code = 5;
  if (this->_internal_register_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_register_code());
  }

  // int32 emv_parameters_version = 12;
  if (this->_internal_emv_parameters_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_emv_parameters_version());
  }

  // int32 bin_parameters_version = 13;
  if (this->_internal_bin_parameters_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bin_parameters_version());
  }

  // int32 restriction_list_version = 14;
  if (this->_internal_restriction_list_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_restriction_list_version());
  }

  // int32 acceptance_list_version = 15;
  if (this->_internal_acceptance_list_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_acceptance_list_version());
  }

  // int32 transaction_value = 16;
  if (this->_internal_transaction_value() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transaction_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterPassageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterPassageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterPassageRequest::GetClassData() const { return &_class_data_; }

void RegisterPassageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterPassageRequest *>(to)->MergeFrom(
      static_cast<const RegisterPassageRequest &>(from));
}


void RegisterPassageRequest::MergeFrom(const RegisterPassageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.RegisterPassageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_operator_id().empty()) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (!from._internal_reader_serial_number().empty()) {
    _internal_set_reader_serial_number(from._internal_reader_serial_number());
  }
  if (!from._internal_device_serial_number().empty()) {
    _internal_set_device_serial_number(from._internal_device_serial_number());
  }
  if (!from._internal_device_suid().empty()) {
    _internal_set_device_suid(from._internal_device_suid());
  }
  if (!from._internal_pan_hash().empty()) {
    _internal_set_pan_hash(from._internal_pan_hash());
  }
  if (!from._internal_par_card().empty()) {
    _internal_set_par_card(from._internal_par_card());
  }
  if (!from._internal_transaction_data().empty()) {
    _internal_set_transaction_data(from._internal_transaction_data());
  }
  if (!from._internal_line_id().empty()) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (!from._internal_vehicle_id().empty()) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (!from._internal_geolocation().empty()) {
    _internal_set_geolocation(from._internal_geolocation());
  }
  if (from._internal_has_passage_date()) {
    _internal_mutable_passage_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_passage_date());
  }
  if (from._internal_has_transaction_date()) {
    _internal_mutable_transaction_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_transaction_date());
  }
  if (from._internal_register_code() != 0) {
    _internal_set_register_code(from._internal_register_code());
  }
  if (from._internal_emv_parameters_version() != 0) {
    _internal_set_emv_parameters_version(from._internal_emv_parameters_version());
  }
  if (from._internal_bin_parameters_version() != 0) {
    _internal_set_bin_parameters_version(from._internal_bin_parameters_version());
  }
  if (from._internal_restriction_list_version() != 0) {
    _internal_set_restriction_list_version(from._internal_restriction_list_version());
  }
  if (from._internal_acceptance_list_version() != 0) {
    _internal_set_acceptance_list_version(from._internal_acceptance_list_version());
  }
  if (from._internal_transaction_value() != 0) {
    _internal_set_transaction_value(from._internal_transaction_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterPassageRequest::CopyFrom(const RegisterPassageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.RegisterPassageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPassageRequest::IsInitialized() const {
  return true;
}

void RegisterPassageRequest::InternalSwap(RegisterPassageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator_id_, lhs_arena,
      &other->operator_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reader_serial_number_, lhs_arena,
      &other->reader_serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_serial_number_, lhs_arena,
      &other->device_serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_suid_, lhs_arena,
      &other->device_suid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pan_hash_, lhs_arena,
      &other->pan_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &par_card_, lhs_arena,
      &other->par_card_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_data_, lhs_arena,
      &other->transaction_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &line_id_, lhs_arena,
      &other->line_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vehicle_id_, lhs_arena,
      &other->vehicle_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &geolocation_, lhs_arena,
      &other->geolocation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterPassageRequest, transaction_value_)
      + sizeof(RegisterPassageRequest::transaction_value_)
      - PROTOBUF_FIELD_OFFSET(RegisterPassageRequest, passage_date_)>(
          reinterpret_cast<char*>(&passage_date_),
          reinterpret_cast<char*>(&other->passage_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPassageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_passage_5fregister_2eproto_getter, &descriptor_table_passage_5fregister_2eproto_once,
      file_level_metadata_passage_5fregister_2eproto[0]);
}

// ===================================================================

class RegisterPassageResponse::_Internal {
 public:
};

RegisterPassageResponse::RegisterPassageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:axis.transactions.RegisterPassageResponse)
}
RegisterPassageResponse::RegisterPassageResponse(const RegisterPassageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gateway_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gateway_uid().empty()) {
    gateway_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gateway_uid(), 
      GetArenaForAllocation());
  }
  device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_suid().empty()) {
    device_suid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_suid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&response_code_, &from.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&restriction_list_version_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(restriction_list_version_));
  // @@protoc_insertion_point(copy_constructor:axis.transactions.RegisterPassageResponse)
}

void RegisterPassageResponse::SharedCtor() {
gateway_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_suid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&restriction_list_version_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(restriction_list_version_));
}

RegisterPassageResponse::~RegisterPassageResponse() {
  // @@protoc_insertion_point(destructor:axis.transactions.RegisterPassageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterPassageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gateway_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_suid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterPassageResponse::ArenaDtor(void* object) {
  RegisterPassageResponse* _this = reinterpret_cast< RegisterPassageResponse* >(object);
  (void)_this;
}
void RegisterPassageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterPassageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterPassageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:axis.transactions.RegisterPassageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_uid_.ClearToEmpty();
  device_suid_.ClearToEmpty();
  ::memset(&response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restriction_list_version_) -
      reinterpret_cast<char*>(&response_code_)) + sizeof(restriction_list_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterPassageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gateway_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gateway_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageResponse.gateway_uid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 emv_parameters_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          emv_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bin_parameters_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bin_parameters_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 restriction_list_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          restriction_list_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_suid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_suid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "axis.transactions.RegisterPassageResponse.device_suid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPassageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:axis.transactions.RegisterPassageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 response_code = 1;
  if (this->_internal_response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_response_code(), target);
  }

  // string gateway_uid = 2;
  if (!this->_internal_gateway_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway_uid().data(), static_cast<int>(this->_internal_gateway_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageResponse.gateway_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gateway_uid(), target);
  }

  // int32 emv_parameters_version = 3;
  if (this->_internal_emv_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_emv_parameters_version(), target);
  }

  // int32 bin_parameters_version = 4;
  if (this->_internal_bin_parameters_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bin_parameters_version(), target);
  }

  // int32 restriction_list_version = 5;
  if (this->_internal_restriction_list_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_restriction_list_version(), target);
  }

  // string device_suid = 6;
  if (!this->_internal_device_suid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_suid().data(), static_cast<int>(this->_internal_device_suid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "axis.transactions.RegisterPassageResponse.device_suid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_suid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:axis.transactions.RegisterPassageResponse)
  return target;
}

size_t RegisterPassageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:axis.transactions.RegisterPassageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_uid = 2;
  if (!this->_internal_gateway_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway_uid());
  }

  // string device_suid = 6;
  if (!this->_internal_device_suid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_suid());
  }

  // int32 response_code = 1;
  if (this->_internal_response_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_response_code());
  }

  // int32 emv_parameters_version = 3;
  if (this->_internal_emv_parameters_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_emv_parameters_version());
  }

  // int32 bin_parameters_version = 4;
  if (this->_internal_bin_parameters_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bin_parameters_version());
  }

  // int32 restriction_list_version = 5;
  if (this->_internal_restriction_list_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_restriction_list_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterPassageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterPassageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterPassageResponse::GetClassData() const { return &_class_data_; }

void RegisterPassageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterPassageResponse *>(to)->MergeFrom(
      static_cast<const RegisterPassageResponse &>(from));
}


void RegisterPassageResponse::MergeFrom(const RegisterPassageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:axis.transactions.RegisterPassageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gateway_uid().empty()) {
    _internal_set_gateway_uid(from._internal_gateway_uid());
  }
  if (!from._internal_device_suid().empty()) {
    _internal_set_device_suid(from._internal_device_suid());
  }
  if (from._internal_response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
  if (from._internal_emv_parameters_version() != 0) {
    _internal_set_emv_parameters_version(from._internal_emv_parameters_version());
  }
  if (from._internal_bin_parameters_version() != 0) {
    _internal_set_bin_parameters_version(from._internal_bin_parameters_version());
  }
  if (from._internal_restriction_list_version() != 0) {
    _internal_set_restriction_list_version(from._internal_restriction_list_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterPassageResponse::CopyFrom(const RegisterPassageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:axis.transactions.RegisterPassageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPassageResponse::IsInitialized() const {
  return true;
}

void RegisterPassageResponse::InternalSwap(RegisterPassageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gateway_uid_, lhs_arena,
      &other->gateway_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_suid_, lhs_arena,
      &other->device_suid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterPassageResponse, restriction_list_version_)
      + sizeof(RegisterPassageResponse::restriction_list_version_)
      - PROTOBUF_FIELD_OFFSET(RegisterPassageResponse, response_code_)>(
          reinterpret_cast<char*>(&response_code_),
          reinterpret_cast<char*>(&other->response_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPassageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_passage_5fregister_2eproto_getter, &descriptor_table_passage_5fregister_2eproto_once,
      file_level_metadata_passage_5fregister_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transactions
}  // namespace axis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::axis::transactions::RegisterPassageRequest* Arena::CreateMaybeMessage< ::axis::transactions::RegisterPassageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::RegisterPassageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::axis::transactions::RegisterPassageResponse* Arena::CreateMaybeMessage< ::axis::transactions::RegisterPassageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::axis::transactions::RegisterPassageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
